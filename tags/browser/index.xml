<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>browser on Under The Ginkgo</title>
        <link>https://ginkgo.org.cn/tags/browser/</link>
        <description>Recent content in browser on Under The Ginkgo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Fri, 24 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ginkgo.org.cn/tags/browser/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>浏览器是如何工作的？</title>
        <link>https://ginkgo.org.cn/posts/how_browsers_work/</link>
        <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/how_browsers_work/</guid>
        <description>&lt;h2 id=&#34;浏览器是如何工作的&#34;&gt;浏览器是如何工作的？&lt;/h2&gt;
&lt;p&gt;本文内容主要来源于：&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work#see_also&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Populating the page: how browsers work&lt;/a&gt;，再加上本人的理解以及拓展知识的介绍，但是还是建议大家去阅读英文的官方文档，会得到更全面的信息以及拓展资源 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;快速响应的网站可以为用户提供更好的用户体验，这意味着网站的内容可以:1)快速的被加载，并且可以 2)进行流畅的互动。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么要实现这两个需求，我们就需要考虑Latency加载等待时间，以及认识到浏览器其实在大多数情况下是单线程工作的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Latency, 时延，是我们实现快速响应的主要阻力，为了实现快速响应，降低时延，开发者需要尽可能快的发送请求。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在大部分情况下，浏览器都是单线程在工作的，那么我们为了让网站可以流畅的访问，主要的目标就是保证浏览器的主线程在完成浏览器运行的大部分工作的同时，还有余力来处理用户的交互，那么开发者需要认识到这一点，并且尽量降低主线程所分配到的任务，从而使网页的渲染以及用户的交互更为流畅。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;navigation-导航&#34;&gt;Navigation 导航&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;导航&lt;/code&gt; 是加载网页的第一步，导航发生在当用户通过将URL输入地址栏；点击链接；提交表单以及类似的这样的操作 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;减少在导航上的时间也是优化网页性能的一个重要目标，阻力来源于时延和带宽 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;dns-lookup-dns-查询&#34;&gt;DNS Lookup DNS 查询&lt;/h4&gt;
&lt;p&gt;对于网页的导航始于找到资源的位置，也就是通过URL来定位资源，比如我们要访问 &lt;code&gt;https://example.com&lt;/code&gt;, 其对应的IP地址是 &lt;code&gt;93.184.216.34&lt;/code&gt;, 上面存放着的对应的HTML资源，但是我们的浏览器此时还没有访问过这个网页，因此第一步要做的事情就是DNS lookup &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过DNS查询，name server最终会返回给浏览器域名所对应的IP地址，进而将其缓存以加速未来的访问速度。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么我们具体到网页上来，DNS查询不只发生在主页面的HTML的获取上，还需要对HTML上所引用的资源逐一进行导航和DNS查询，这就需要开发者对此进行优化，特别是对于移动端用户，每一次DNS查询都意味着需要通过信号塔来访问授权的DNS server,那么根据信号塔的距离就会产生一定的时延 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-06-24_11-03-19_screenshot.png&#34;
         alt=&#34;Figure 1: DNS lookup on Mobile devices&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;DNS lookup on Mobile devices&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;tcp-handshake&#34;&gt;TCP Handshake&lt;/h4&gt;
&lt;p&gt;经过DNS查询，我们现在已经拿到了目标网页资源所处的IP地址了，接下来就要进行TCP三次握手来进行连接。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过&amp;quot;SYN, SYN-ACK, ACK&amp;quot; 的三条TCP信息来建立TCP连接。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;tls-negotiation&#34;&gt;TLS Negotiation&lt;/h4&gt;
&lt;p&gt;同时，为了保证安全，我们提倡使用HTTPS协议，其要求在进行基本的TCP三次握手之后，还需要进行进一步的“握手”，来建立安全连接，也就是TLS Negotiation &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这将要求额外的5条信息，用来对client以及server进行相互认证，并且确认解码的密钥，来保证数据的保密性 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-06-24_11-04-40_screenshot.png&#34;
         alt=&#34;Figure 2: TLS Negotiation&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 2: &lt;!-- raw HTML omitted --&gt;TLS Negotiation&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;response-响应&#34;&gt;Response 响应&lt;/h3&gt;
&lt;p&gt;现在浏览器已经和服务器建立了安全的TCP连接了，这时浏览器就会发送一个初始的 &lt;code&gt;HTTP GET request&lt;/code&gt; 来请求网页资源，这通常是一个HTML文件，服务器收到了请求，接着返回对应的HTTP headers以及HTML文件的内容 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;例如： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype HTML&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My simple page&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;styles.css&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myscript.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;heading&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My Page&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;A paragraph with a &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://example.com/about&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;link&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myimage.jpg&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;image description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;anotherscript.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Time to First Byte (TTFB)&lt;/code&gt; 表示从用户发出请求（点击连接）到收到第一个HTML的数据包的时间，通常第一块信息的大小是14KB的数据 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;下面我们会解释为什么第一块信息是14KB的。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;congestion-control-tcp-slow-start-14-kb-rule-tcp慢启动&#34;&gt;Congestion control: TCP Slow Start /14 KB rule TCP慢启动&lt;/h4&gt;
&lt;p&gt;现在已经建立了安全的连接，接下来服务器将会根据用户的请求返回对应的数据，但是传输的速度（单位时间内传输的数据）并不是从一开始就达到最优的速度的，而是慢慢增加的，为的是防止  &lt;code&gt;网络拥塞&lt;/code&gt; 。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;网络拥塞：网络拥塞就是一个网络节点需要处理大于他们能力的数据时，网络的性能就会变化，也就会发生拥塞，例如路由器或者用户的设备对于接收到的数据的处理速度跟不上接收速度，那么设备的缓存就会被占满，再接收到的数据就会被丢弃，导致网络性能下降。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在网络层就会发生丢包的现象，而主要的拥塞控制就发生在传输层上 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/TCP_slow_start&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TCP慢启动&lt;/a&gt;就是一个用来检测数据传输可使用的带宽，同时平衡网络连接速度的算法，其通过逐渐增加数据传输速度来找到最好的传输速度，从而防止 &lt;code&gt;网络堵塞&lt;/code&gt; 的发生。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在讲解算法的具体流程之前，我们需要先了解一些相关概念 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;congestion window (cwnd)&lt;/dt&gt;
&lt;dd&gt;拥塞窗口，发送方的设置，表示在收到接收方ACK之前，发送方最大允许传输的数据大小 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;slow start threshold (ssthresh)&lt;/dt&gt;
&lt;dd&gt;来设定慢启动算法使用的阈值 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Round-Trip Time (RTT)&lt;/dt&gt;
&lt;dd&gt;往返时延，表示从发送方发出数据开始，到发送发收到来自接收方的ACK，所经历的所有时延 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Maximum_transmission_unit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Maximum Transmission Unit (MTU)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;MTU是可以在网络层可以通信的最大PDU的大小，其应用于网络层，单位一般用字节来设定 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在以太网中，最大的frame为1518 bytes，其中18bytes是overhead（headers和检查值），MTU的值就是1500 bytes &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Protocol_data_unit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Protocol data unit (PDU)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;PDU 是同一层的通信协议之间通信的最小信息单位，例如在OSI模型中： &lt;!-- raw HTML omitted --&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Layer&lt;/th&gt;
&lt;th&gt;PDU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;The Layer 4: Transport Layer&lt;/td&gt;
&lt;td&gt;segment(TCP)/datagram(UDP)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Layer 3: Network Layer&lt;/td&gt;
&lt;td&gt;packet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Layer 2: Data link layer&lt;/td&gt;
&lt;td&gt;frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Layer 1: Physical layer&lt;/td&gt;
&lt;td&gt;bit, or more generally, symbol&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/dd&gt;
&lt;dt&gt;Maximum Segment Size (MSS)&lt;/dt&gt;
&lt;dd&gt;最大TCP segment的大小，是TCP的一个参数 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;根据定义，我们可以得出：一个TCP segment的payload &amp;lt; MSS &amp;lt; MTU &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;cwnd &amp;lt; ssthresh，慢启动算法 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当一个新的连接建立之后，发送方将初始化 cwnd = 1（2013年的RFC6928规定一个cwnd表示10个TCP segment） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;每过一个RTT，即收到ACK之后，cwnd = cwnd * 2，呈指数增长 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;cwnd = sshtresh 慢启动与拥塞避免算法都可 &lt;!-- raw HTML omitted --&gt;
cwnd &amp;gt; sshtresh，改用拥塞避免算法,我们这里介绍 Additive increase/multiplicative decrease, AIMD算法（加法增加乘法减小算法） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在cwnd大于sshtresh之后，每当发送方收到一个ACK之后，++cwnd;呈线性上升，这就是  &lt;code&gt;加法增加&lt;/code&gt;  &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;一旦出现网络拥塞，就进行 &lt;code&gt;乘法减小&lt;/code&gt; 即将 sshtresh = cwnd/2； cwnd = 1 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;接着切换到慢启动算法重新开始 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-06-25_15-34-25_screenshot.png&#34;
         alt=&#34;Figure 3: TCP Slow start &amp;amp;amp; AIMD&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 3: &lt;!-- raw HTML omitted --&gt;TCP Slow start &amp;amp; AIMD&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;parsing-解析&#34;&gt;Parsing 解析&lt;/h3&gt;
&lt;p&gt;当浏览器收到了第一块数据，它就会直接开始解析收到的信息，第一步就是将接收到的数据转换为 &lt;code&gt;DOM&lt;/code&gt; &amp;amp; &lt;code&gt;CSSOM&lt;/code&gt;, 这两个结构是渲染器用来绘制网页的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DOM&lt;/code&gt;, Document Object Model, 是一个用来将XML或者HTML转换为树结构的跨平台，独立于语言的API，可以通过JS调用API来进行修改。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;即使请求的HTML文件大于14KB，浏览器仍然会直接尝试解析并渲染第一块14KB的数据，这也就是为什么开发者在做web性能优化的时候，需要将CSS以及HTML控制在14KB之内，以此来保障网页能够成功进行初级渲染。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;一个TCP packet最大可以达到1500 bytes，同时其中有40 bytes需要别用作TCP协议（TCP headers），那么也就剩下1460 bytes来承载实际的数据，那么十个TCP packets就是14,600 bytes也就是大约14KB的数据（慢启动一般会从十个TCP数据包开始传输）：&lt;a class=&#34;link&#34; href=&#34;https://www.tunetheweb.com/blog/critical-resources-and-the-first-14kb/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Critical Resources and the First 14 KB - A Review&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;接下来我们就会介绍 &lt;code&gt;关键渲染&lt;/code&gt; 路径的五个步骤，即浏览器如何将HTML，CSS以及JS转换成屏幕的像素 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;building-the-dom-tree-构建dom&#34;&gt;Building the DOM tree 构建DOM&lt;/h4&gt;
&lt;p&gt;第一步就是处理HTML标签从而构造DOM树。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;HTML的解析涉及到 &lt;code&gt;tokenisation&lt;/code&gt; 以及树的构造 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们可以观察下图来看到DOM是如何同通过HTML标签来构造树的： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 是第一个标签，也就是DOM tree的根节点，其他的标签就作为子节点根据对应的结构进行组合 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-06-25_15-58-58_screenshot.png&#34;
         alt=&#34;Figure 4: DOM tree&#34; width=&#34;400px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 4: &lt;!-- raw HTML omitted --&gt;DOM tree&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在解析HTML标签的过程中，如果遇到non-blocking非阻塞（渲染）的资源，例如图片，浏览器会请求这些资源，并继续进行解析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;但是当碰到 &amp;lt;script&amp;gt; 标签，特别是那些不是 &lt;code&gt;async(异步)&lt;/code&gt; 的脚本标签，这将使渲染以及解析都停止，这将对性能产生影响 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;preload-scanner-预加载扫描器&#34;&gt;Preload scanner 预加载扫描器&lt;/h4&gt;
&lt;p&gt;当浏览器在构建DOM tree时，Preload scanner就会占据主线程，并同步开始请求高优先级的资源，以此保证解析不会卡在这些资源的获取上，例如CSS, JS, images, web fonts。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;例如下列标签就会在HTML解析的过程中，被preload scanner 所请求获取 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;styles.css&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myscript.js&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myimage.jpg&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;image description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;anotherscript.js&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;building-the-cssom&#34;&gt;Building the CSSOM&lt;/h4&gt;
&lt;p&gt;第二步就是构建CSSOM树，CSSOM树与DOM类似，只不过处理的是CSS而非HTML，通过将CSS规则以及CSS selectors所制定的关系结构转换为一个树的结构 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-06-26_10-05-58_screenshot.png&#34;
         alt=&#34;Figure 5: CSSOM&#34; width=&#34;300px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 5: &lt;!-- raw HTML omitted --&gt;CSSOM&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;other-processes&#34;&gt;Other Processes&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JavaScript Compilation&lt;/p&gt;
&lt;p&gt;当CSS在被解析并构建CSSOM的同时，JS文件也在被下载，解释，编译，解析以及执行，这些脚本会被解析并存入 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Abstract_syntax_tree&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Abstract syntax tree，抽象语法树&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-06-26_10-03-47_screenshot.png&#34;
         alt=&#34;Figure 6: AST&#34; width=&#34;500px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 6: &lt;!-- raw HTML omitted --&gt;AST&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Building the Accessibility Tree 构建辅助功能树&lt;/p&gt;
&lt;p&gt;浏览器还会构建 &lt;code&gt;accessiblity tree&lt;/code&gt; 来辅助设备来解析和解释内容，accessibility object model (AOM) 拥有与DOM类似的语法结构，AOM一般来说是无法访问的。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在AOM被构建之前，所有的内容都是无法被屏幕阅读器所访问的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那到底什么是Accessibility辅助功能，它有什么作用呢，相信大家都在浏览器的开发者工具里看到过这个功能，甚至在电脑，手机都有看到过这个功能，大概看起来是一个方便disable来使用电子设备的功能，但是我们平时却很少使用。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/Accessibility&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Accessibility&lt;/a&gt; 的目标是使尽可能多的人能够更好的访问网页，不仅仅是有障碍的人士，同时也帮助那些使用移动端设备或者网速很慢的用户群体。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Firefox内置了Accessibility APIs来对网页的内容进行解析，分析不同的元素的功能与角色，从而并构造AOM，同时根据一些网页设计的标准来判断开发是否规范，例如HTML标签是否使用得当，文字的大小，比例，颜色，对比度等内容是否适合与不同的设备，对视力有障碍的人士是否友好。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Firefox官方的一个&lt;a class=&#34;link&#34; href=&#34;https://youtu.be/7mqqgIxX_NU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;视频&lt;/a&gt;展示了一个很好的例子，对于一个网页的内容，普通人可以进行正常的阅读，但是当这个内容在视力有障碍的人士使用工具进行朗读的时候，也许就会出现问题，这也体现了Accessibility的作用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;render-渲染&#34;&gt;Render 渲染&lt;/h3&gt;
&lt;p&gt;渲染的步骤包括计算样式（style），计算布局（layout），最后绘制（paint），在一些情况下还包含了合成。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;style&#34;&gt;Style&lt;/h4&gt;
&lt;p&gt;关键渲染路径的第三步就是将DOM以及CSSOM结合到render tree渲染树/ computed style tree 计算得到的样式树中： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;对于每一个DOM树中的可视节点，都会将CSSOM中对应的样式与其配套 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;layout&#34;&gt;Layout&lt;/h4&gt;
&lt;p&gt;在确定了每一个节点的样式完成渲染树之后，第四步就是要考虑如何对所有的这些元素进行排列，通过从渲染树的根开始便利，对每个节点的几何信息进行计算，例如宽度和高度，以及在页面中的位置 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;第一次对于位置以及大小的计算我们成为 layout, 当我们再次确定页面中一些资源的大小例如图片加载完成之后，重新进行计算叫做 reflows 回流 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;paint&#34;&gt;Paint&lt;/h4&gt;
&lt;p&gt;关键渲染路径的最后一步就是Paint绘制，就是要将所有的可视的内容都绘制到屏幕上去，包括文字，颜色，间距，阴影以及可以替换的元素，例如按钮（按下去的图片）以及图片。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;为了保证页面能够流畅的滚动以及动画效果，Paint将占据主线程来进行绘制，为了确保绘制的速度，屏幕上的绘图通常会被分解称数层来进行，那么同时也就需要进行合成。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;绘制会讲layout tree 中的元素分成多层，将内容提升到GPU可以提高绘制和宠幸绘制的性能：有一些特定的属性和元素可以组成一个层（例如&amp;lt;video&amp;gt;, &amp;lt;canvas&amp;gt;）；CSS属性为opacity、3D transform、 will-change的元素，也可以组成单独的层来进行绘制，不过这也意味着需要消耗更多的内存，注意不能过度使用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;compositing-合成&#34;&gt;Compositing 合成&lt;/h4&gt;
&lt;p&gt;那么在Paint的过程中分层进行之后，就需要对所有的层进行合成，相互重叠，保证它们以正常的顺序绘制到屏幕上，显示正常的内容。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/Critical_rendering_path.png&#34;
         alt=&#34;Figure 7: Critical rendering path&#34; width=&#34;900px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 7: &lt;!-- raw HTML omitted --&gt;Critical rendering path&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;interactivity-交互&#34;&gt;Interactivity 交互&lt;/h3&gt;
&lt;p&gt;主线程绘制页面的任务完成并不代表一切都准备就绪，还需要加载JavaScript脚本（比如onload属性就是等待给定的资源加载完成时触发），那么在加载JS的过程中，记得我们的浏览器大部分还是一个单线程，因此就无法进行滚动、触摸或者其他的交互 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们用 &lt;code&gt;Time to Interactive (TTI)&lt;/code&gt; 来衡量从第一个请求所触发DNNS查询开始到页面可以正常教务所使用的时间，页面需要在50ms，如果此时主线程还在解析，编译和执行JS就会导致页面不不能相应用户的交互，这就是需要调整的地方。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work#see_also&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Populating the page: how browsers work&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work#%E8%A7%A3%E6%9E%90&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;渲染页面：浏览器的工作原理&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.tunetheweb.com/blog/critical-resources-and-the-first-14kb/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Critical Resources and the First 14 KB - A Review&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844904006658031629&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;关于首屏html应限制在14kb内的探究&lt;/a&gt;  &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/m0_37962600/article/details/79993310&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;详解TCP中的拥塞控制&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Learn/Accessibility/What_is_accessibility&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is accessibility?&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://firefox-source-docs.mozilla.org/devtools-user/accessibility_inspector/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Accessibility Inspector&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
