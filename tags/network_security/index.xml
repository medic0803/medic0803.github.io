<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>network_security on Under The Ginkgo</title>
        <link>https://ginkgo.org.cn/tags/network_security/</link>
        <description>Recent content in network_security on Under The Ginkgo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Mon, 30 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ginkgo.org.cn/tags/network_security/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>NSE Week 10: Privacy and anonymity</title>
        <link>https://ginkgo.org.cn/posts/nse_week_10_privacy_and_anonymity/</link>
        <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_10_privacy_and_anonymity/</guid>
        <description>&lt;h2 id=&#34;nse-week-10-privacy-and-anonymity&#34;&gt;NSE Week 10: Privacy and anonymity&lt;/h2&gt;
&lt;h3 id=&#34;privacy-and-anonymity&#34;&gt;Privacy and Anonymity&lt;/h3&gt;
&lt;p&gt;Privacy is about you choosing what you let other people know which means keep confidentiality of information that you don&amp;rsquo;t want to share with others &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;However, Anonymity is about conceal your identity, the confidentiality of your identity, no one know what you are doing. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;privacy-and-anonymity-on-public-networks&#34;&gt;Privacy and anonymity on public networks&lt;/h4&gt;
&lt;p&gt;However, the confidentiality of both the data you want to transmit or your identity is exposed to Internet. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Internet is designed as a public network &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Devices in LAN can see your traffic &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Intermediate routers can see all traffic that passes through them &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Remember what we leanred in CIS? Email is actually a post card but not a letter, which means everyone could see the content on it with envelop protects &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Routing information is public &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IP packet will contain source and destination for routing &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is easy to figure out who is talking to whom &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encryption &lt;code&gt;dose NOT&lt;/code&gt; hide identities &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;encryption only happen on payload but not the routing information in header &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even IPsec have to reveal the IP address of IPsec gateways &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why is anonymity so important? &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;packet headers exposes two ends of communication &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;packet routes can be tracked (traffic analysis) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;encrypted payload is still visible (cryptanalysis) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some applications: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Privacy &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;hide online transactions, web browsing &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Untraceable email &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;corporate whistle-blowers &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;political dissidents &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;confidential business negotiations &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Digital cash &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;unlinkable to buyer&amp;rsquo;s identity &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anonymous electronic voting (e-voting) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Censorship-resistant publishing &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;anonymity&#34;&gt;Anonymity&lt;/h4&gt;
&lt;p&gt;Anonymity中最重要的一点：你只能在一群人中才能使自己匿名，即所有人都在一起发送，接收，做出同样的行动，才能隐藏个人的行为 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;You are only anonymous within a group is your actions &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;You cannot be anonymous by yourself!!! &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Anonymity由三个特性 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Anonymity &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;从茫茫多的活动中隐藏自己的活动，而不要显眼的被挑出来 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unlinkability &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;无法将行动与个人联系起来 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;比如发完邮件之后，发件人和邮件就没有关联了 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unobservability &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;很难实现 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;既别人无法意识到这件事情到底发生没有 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;笔名就是一个简单的方法，用来隐藏自己的身份（用户名） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Attacks on anonymity?&lt;/p&gt;
&lt;p&gt;Passive traffic analysis
: -   从网络活动中发现谁与谁在通信 &lt;!-- raw HTML omitted --&gt;
-   为了隐藏自己的活动，每个人必须要还要处理别人的traffic，即每个人都在做一样的事情，分不清真正想要做这件事情的人是谁 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Active traffic analysis
: -   注入数据包或者将signature注入数据流中进行进一步观察 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Compromise of network nodes
: -   黑入网络中的节点，然后被动的收集数据 &lt;!-- raw HTML omitted --&gt;
-   因此不能相信任意一个网络节点，被黑以后都是不明显的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Proxy也可以用来进行匿名 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sender通过proxy改变了自己的信息，使原始的sender不会被找到 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;receiver则通过广播或者多播发送给整一个匿名组用户，其中只有一个真正的接收者 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;弱点在哪儿呢？ &lt;!-- raw HTML omitted --&gt;
那就是Proxy知道一切的事情，如果proxy被黑客控制，那么一切都没有意义了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们也可以用cascaded proxy chains，mix networks来counter这个攻击 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cascaded proxies with encryption&lt;/p&gt;
&lt;p&gt;何谓cascaded proxies级联代理呢？就是我们通过多层的代理，每一层都proxy都拥有一个private key来进行解密，再传递给下一个proxy继续解密，只有最后一个proxy服务器知道最初始的数据，然后广播到匿名组里去 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
但是流量分析还是可以实现，因此我们需要mix networks &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mix-networks&#34;&gt;Mix networks&lt;/h3&gt;
&lt;p&gt;主要目的是为了建立一个匿名的channel &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在垃圾邮件出现之前，大家都觉得匿名邮件是个好东西，从而衍生出了很多的remailers &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Mix = Public-key cryptography + trusted re-mailer &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Publick key就作为持久的假名，就类似于Bitcoin中的address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Untrusted communication medium: 被设计在一个攻击者可以 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;获取所有的source/destination信息，以及所传递的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;可以修改注入删除所有的 messages &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;但是唯一做不到的事情就是不能找到这些信息之间的关系，cannot coorelate plaintext and ciphertext,也无法进行伪造（不知道如何加密） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;using-a-single-mix&#34;&gt;Using a single Mix&lt;/h4&gt;
&lt;p&gt;我们用 &lt;code&gt;Mix&lt;/code&gt; 代表一个邮件处理系统 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_17-17-03_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;A发出一条信息给Mix,使用mixer的public key进行加密，Mix会解密之后重新组装，然后发送给一个匿名组所有的用户，每一个用户所接受到的信息都是不同的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;攻击者可以看到所有的senders and receivers但是却不能将发送的消息和经由Mix重新组装后的消息所联系起来 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_17-17-11_screenshot.png&#34; width=&#34;300px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其中r1, r0 这些内容是为了满足加密算法所需要的byte数而进行的padding &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Foiling traffic analysis: four requirements&lt;/p&gt;
&lt;p&gt;为了防止进行流量分析，mix还提供了四个要求 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Agents/mixes work with uniformly sized items 要求所有的信息都是同样格式的（比如所有的信息都被padded到相同的长度的block后加密） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Order of arrival hidden by outputting items in batches 通过批量输出信息到匿名组来隐藏顺序 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Repeated information must be blocked 不允许重复的信息，需要通过过滤器来筛查重复信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Sufficient traffic from a large anonymity set if required 需要大量的匿名组用户进行数据的发送 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;太少的话就会削弱anonymity &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;可以让clients定期发送或者接受dummy messages假信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_17-23-22_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generating receipts&lt;/p&gt;
&lt;p&gt;Mix同样可以用来生成receipt代表message被收到了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_17-30-11_screenshot.png&#34; width=&#34;300px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这里的 &lt;code&gt;c&lt;/code&gt; 是很大的，我觉得应该就是为了保持相等的格式，可以用很多0来填充 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_17-32-29_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mix-networks&#34;&gt;Mix networks&lt;/h4&gt;
&lt;p&gt;我们已经看过了一个单独的Mix是如何工作的，其实和之前的proxy很类似，都存在一个缺点，就是一旦被攻击，那么所有信息都会暴露 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;因此我们在这里采取同样的策略，即使用级联的Mix服务器相连来处理 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;每一个Mix都属于不同的administrative domain，这里应该想说的是不属于同一个地方管辖，也就不会因为一个被黑入了，就会影响其他的servers &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过多个Mix server联合使用，只要还有一个server没有被黑入，那么通信就还是匿名的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们假设network中存在着多个Mix server，那么Alice就需要选择Mix-path来决定路经那几个server，然后使用对应的密钥进行加密再发送给Bob &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_17-36-58_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_17-37-07_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Alice 根据Mix-path选择Mix server的public key对数据进行padding与加密 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;每一个途径的Mix-server用自己的private key解密后再传达给下一个 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;最终最后一个Mix server就和我们之前提到过的那样发送给匿名组 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么既然最后一个Mix server又变成了single Mix-server中最简单的模式，难道被攻破之后不是毫无意义了吗？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这里要注意的是，每一个Mix server也就是仅仅只能知道前一个Mix server的信息，发送方的信息根本已经无从知晓了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;untraceable-return-addresses&#34;&gt;Untraceable return addresses&lt;/h4&gt;
&lt;p&gt;如何匿名发送回复消息表示信息收到了呢？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Single Mix case (with key pk_mix1): &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送方在自己的数据里包含 return address: {r1, A_x}_pk_mix1, pk_x &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;r1, random string, can be used as a shared key &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;pk_x, a fresh public key &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Ax 真实的地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接受者回复： {r1, A_x}_pk_mix1, {r0, M&amp;rsquo;}pk_x &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;通过 fresh public key对数据进行加密 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mix解密之后得知真实的地址是Ax，然后回复给A &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;级联的Mix servers的处理方式 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_17-50-57_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样的办法，A会附带自己的地址以及一个pk_x,然后B在回复的时候会一层层根据选择的Mix-path上的Mix server的public key进行层层加密后返回 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;mix-networks-attacks&#34;&gt;Mix networks: attacks&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Tracing a message &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
因为存在大量的dummy messages假消息而不可被追踪 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Replay attack, 用重复的messsage进行攻击 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_17-52-47_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是每一个 Mix server 中都有一个重复信息的过滤器，也不可能发生 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;mix-networks-n-1-attack&#34;&gt;Mix networks: n-1 attack&lt;/h4&gt;
&lt;p&gt;n-1 attack 是一种active attack, attacker 通过flooding一个node，使一个node上大部分的数据都是其做知晓的，那么剩下来的内容就很容易进行分析了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如何进行防御呢？ &lt;!-- raw HTML omitted --&gt;
使用Hearbeat message: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每一个Mix server都会检测自己的网络环境，然后观察发出的消息收到的回复情况，我们称为heartbeat messages心跳 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;当Mix server收到了flooding attack其无法判断哪些流量是好的还是攻击者的流量，但是通过对于 heatbeat message在这些流量的比例的判断，来主动增加网络流量中的dummy message从而与flooding数据包进行抗衡，增加匿名性 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;mix-networks-advantages&#34;&gt;Mix networks: advantages&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;匿名化的程度非常高 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Mix input and output 之间无法被联系起来 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;只要有一个Mix server没有被入侵就还能保证匿名性 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;只要有足够多的dummy traffic, anonymity set就是整一个网络 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新的密码学的实践 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;连receiver都可以不知道sender是谁 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时这封匿名的邮件是可以被certified的，可以由receiver以及路上的每一个Mix进行签名 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;mix-networks-disadvantages&#34;&gt;Mix networks: disadvantages&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;级联的 Mix server意味着每一个server上都要进行大量的加密解密结算，非常消耗资源 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;延迟非常高，email还可以接受，但是网页浏览就没办法了 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Dummy message的开销很大 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如何搭建一个低延迟的匿名环境是一个挑战 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Use public-key cryptography to establish a “circuit” with pairwise symmetric keys between hops on the circuit. &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Then use symmetric decryption and re-encryption to move data messages along the established circuits. &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Each node behaves like a mix; anonymity is preserved even if some nodes are compromised &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;dining-cryptographers&#34;&gt;Dining cryptographers&lt;/h3&gt;
&lt;p&gt;三个的密码学家在一起吃晚饭，吃完饭之后需要结账，他们有两个选择，一是报销让NSA付钱，要么他们中的一个付钱，但是付钱的那个人不希望其他两个人知道（别问万一两个人都想付钱怎么办233），他们相出了一个办法可以让这一切成立 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个密码学家都抛一枚硬币，并向其左边的邻居展示 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;因此每个密码学都能看到两枚硬币，他自己的和他右边的邻居的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每个密码学家需要宣称两枚硬币是否相同 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;付钱的那位密码学家会撒谎（说反话） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;那么如果说“相同的”是单数 =&amp;gt; NSA报销 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;如果是偶数，他们其中一个人付钱了 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;但是其他人不知道谁付钱了 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;three-person-dc-protocol&#34;&gt;Three-person DC protocol&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;假设三位密码学家：C1, C2, C3投掷了硬币，其结果为bi &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;每位密码学家都与左边的邻居共享了自己的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;每位密码学家都将自己所看到的两枚硬币的情况进行计算di = bi XOR bi-1 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;bi表示密码学家自己的硬币 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;bi-1表示右边邻居的情况 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;要注意的是d0 = d3 and b0 = b3因为绕了一圈了 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果没有付钱，那就直接宣称计算的结果di,如果付钱了，那就宣称di XOR 1 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;proof&#34;&gt;Proof&lt;/h4&gt;
&lt;p&gt;我们假设有三位密码学家所宣称的值为：A1, A2, A3 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果没付钱了，那么Ai = di &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果付钱， Ai = di XOR 1 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_20-45-57_screenshot.png&#34; width=&#34;300px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有一个人付钱，那么所有宣称的数值计算后应该得出0，否则则为1 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_20-46-59_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同时，如果有人付钱了，一个没有付钱的密码学家是无法得知是其他两人中的谁付的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同样的情况可以运用到多个用户身上，每个用户都生成一个随机的bit发送给左边的邻居，每个人都有两个bits来进行计算 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个人都宣称自己进行XOR计算的结果 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;只有发送者会多XOR一个想要发送的数据中的bit &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;这样就可以综合所有的结果并得到0/1也就是message bit &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是现实中很难实现，因为首先需要很大的匿名组，然后还有每个用户都做随机数然后再计算，很复杂 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;安全性确实很强，就算有很强大的算力也无法得知发送者是谁。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同时也会因为通信channel被干扰而出现错误，同时匿名组中的成员如果撒谎了也会导致通信失败 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;onion-routing&#34;&gt;Onion routing&lt;/h3&gt;
&lt;p&gt;发送者随机地选择途径路由器的次序 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们假设有一些路由器是诚实的，但是有一些被黑客所控制了 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;发送者主动的控制路径的长度 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_21-06-06_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送者将数据根据选择的路径用每个路由器的public key加密好，并内置一个symmetric key来对后续的内容进行加密 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时每个路由器只能获取到前一个router的identity,使其无法溯源 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tor (the onion router)就是这么进行匿名通信的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Set up Onion service sot that it&amp;rsquo;s reachable by clients &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送者首先先与一台路由器交换symmetric session key &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后用这台路由器作为代理与新的路由器交换symmetric session key，不断反复，直到到达目标地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后就利用建立的Tor circuit进行通信，每个途径的onion router都会单独加密解密 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;location-hidden-servers&#34;&gt;Location hidden servers&lt;/h3&gt;
&lt;p&gt;Goal: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将服务器部署在Internet上并且告知其他用户可以访问，但是不能让别人知道这台服务器在哪儿和是谁在运行 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;随处可以访问 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;不会被审查 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;能够在DoS attack中存活 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;找不到物理服务器 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://community.torproject.org/onion-services/overview/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://community.torproject.org/onion-services/overview/&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;privacy&#34;&gt;Privacy&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;A privacy policy&lt;/code&gt; specifies how data may be used, under which condition, and what obligations this entails. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>NSE Week 9: IKE and SSL/TLS</title>
        <link>https://ginkgo.org.cn/posts/nse_week_9_ike_and_ssl_tls/</link>
        <pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_9_ike_and_ssl_tls/</guid>
        <description>&lt;h2 id=&#34;nse-week-9-ike-and-ssl-tls&#34;&gt;NSE Week 9: IKE and SSL/TLS&lt;/h2&gt;
&lt;h3 id=&#34;ike--the-internet-key-exchange-protocol&#34;&gt;IKE (The Internet Key Exchange protocol)&lt;/h3&gt;
&lt;p&gt;IKE不仅仅只是关于密钥，更多的关于SA (security associations): &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协议的格式 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;加密或者哈希的算法 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;密钥 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;IKE十分的灵活，比如提供身份认证，并通过多种pre-shared secrets来实现 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;IKE又十分复杂，有很多的选项可以配置以及很多的子协议 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;IKE结合了 &lt;code&gt;ISAKMP&lt;/code&gt; 的数据包格式，以及 &lt;code&gt;OAKLEY&lt;/code&gt; 的协议，这两个东西都基于  &lt;code&gt;Diffie-hellman protocol&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_10-00-09_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;pfs&#34;&gt;PFS&lt;/h4&gt;
&lt;p&gt;如果我们已经能安全的交换YA,YB了，为什么还要套在这个Diffie-Hellman里面用呢？ &lt;!-- raw HTML omitted --&gt;
主要是为了实现PFS，perfect forward secrecy &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;PFS,perfect forward secrecy&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;为了确保协议做生成的临时key，session key不会因为用来产生这个session key所用到的key被破解了而导致session key也没破戒 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;用来加密传输数据的key不能用作产生其他的key，这样就会产生连带效应，一个key被破解了，其所产生的key也会被破解 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同样的道理，如果产生当前的key需要通过其他keys来产生，那么那些key也不能用做其他key的产生 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;也就是说一个key被破解了，只会影响用其所加密的数据，其他都不会收到影响 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;因此在具体实现的时候的一个小技巧就是，每个session key都是随机产生的，并且在session结束之后就销毁，这样就都不会影响了，同时也会给密码分析带来负担。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;ike-protocol&#34;&gt;IKE protocol&lt;/h4&gt;
&lt;p&gt;IKE可以为通信的双方来建立和维护SA &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Typical key establishment protocol: 只有一个阶段，就是双方使用 &lt;code&gt;master keys&lt;/code&gt; 来进行通信交换信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Master keys&lt;/dt&gt;
&lt;dd&gt;&lt;ol&gt;
&lt;li&gt;pre-shared secret (symmetric) keys &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;public encryption key (used only for encryption/decryption), 比如互相知道对方的public key，然后加密之后可以由对方的private key来进行解密 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;public signature key （用来进行验证） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;IKE则有两个步骤： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Phase 1: 通信的双方线协商一个SA，关于使用什么加密或者哈希算法 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Phase 2: Phase 1中产生的SA会继续产生 &amp;ldquo;child SAs&amp;quot;来进行加密和验证未来的通信 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ike-phase-1&#34;&gt;IKE phase 1&lt;/h4&gt;
&lt;p&gt;IKE的第一个阶段主要的目的是要建立一个安全的channel来给Phase 2进行通信交流 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;需要用到的概念有： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookies：用作初期的身份认证，推荐的实现方法是： &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;通过一些较快的hash，例如MD5，将UDP的IP source/destination address/ports 以及保存在本地的一个 &lt;code&gt;secret value&lt;/code&gt; 进行hash &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;因为存在一个 &lt;code&gt;secret value&lt;/code&gt; ，那么通过将自己生成的cookie发送给对方，再由对方发送回来，就可以进行验证，是否是自己曾经发出的内容 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Identifiers, ID: 用来标识通信的双方的身份，可以是： &lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Fully-qualified domain name &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Certification &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;E-mail address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;MAC address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Authenticators: 用于验证消息的数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;IKE Phase 1 提供两种模式 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Main mode &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;通过6条交换的信息来建立 &lt;code&gt;Initiator(I)&lt;/code&gt; and &lt;code&gt;Responder(R)&lt;/code&gt; 之间的安全channel &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;通过互相的配置协商来实现 &lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Identify protection&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Considerable flexibility&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Aggressive mode &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;由于不提供保护因此能够更快的建立 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;只需要3条信息的交换 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;没有&lt;/code&gt; 提供 &lt;code&gt;Identify protection&lt;/code&gt; 只有public-key加密所带来的authentication &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据选用的 authentication 方法的不同，每种模式都拥有4种变化 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pre-shared key &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Digital signatures &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;2 public-key variants &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的重点会放在Main mode上 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_12-29-01_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I会生成Cookie_I 以及ISA_I (ISAKMP SA)其中包含了提出的提议（加密和哈希算法） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;R在收到之后，会考虑I提出的proposal然后选择使用什么算法：ISA_R,接着返回自己生成的Cookie &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下就是一个例子，I会提出建议，然后由R来选择，因此ISA_I &amp;amp; ISA_R可能相同也可能不同，这将有R来决定 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_12-24-35_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I收到R同意的条约之后，随机选择构建DH所需要的参数 g, p (g is the primitive root of p), &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;X = g^x mod p &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;接着附上一个nonce，用来防止relay attack，keep freshness &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;R收到I发来的cookie之后，先对自己的C_R进行重新计算并验证 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;接着计算Y = g^y mod p &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;最后生成自己nonce N_R 返回给I &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I收到R的Y之后，就可以用来计算 DH session key了，在此之前还会重新计算并验证自己的cookie C_I &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;接着会将自己的ID以及 previous data通过约定好的 authenticator 计算好并和ID一起用DH session key进行加密并返回给R &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;R验证了自己的Cookie C_R 之后也会将自己的ID_R以及authentication data用DH session key进行加密后返回给I，I验证了R的ID之后也就完成了phase1 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据不同的authenticator也会有一些变种，但是步骤是不变的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_12-35-03_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;ike-phase-2&#34;&gt;IKE phase 2&lt;/h4&gt;
&lt;p&gt;IKE phase 2的通信会由之前在phase 1中达成的SA进行保护 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;IKE phase 2的目的就是利用之前建立的安全的通信，开始交换协商真正需要用在通信中的SAs &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;phase 2也有两种mode &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Quick mode &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;直接创造新的SAs (e.g., for ESP or AH) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New group mode &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;用来修改存在的SAs的参数 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;不产生新的SAs &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们主要关注Quick mode &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果被要求实现PFS，那么quick mode也会再次实现DH exchange &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;多个quick mode可以用不进行，并且会使用在phase1中用到过的ID &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;数据的加密会用到phase 1中的数据，用在phase 2中的新key &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_12-40-32_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SPI就是用来标识新的SA的 SPI fields &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;k就是DH exchange所生成的session key &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;协商建立一个SA &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成IPsec key 用作将来ESP or AH 中 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_12-41-43_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到，这其实也是一个协商的过程，就是I发起倡议，然后还是由R来决定最终的SA是怎么样的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;另一个例子 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_12-45-51_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The second phase of the IKE protocol is done by three message exchanges. For the ﬁrst and second messages I1 and R1, the initiator I and the responder R exchange IPSec SAs (IP SecSAIand IP SecSAR),nonces NI and NR(for replay attack protection), optional D -H values gI and gR, and hashes of these values and message IDs (to prove liveliness), HashI1 and HashR1. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;After the initiator sends one more hash (HashI2) using both NI and NR and the message ID as the third message, both parties will agree on the IPSec symmetric key for use during ESP or AH encapsulation. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;为了更好的保护长久的VPN session, IPsec 提供了定期刷新IKE key以及IPSec keys的机制 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IKE key的刷新需要重新跑两个phase &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;但是刷新IPsec只需要跑phase 2即可 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ssl-tls&#34;&gt;SSL/TLS&lt;/h3&gt;
&lt;p&gt;SSL/TLS是用来保护Transport layer传输层的安全的，通过提供confidentiality and integrity来防止通信被窃听和篡改 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;目标是实现Confidentiality, integrity，有条件的话也可以实现authentication，通过单（双）向的认证channel来进行安全的通信，由public-key certificate所支持，因为是Transport layer上的安全，因此也可以被应用层的协议所利用，例如HTTP(S), SMTP, IMAP &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;SSL/TLS实现了两种协议 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;tls-handshake-protocol&#34;&gt;TLS Handshake protocol&lt;/h4&gt;
&lt;p&gt;TLS Handshake protocol 通过初始化或者恢复之前的connection然后搭建一个安全的channel来进行通信 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_15-31-18_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Server certificate: B -&amp;gt; A: certificate(B, K_B) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Certificate是由 &lt;code&gt;trusted third party&lt;/code&gt; 来进行认证的，包含了B的identity以及B的public key &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;client exchange &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;client certificate (option) A -&amp;gt; B: certificate (A, K_A) {PMS}_K_B &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;client key exchange A - &amp;gt; B: {PMS}_K_B &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;certificate verify (option)   A-&amp;gt; B:{hash(message)}{K_A}^-1 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PMS: pre-master secret是用来生成新的master key M的，M= PRF(PMS, Na, Nb), where PRF is &lt;code&gt;pseudo-random function&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Nonce信息可以是在hello信息中被确定的 &lt;!-- raw HTML omitted --&gt;
最重要的就是两条消息就是 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server certificate: B -&amp;gt; A: certificate(B, K_B) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;client key exchange A - &amp;gt; B: {PMS}_K_B &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;simplest SSL do not provide authentication of sender’s identity (it has options to prove) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;tls-record-protocol&#34;&gt;TLS Record Protocol&lt;/h4&gt;
&lt;p&gt;TLS Record protocol是用来通信交换数据的，主要描述了应用层发出的数据应该如何被压缩，用MAC进行认证以及payload要如何加密 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;TLS Record Protocol 为每一个TLS connections提供了两种服务 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Confidentiality &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;由TLS Handshake protocol 所定义的密钥可以用来对TLS payload 进行加密 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Message Integrity &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;由TLS Handshake protocol 所定义的共享密钥（public key）可以用来组成MAC (message authentication code)来验证integrity &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-30_15-30-43_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;tls-connection-and-tls-session&#34;&gt;TLS connection and TLS session&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;TLS connection&lt;/dt&gt;
&lt;dd&gt;&lt;ol&gt;
&lt;li&gt;是一个短时间的概念transient &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;每一个connection会关联一个TLS session TLS会话 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;connection是P2P的关系 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;TLS connection 本质上是一个session内的安全流 a secure stream within a session &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;dt&gt;TLS session&lt;/dt&gt;
&lt;dd&gt;&lt;ol&gt;
&lt;li&gt;TLS session是一个长时间的概念，就算connection中断了，但是session依然存在 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;其表示client and server之间进行安全通信的关系，协议，是一种类似Security association的东西 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;TLS session 由TLS Handshake Protocol所创造，由client and security双发协商达成共识 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;每一个TLS session中都有很多关于安全的参数，可以同时被很多connection共享 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</description>
        </item>
        <item>
        <title>NSE Week 8: IP security</title>
        <link>https://ginkgo.org.cn/posts/nse_week_8_ip_security/</link>
        <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_8_ip_security/</guid>
        <description>&lt;h2 id=&#34;nse-week-8-ip-security&#34;&gt;NSE Week 8: IP security&lt;/h2&gt;
&lt;h3 id=&#34;internet-security&#34;&gt;Internet security&lt;/h3&gt;
&lt;p&gt;Why we need IP security, what the problems in existing TCP/IP protocols? &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;他们没有提供authentication或者confidentiality的功能，因此黑客可以sniffing也可以spoofing &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;ipsec&#34;&gt;IPsec&lt;/h3&gt;
&lt;p&gt;IP security (IPsec)通过提供额外的IP header来增强安全，适用于IPv4 or IPv6 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过在IP层实现这个安全措施，可以既保护那些已经在应用层做了安全措施的应用（例如看全邮件系统，SSL，Kerberos），也可以帮助那些没有安全措施的应用进行防护。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;IPsec提供了三种安全功能： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Authentication: 通过保证通信的双方的身份都经过了认证 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Confidentiality: 通过对payload数据的加密来防范未经授权的查看 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Key management: 安全的keys交换 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;implementation&#34;&gt;Implementation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Operating systems: 对主机终端用户提供保护 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Security gateways: firewalls or routers, 比如实现VPN &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;application-应用&#34;&gt;Application 应用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;保护分公司内部之间的通信：公司可以在LAN或者WAN搭建VPN来减少对于private networks的依赖 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;保护经过Internet的远程访问：终端用户可以利用IP sec协议来通过ISP来向公司网络发起关城访问请求 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;保护组织之间的通信 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;加强电子商务的安全性：通过对网络流量的加密来增强安全性 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;使用场景&#34;&gt;使用场景&lt;/h4&gt;
&lt;p&gt;IPSec既可以安装在组织的网络设备上，例如router or firewall作为内外网的gate来对进出的数据进行加密和解密，也可以安装在主机终端上来保护其对外网的通信。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_15-19-24_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;benefits&#34;&gt;Benefits&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;将IPSec部署在firewall &amp;amp; router上的时候，可以减轻公司企业对于安全措施的繁重负担，只需要全部交给这些网络设备统一处理就好了 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;并且firewall上的IPsec可以有效的防御绕过，因为外界来的流量都需要使用IPSec并且无处可逃 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;IPSec位于传输层下面，因此对于应用来说是透明的 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;不需要修改软件 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对用户也是透明的，不过一般来说用户也不会察觉到IPSec的存在，一切都是默默进行的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;有需要的话也可以私用保护单独的用户 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;ipsec-standard&#34;&gt;IPsec standard&lt;/h4&gt;
&lt;p&gt;IPsec 提供三种protocols来完成不同的任务 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authentication Header (AH)：保护IP数据包的integrity and authenticity（但是不包括 confidentiality） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Encapsulating Security Payload (ESP)：保护confidentiality，也可以选择性的保护integrity &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Internet Key Exchange Protocol (IKE): 提供密钥管理 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ipsec-services&#34;&gt;IPsec services&lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_15-27-10_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;IPsec可以通过选择实现不同的protocol来实现不同的services &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;ipsec-policy&#34;&gt;IPsec policy&lt;/h3&gt;
&lt;p&gt;IPsec policy主要是通过直接与IP packet进行互动，而具体的policy内容则需要访问两个数据库： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Security association database (SAD) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Security policy database (SPD) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;security-association-database--sad&#34;&gt;Security association database (SAD)&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;Security association (SA)&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;SA是一个SAD中的关键 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;其是一个 &lt;code&gt;单向&lt;/code&gt; 的概念，以为着一对通信的双方的单向行为需要单独的SA进行定义 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;其中每一个SA由三个参数进行标识： &lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;Security Parameters Index (SPI): 方便使用的系统来标识SA &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;IP Destination Address: 之前我们提到的“单向”就体现在此，通过destination address来进行标识 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Security Protocol Identifier: 标识选择AH还是ESP &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;所有SA的定义都会放在一个指定的Security Association Database中 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AH &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ESP &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keys &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Key lifetimes &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lifetime of security association &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protocol mode (tunnel or transport) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_16-27-03_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;security-policy-database--spd&#34;&gt;Security policy database (SPD)&lt;/h3&gt;
&lt;p&gt;SPD主要定义了那些IP traffic将与那些SA进行配合使用（或者不使用），通常来说使用entry来进行记录： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a subset of IP traffic : an SA for that traffic &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在复杂的环境中，也可以是多个的entries对应一个SA或者是多个SA需要应用在一个SPD entry上 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_16-29-21_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;ip-traffic-processing&#34;&gt;IP traffic processing&lt;/h3&gt;
&lt;p&gt;IPsec是一个包一个包的执行过来的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个出站的IP packet在发出去之前都需要用IPsec进行处理 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;每一个入站的包在收到之后都需要被IPsec进行处理，然后才能传达的更高层进行下一步处理(TCP/UDP) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;outbound-packets&#34;&gt;Outbound packets&lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_16-35-42_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;收到一个outbound packet之后，IPsec会从SPD中匹配entries &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果没有匹配上，那么就会直接被丢弃并产生错误信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果匹配上了，那么就会决定packet的去处，可能是“丢弃”，也可能直接绕过IPsec（就是我们之前说的没有SA） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果policy是PROTECT的话，就去SAD中寻找匹配的entry，如果没有找到的话， &lt;code&gt;IKE&lt;/code&gt; 就会被调用来创造一个新的SA以及合适的密钥 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果SAD中又匹配的entry，那么就会按照SA进行处理，最终发送出去 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;inbound-packets&#34;&gt;Inbound Packets&lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_16-40-39_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IPsec首先查看IP packet的header来决定着是一个不安全的IP packet还是已经有IPsec保护的（ESP or AH headers） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果IP packet是不安全的，那么IPsec就会从SPD中寻找匹配的entry，如果第一个匹配到的policy是BYPASS，那么就直接发到TCP/UDP去处理了，如果是其他的，例如PROTECT or DISCARD或者没有匹配到，通通都丢弃，因为是不安全的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果是安全的IPSec包，那么就直接去SAD中找对应的entries以及SA，接着如果匹配到了，那就执行对应的操作(AH/ESP)，没有匹配到的话就直接丢弃 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;authentication-header--ah&#34;&gt;Authentication Header (AH)&lt;/h3&gt;
&lt;p&gt;这一章中，我们具体来看一下AH的组成结构 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
AH作为一个额外的header，其夹在IP &amp;amp; TCP header之间，提供足够的信息来识别SA，其只提供 Integrity 的保障 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Security Parameters Index (SPI): 方便使用的系统来标识SA &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;IP Destination Address: 之前我们提到的“单向”就体现在此，通过destination address来进行标识 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Security Protocol Identifier: 标识选择AH还是ESP &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Sequence number field会从1开始不断增加， &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;anti-relay-service&#34;&gt;Anti-relay service&lt;/h4&gt;
&lt;p&gt;relay attack就是攻击者通过重复使用可以通过认证的数据包来进行绕过 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;假设我们使用这样一个SA &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_16-27-03_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;发送者： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将sequence number计数器设置为0 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;每一个packet的sequence number进行递增 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果达到上限（2^32 - 1）,就结束当前这个SA，并重新开启一个SA和新的密钥进行加密 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接收者，设置一个 window size W (default = 64) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果接收到一个数据包的sequence number落到window size中，并且 Integrity 检查也没有问题，就标记为valid &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果接收到一个数据包落在窗口右边（未来窗口的数据包），同时Integrity 检查也没有问题，标记为valid，同时窗口向右滑动 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果接收到的数据包落在窗口左边（以前的数据包）或者认证失败，那么packet会被丢弃，同时记录该事件 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过sequence number就可以有效判断数据包是否是以前的被攻击者用在现在的数据流上 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;ah-modes&#34;&gt;AH modes&lt;/h4&gt;
&lt;p&gt;原始的TCP segment &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_17-47-21_screenshot.png&#34; width=&#34;300px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Transport mode&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;AH插入在IP header与TCP header之间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MAC (Message Authentication Code)会对整一个包进行认证 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供端对端的IPsec系统保护 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_17-46-59_screenshot.png&#34; width=&#34;300px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tunnel mode&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整个原始数据包都会被进行验证，会有一个新的 &lt;code&gt;outer IP header&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;inner(original) IP header中携带最终的 source/destination address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;new outer header 同样也会收到保护，但是包含的是例如firewall/security gateway的地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_17-47-12_screenshot.png&#34; width=&#34;300px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;encapsulating-security-payload--esp&#34;&gt;Encapsulating Security Payload (ESP)&lt;/h3&gt;
&lt;p&gt;ESP可以提供confidentiality, data origin authentication, connectionless integrity, an anti-replay service, and traffic flow confidentiality. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_21-04-43_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;ESP header 指定了加密的算法以及authentication策略 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;esp-mode&#34;&gt;ESP mode&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Transport Mode ESP&lt;/p&gt;
&lt;p&gt;Transport Mode ESP 一般端对端的安全通信上，可以对IP数据包进行加密和认证。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_21-09-38_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于IPv4数据包，IPsec一旦介入： &lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;ESP header会插入IP header和TCP header之间 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时ESP trailer (including Padding, Pad length, and Next Header fields) 将会被添加在IP packet的最后 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果添加了认证的选项，那么在最后还会加上 &lt;code&gt;ESP Authentication Data&lt;/code&gt;, 这时对前面所有内容的加密 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里补充一下Padding的作用，主要是当加密算法需要规定数量的bytes的时候，由于原来的内容不够bytes数，就需要添加一些内容来凑齐，这些就会放在ESP trailer里面 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于IPv6的数据包： &lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;在IPv6中，ESP会被当作是端对端的payload，因此无法被主动的路由，因此就需要附带上具体的路由在header上面 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;hop-by-hop路由会被添加在Original IP header与ESP header之间 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_21-08-59_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_21-35-41_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;总的来说Transport mode的操作主要是： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传输的数据再加上ESP trailer中padding的数据和整一个Transport-layers segment (e.g., TCP segment)一起被加密并将原本的明文data换成是经过加密的数据。是否开启认证可以自由选择 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;数据包被路由到destination，所有经过的路由器都会处理IP header中的内容，但是不需要也不能处理加密的密文 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;destination node根据ESP header中的SPI选择SA来解密，并恢复原本的Transport-layers segment (e.g., TCP segment). &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Transport mode的好处在于提供了统一的confidentiality，而不需要每一个application还需要实现自己的加密. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;但是有一个缺点就是，路上的路由器还是可以对流量进行分析，这点无法阻止。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tunnel mode ESP&lt;/p&gt;
&lt;p&gt;如下图就是Tunnel mode的一个使用场景，每个公司的内网通过tunnel mode 建立的VPN进行互相的通信，而完成不和Internet的路由上的任何其他主机或者设备进行交互。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_21-09-51_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么为了避免沿路的路由器对通信进行流量分析，Tunnel mode ESP将会加密整一个IP packet，然后将 &lt;code&gt;ESP header&lt;/code&gt; 加在 &lt;code&gt;Original IP header&lt;/code&gt; 前面 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;由于Original IP header中包含目标地址以及routing的信息，因此一旦全部被加密之后，途径的路由器就无法处理这些数据包。因此就需要一个新的IP header，其中包含必要的信息，但是不能被进行流量分析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同时，为了保护内网的主机，ESP会提供内网的边界设备，例如firewall or security gateway &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_21-09-20_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们来看一个具体的例子，看看一个外网的主机是如何通过Tunnel mode ESP来与内网主机进行通信的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;构建一个安全的 &lt;code&gt;outer IP packet&lt;/code&gt;: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先构造一个original IP packet其中包含了内网用户的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后添加一个 &lt;code&gt;ESP header&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;接着加上 &lt;code&gt;ESP trailer&lt;/code&gt; 来padding上合适的信息用于加密算法，接着将原本的data以及 &lt;code&gt;ESP trailer&lt;/code&gt; 加密，并在末尾添加上认证的信息  ESP authentication &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;最后再最前面加上一个新的 &lt;code&gt;new IP header&lt;/code&gt; （如果是IPv6的话还要加上 &lt;code&gt;hop-by-hop options&lt;/code&gt; ） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接着这个 &lt;code&gt;outer packet&lt;/code&gt; 将会被路由到目标的防火墙，途径的路由器只能处理最外面的新的IP header以及扩展的headers，但是无法处理中间加密的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Destination firewall也会先处理外部的几个headers，之后便会根据 ESP header中的 &lt;code&gt;SPI&lt;/code&gt; 信息查找对应的SA来进行解密，最终在内网中进行路由，传递到指定的主机上 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_21-36-13_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;combining-security-associations&#34;&gt;Combining security associations&lt;/h3&gt;
&lt;p&gt;一般来说，一个SA只会实现AH or ESP其中一个protocol,无法都实现，但是我们之前提到过有一种用法是一个数据流对应很对个SAs来组成IPsec services, 这种很多SAs一起使用的就叫做 &lt;code&gt;security association bundle refers&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;一般来说，综合的使用方法有两种： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Transport adjacency &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;将多种安全协议运用在用一种IP packet上而不挑用隧道 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iterated tunneling: &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;将多层的安全协议运用在IP tunneling上 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;case-study&#34;&gt;Case study&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Case 1&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_21-39-02_screenshot.png&#34; width=&#34;400px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;端对端的安全（通过交换密钥） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;一般为内网的主机访问外网的服务器提供保护 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可能的组合 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AH in transport mode &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ESP in transport mode &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ESP followed by AH in transport model (an ESP SA inside an AH SA) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Any of the above inside an AH or ESP in tunnel mode &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Case 2&lt;/p&gt;
&lt;p&gt;只提供gateway (routers, firewall, etc.)之间的安全通信，主机不需要实现IPSec，因此在security gateway之后的网络中不提供任何保护 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;VPN就是其中一种应用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同时采用IP tunneling，可以用以下方式实现： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AH &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ESP &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ESP加上authentication选项（AH是没有的） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_22-54-09_screenshot.png&#34; width=&#34;400px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Case 3&lt;/p&gt;
&lt;p&gt;Case3可以被看作是Case 1 加上Case2，即在Case2的IP tunneling所提供的 security gateways之间的保护的基础上，又加上了case1中的点对点的保护措施，通过提供端对端的SAs组合来实现内网中的保护 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_22-53-34_screenshot.png&#34; width=&#34;400px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Case 4&lt;/p&gt;
&lt;p&gt;使用场景一般是外网的主机需要访问在security gateway中所保护的内网中的主机 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程主机会与security gateway之间建立 IP tunneling &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时security gateway也会与内网的主机建立SAs的保护 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_22-54-21_screenshot.png&#34; width=&#34;400px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>NSE Week 7: Intrusion detection and prevention</title>
        <link>https://ginkgo.org.cn/posts/nse_week_7_intrusion_detection_and_prevention/</link>
        <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_7_intrusion_detection_and_prevention/</guid>
        <description>&lt;h2 id=&#34;nse-week-7-intrusion-detection-and-prevention&#34;&gt;NSE Week 7: Intrusion detection and prevention&lt;/h2&gt;
&lt;h3 id=&#34;idps&#34;&gt;IDPS&lt;/h3&gt;
&lt;h4 id=&#34;idps-vs-firewall&#34;&gt;IDPS vs firewall&lt;/h4&gt;
&lt;p&gt;Why we need Intrusion detection since we already have firewalls? &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IDS的主要目的是检测并报告任何网络中的入侵尝试 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IDS是建立在firewall之后的，还记得我们之前在firewall中提到的三层内网保护机制吗，IDS就作为街道巡逻来识别可疑的入侵者 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Firewall主要是将外敌抵御在城墙之外，而IDS就负责抓住潜伏进来的内鬼 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_20-58-30_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;three-classes-of-intruders&#34;&gt;Three classes of intruders&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;Masquerader 伪装者&lt;/dt&gt;
&lt;dd&gt;Masquerader是一个外部人员，没有任何权限来使用计算机，但是却通过外部手段进行渗透，操控了合法用户的账户，可以被看作是一个outsider &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Misfeasor 渎职者&lt;/dt&gt;
&lt;dd&gt;Misfeasor是一个合法的用户，但是却做了超出其权限活着规定的事情，可以被看作是一个insider &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Clanderstine user 秘密用户&lt;/dt&gt;
&lt;dd&gt;Clanderstine user通过获取获取系统的高级权限，进而破坏系统的防御措施，可以是insider活着outsider &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;idps-definitions&#34;&gt;IDPS Definitions&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;Intrusion&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;未经授权的对于计算机资源的访问 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Intrusion detection&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;检测对于系统活着网络未经授权的访问 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Intrusion detection system (IDS)&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;就像是网络中的杀毒软件 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组成：sensors, alerts; 检测如前以及报告检测到的如前 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Intrusion prevention system (IPS)&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;IPS 就是一个IDS并且自动对检测到的入侵做出反馈的系统： &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;关闭入侵者的网络连接 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;尝试反溯源入侵者 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;对抗攻击 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;IDS与IPS配合使用，一般来说IDS在IPS的后面辅助其更好的加强安全 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;approaches-to-intrusion-detection&#34;&gt;Approaches to intrusion detection&lt;/h4&gt;
&lt;p&gt;那我们具体应该如何识别一次入侵呢？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最基础的方法就是密切监控所有合法用户的行为，一旦出现异常的行为，就很有可能是一次入侵 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是入侵行为却和普通的行为有很大的重叠 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_21-12-17_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;因此检测很有可能会出现问题，我们用machine learning中曾经用过的概念来解释入侵检测 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;前提：在这里，一次positive就表示，IDS识别了一次intrusion &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;False positive 就是表示一个授权的用户的正常行为被错误的认为是了入侵，检测条件较为宽松的IDS更容易检测到更多的入侵，但同时也会遭致很多的false alarms, completeness &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;False negative 就表示一次入侵没有被识别为入侵，检测条件如果较为单一，那么相对而言检测到的入侵会更加准确，但是却会遗漏很多的入侵，soundness &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reputation detection:&lt;/strong&gt; -   观察主机是否与曾经行为不良的用户进行通信 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Anomaly-based detection:&lt;/strong&gt; -   首先定义系统内正常的行为，然后检测那些不正常的行为，一般使用机器学习来进行训练和识别 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Misuse-based detection:&lt;/strong&gt; -   预先定义不良的行为作为模版，然后用这些模版进行匹配检测 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reputation-based&#34;&gt;Reputation based&lt;/h4&gt;
&lt;p&gt;主要目的是为了观察主机是否与曾经行为不良的用户进行通信 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么如何来判断这些不良的用户呢？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;一半了是基于OSINT，开源的情报以及一些私有的黑名单来进行筛选识别 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Malware Domain List (MDL) &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Google Safe Browsing &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spamhaus Block Lists &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;PhishTank &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;misuse-based&#34;&gt;Misuse based&lt;/h4&gt;
&lt;p&gt;预先定义不良的行为作为模版，然后用这些模版进行匹配检测 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也被称为 signature detection,通过识别几个特定的signature来进行匹配检测 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;依赖于恶意行为模型models of malicious behaviour &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同样使用开源情报：Indicators of Compromise (IoC) &amp;amp; Indicators of Attacks (IoA) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;IoC/IoA/signature 就如同firewall中的blacklist一样，用来匹配那些恶意行为 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Indicators of Compromise (IoCs)&lt;/p&gt;
&lt;p&gt;IoC一般是作为取证数据，从日志或者文件中提取出来的恶意行为特诊 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以被分为host-based或者是network-based &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;甚至可以是很复杂的shellcode &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;IoC主要关注点在已经发生过的入侵，从日志，文件等信息中来识别 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_21-31-06_screenshot.png&#34; width=&#34;400px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Indicators of Attacks (IoAs)
: -   IoAs就关注于正在发生的入侵 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Misuse-based detection: pros and cons&lt;/p&gt;
&lt;p&gt;Misuse-based detection的例子： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;(traffic source.ip = destination.ip) and (source.port=destination.port) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这就是一个很典型的异常行为的匹配与判断 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Advantages
: 1.  较少的false alarms &lt;!-- raw HTML omitted --&gt;
2.  每次的alerts都会有对应的解释（匹配了什么模型） &lt;!-- raw HTML omitted --&gt;
3.  速度很快 &lt;!-- raw HTML omitted --&gt;
4.  不惧怕evasion，因为是预先设定好的，不会更改 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Disadvantage
: -   只能检测已知的攻击（APT，zero-day就束手无策了） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; -   需要不断更新换代 &amp;lt;br/&amp;gt;

 -   对于over-stimulation attacks来说是错误的 &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;anomaly-based&#34;&gt;Anomaly based&lt;/h4&gt;
&lt;p&gt;首先定义系统内正常的行为，然后检测那些不正常的行为，一般使用机器学习来进行训练和识别 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要先收集一段时间的数据来定义正常的行为 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后将统计测试的结果应用到检测用户的行为来判断是否合法 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;阈（yù）值检测 Threshold detection：对各种时间的发生频率进行定义，查看是否出现异常 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;基于账户 Profile based：为不同用户的行为进行记录统计，来观察每个用户行为的变化 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;侧重于过去的行为，然后检测重大的变化 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以被认为是白名单检测，默认不信任所有的行为 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Statistical test&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mean and standard deviation 平均值和标准差 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;通过一段时间的数据来进行计算 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;可以运用到很多参数上 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;不适合单独在IDs上使用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multivariate calculation &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;用来决定几个变量之前的关系（例如处理时间，数据占用，登录频率等） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;通过对于变量关系的分析可以更好的进行分类 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Markov process &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Estimates transition probabilities among various states &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Efficient in describing protocol run &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time series model &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;根据时间次序进行计算 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;可以用来检测一些活动进行的太快或者太慢 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pros and Cons&lt;/p&gt;
&lt;p&gt;Advantages
: 1.  可以检测那些从来没遇到过的攻击 &lt;!-- raw HTML omitted --&gt;
2.  不需要主动去更新 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Disadvantage
: 1.  很难进行配置以及需脸 &lt;!-- raw HTML omitted --&gt;
2.  定义异常的行为为恶意的有时候也不完全准确 &lt;!-- raw HTML omitted --&gt;
3.  会产生很多的 false alarms &lt;!-- raw HTML omitted --&gt;
4.  消耗大量的资源 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;other-ids-classification&#34;&gt;Other IDS classification&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;根据时间Timeliness: &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Real-time（实时在线运行） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Non real-time (离线模式，定期进行) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;反应措施 Response type: &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Passive (被动的，只有检测到了才会发出警告) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Active (主动封锁恶意的流量) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;State-dependency &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Stateful analysis（结合上下文的） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Stateless analysis &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System type: &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;软件 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;硬件 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Topology 拓扑范围类型 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Host IDS (HIDS) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Network IDS (NIDS) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Distributed IDS (DIDS) &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;观察和检测整一个网络利用多种检测模式 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;hids-nids-dids&#34;&gt;HIDS/NIDS/DIDS&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Host IDS (HIDS)&lt;/p&gt;
&lt;p&gt;专注于本机的数据 &lt;!-- raw HTML omitted --&gt;
NIC网卡需要处于non-promiscuous mode,即不会接受与自己无关的数据包，进而缩小检测范围 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;检测的范围: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logs 日志 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;System calls 系统指令 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Host activities 用户行为 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只关注本地服务 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Network IDS (NIDS)&lt;/p&gt;
&lt;p&gt;专注于网络内的所有主机 &lt;!-- raw HTML omitted --&gt;
NIC开放promiscuous mode，接受所有的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通常会部署在： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;choke points（firewall） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;DMZ &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Internal network &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Traditional deployment
: -   IDS设备连接在trunk points (e.g., firewall)上，来检测所有的网络流量，检测攻击，但没有防御手段 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_22-09-14_screenshot.png&#34; width=&#34;300px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Inline deployment
:&lt;/p&gt;
&lt;p&gt;IDS设备直接与设备相连接，可以进行检测和防御，例如IPS &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_22-09-34_screenshot.png&#34; width=&#34;300px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Distributed IDS (DIDS)&lt;/p&gt;
&lt;p&gt;利用多个sensors（HIDS，NIDS）来收集数据，然后再汇总到中心的管理器上 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;管理员综合分析所有的事件来进行分析判断 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;会部署在专用的外部网络上，例如VPN &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们在CFC中就曾经遇见过类似的内容 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Security Information and Event Management就可以统一收集并管理所有的数据 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Host会在后台运行监控系统，然后将收集到的数据发送到中央的管理服务器上（外部网络，VPN） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;中央的管理服务器收集所有的事件报告（从内网中），然后综合分析来入侵检测分析 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_22-15-14_screenshot.png&#34; width=&#34;500px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IDS是如何工作的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Input information 信息输入 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application-specific information 应用数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Host-specific information: 本地日志，系统文件变化，系统命令调用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Network specific information: 数据流量 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intrusion detection policies &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Known bad: blacklist 预定义的攻击模型 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Reputation-based detection &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Signature-based/rule-based/misuse-based detection &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Known good: 报告任何异常情况 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Anomaly-based detection &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;入侵报告 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;passive response (检测报告) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;active response (主动封锁连接) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Alert data: IDS alerts &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Log data: complete host logs &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Statistical data: network stats &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Session data: 5-tuple flows &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Packet string data: e.g., HTTP headers &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Full packet capture: PCAP files &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Packet capture: tcpdump, wireshark &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Session data: netflow, IPFIX (Internet Protocol Flow Information Export) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Session string: URLsnarf &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Logs: syslog &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;measuring-performance&#34;&gt;Measuring performance&lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_22-22-33_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;True positive: 检测到的入侵是真的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;False positive: 检测到的入侵是假的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;True negative: 检测到的合法行为是真的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;False negative: 检测到的合法行为是假的，其实是入侵 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sensitivity (True positive rate, probability of detection): measures the proportion of positives that are correctly identified &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Specificity (True negative rate): measures the proportion of negatives that are correctly identified &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Sensitivity = True positive rate = Precision = TP / (TP + FP) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it reflects the machine learning algorithm’s performance on “How many times you are right?”, TP + FP indicates the total sample are labeled by ML as malware (positive) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Recall = TP / (TP + FN), it reflects “How many malware found by you”, TP + FN means all the actual malware within the dataset &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specificity = True negative rate = TN / (TN + FP) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;base-rate-fallacy-基率谬误&#34;&gt;Base-rate fallacy 基率谬误&lt;/h4&gt;
&lt;p&gt;指的是人们在考虑事件的概率的时候往往没有考虑全部的信息，而是选择那些个性化的信息而草率的出结论，以偏概全 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;A &amp;amp; B 是不同的事件 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;P(A|B) 是一个条件概率，顾名思义，是在一定条件下，某一些时间发生的概率：当B发生的情况下，A发生的概率 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;P(B|A) 是一个条件概率：当A发生的情况下，B发生的概率 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;P(A) &amp;amp; P(B) 是A &amp;amp; B单独各自发生的概率 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bayes&amp;rsquo; theorem &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_11-45-35_screenshot.png&#34; width=&#34;300px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;根据贝叶斯定理，P(A|B) * P(B) = P(B|A) * P(A)就是A与B同时发生的概率 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可以有效的综合多个概率，从而得出一个更为可靠的综合概率 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们假设： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I 为入侵行为 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;¬I 为非入侵行为 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A 为出现入侵警告事件 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;¬A 没有出现入侵警告事件 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;True positive rate or detection rate: P(A|I)，在入侵确实发生的情况下，发出警告的概率 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;False positive rate of false alarm rate: P(A|¬I)，在没有发生入侵的情况下，发出警告的概率 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;False negative rate: P(¬A|I) = 1 - P(A|I)，在入侵确实发生的情况下，没有发出警告的概率 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;True negative rate: P(¬A|¬I) = 1 - P(A|¬I)，在没有发生入侵的情况下，没有发出警告的概率 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P(I|A): 在发出入侵警告事件的情况下，真的有入侵事件的概率 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P(¬I|¬A): 在没有入侵警告事件的情况下，确实没有入侵的概率 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-29_11-59-40_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们假设一个网络管理员在过去的一年中，在每10,000个活动中能检测到1个真实的入侵，继续利用上面的事件，也就是： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(I) = 1/10000 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时这位网络管理对自己的工作十分骄傲，因为他从所有入侵中亲自发现了被检测系统遗漏的5%的入侵，也就是： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(¬A|I) = 5% &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但管理又对检测系统非常的不满，因为其不仅会遗漏入侵，还有3%的入侵警报事件是误报，也就是 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(A|¬I) = 3% &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我们要计算一个警告真的是入侵的概率，也就是P(I|A)，就可以套用上面的公式 &lt;!-- raw HTML omitted --&gt;
P(I|A) = P(I) * P(A|I) / P(I) * P(A|I) +  P(¬I) * P(A|¬I)= ((0.0001 * 0.95) / ((0.0001 * 0.95)+(0.9999*0.03)) = 0.00315 &amp;ndash;&amp;gt; 0.32% &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;honeypots&#34;&gt;Honeypots&lt;/h3&gt;
&lt;h4 id=&#34;honeypots-as-a-deception-technique&#34;&gt;Honeypots as a deception technique&lt;/h4&gt;
&lt;p&gt;Why we need honeypots, since we already have firewalls and IDPS? &lt;!-- raw HTML omitted --&gt;
Firewall和IDPS更多的是拦截和阻断攻击者的攻击，但是如果我们想更多的了解attacker，从而提前掌握潜在的威胁，那么我们就需要用到Honeypots，蜜罐，用来引诱攻击者暴露更多的信息： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Honeypot 蜜罐&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;是一个陷阱其实放置了检测以及反制手段来获取那些未经许可的访问的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时也作为诱饵，使攻击者原理重要的系统 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;学习未知的攻击 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;学习入侵者的行动模式 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;从而更好的预测和抵抗未来的攻击 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;蜜罐没有实际的生产价值，其知识为了防范入侵 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;里面充斥着一些伪装的信息，来引诱攻击者进行入侵 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;因此合法的用户不会与其通信，那么所有的通信只会是扫描，入侵或者给农机 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;进而我们可以收集攻击者的活动 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;并部署一些看起来有价值的信息来诱导攻击者长时间的驻留的系统内，以便我们更好的手机信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;尽量要让攻击者成功入侵，这样才能使他们驻留，并留下痕迹 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时也不能太容易入侵，最好能让攻击者感到有挑战性 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;honeypots-deployment-and-classifications&#34;&gt;Honeypots deployment and classifications&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deployment&lt;/p&gt;
&lt;p&gt;蜜罐一般会被部署在DMZ上，当然也可以在边界路由器之外（指外网），或者内网也可以。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;进而部署虚拟的环境，同时营造出尽可能真实的系统环境，通过深度的监控来手机攻击者的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Classification&lt;/p&gt;
&lt;p&gt;根据目的
: -   Production honeypots 蜜罐产品 &lt;!-- raw HTML omitted --&gt;
-   为企业的网络环境提供蜜罐产品 &lt;!-- raw HTML omitted --&gt;
-   更容易部署和使用 &lt;!-- raw HTML omitted --&gt;
-   在易用和信息收集量之间做取舍 &lt;!-- raw HTML omitted --&gt;
-   Research honeypots 研究型蜜罐 &lt;!-- raw HTML omitted --&gt;
-   提供更全面的攻击信息 &lt;!-- raw HTML omitted --&gt;
-   更难部署，因为考虑到没有那么专业的开发力量来优化 &lt;!-- raw HTML omitted --&gt;
-   通过更加全面地研究攻击，进而找到更好的解决方法 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;根据互动的程度
: -   提供较少互动的蜜罐 &lt;!-- raw HTML omitted --&gt;
-   只模拟运行一小组服务和应用 &lt;!-- raw HTML omitted --&gt;
-   不能被获取所有权限 &lt;!-- raw HTML omitted --&gt;
-   攻击者的互动被限制 &lt;!-- raw HTML omitted --&gt;
-   通常是用在产品型蜜罐上 &lt;!-- raw HTML omitted --&gt;
-   优点：风险低，容易部署 &lt;!-- raw HTML omitted --&gt;
-   缺点：收集到的信息较少，因为互动少 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; -   提供较多互动的蜜罐 &amp;lt;br/&amp;gt;
     -   使用真实的操作系统和应用 &amp;lt;br/&amp;gt;
     -   攻击者可以获得所有网络和系统的访问 &amp;lt;br/&amp;gt;
     -   通常用在研究型蜜罐上 &amp;lt;br/&amp;gt;
     -   优点：可以获取更多的信息 &amp;lt;br/&amp;gt;
     -   缺点：较高的风险，并且维护的成本更高 &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据实现的方法
: -   Physical honeypot 物理蜜罐 &lt;!-- raw HTML omitted --&gt;
-   网络上连接的真实设备 &lt;!-- raw HTML omitted --&gt;
-   Virtual honeypot 虚拟蜜罐 &lt;!-- raw HTML omitted --&gt;
-   模拟主机进行互动 &lt;!-- raw HTML omitted --&gt;
-   一个主机可以同时维护和运行多个虚拟蜜罐 &lt;!-- raw HTML omitted --&gt;
-   通常可以提供更多的互动，因为虚拟环境更为安全 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;根据互动的方向
: -   Server honeypots 服务器蜜罐，开启服务 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; -   Client honeypots 客户端蜜罐，连接服务器的服务 &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;honeypots-phases&#34;&gt;Honeypots phases&lt;/h4&gt;
&lt;p&gt;最好的方法： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;较高的堡垒化网络 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;每一个数据包都进行保存，便于分析学习 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Phases： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Data control &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Data capture, 捕捉attacker所产生的各种data &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Data analysis，分析这些data，学习攻击者的互动 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data control&lt;/p&gt;
&lt;p&gt;蜜罐通过与攻击者进行通信（via protocols）来诱导他们做出行动，留下踪迹 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bandwidth throttling 宽带限流 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;由ISP主动给网络服务降速，从而增加访问蜜罐消耗的时间成本，减少了对其他用户造成危害的时间 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data capture&lt;/p&gt;
&lt;p&gt;蜜罐将会监控被记录所有攻击者在蜜罐上所进行的活动，进而集中存储 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network activity &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Application activity &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;System activity &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data analysis&lt;/p&gt;
&lt;p&gt;蜜罐分析所有收集到的活动数据 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Human-driven analysis &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;tester或者researcher使用自动化工具来处理数据进行分析 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Machine-driven analysis &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;假设网络连接都是恶意的和异常的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;case-study-catch-the-ratter&#34;&gt;Case study: catch the ratter&lt;/h4&gt;
&lt;p&gt;RAT: remote administration tools &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过让攻击者利用RAT来获取全部虚拟机的权限来手机信息并研究他们的行为： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Capture audio from microphone &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Capture video from webcam &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Log keyboard input &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Browse files on machine &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;honeytokens&#34;&gt;Honeytokens&lt;/h4&gt;
&lt;p&gt;Honeytokens是一种蜜罐的形式，但是并不是计算机操作系统，但也许是一个： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不使用的邮箱地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;虚假的数据库 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些虚假的设备不再于使用，而在于被入侵和破坏 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;比如在数据库中有一条虚假的信息，没有任何实际的价值，在生产过程中也不会访问这条数据，但是一旦被访问了，就表示有入侵发生了。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这种方式更为简单易用，不需要部署复杂的蜜罐系统，也可以识别出攻击 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&amp;lt;2022-05-29 Sun 10:52&amp;gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>NSE Week 1: Module introduction, security concepts and security attacks</title>
        <link>https://ginkgo.org.cn/posts/nse_week_1_module_introduction_security_concepts_and_security_attacks/</link>
        <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_1_module_introduction_security_concepts_and_security_attacks/</guid>
        <description>&lt;h2 id=&#34;nse-week-1-module-introduction-security-concepts-and-security-attacks&#34;&gt;NSE Week 1: Module introduction, security concepts and security attacks&lt;/h2&gt;
&lt;h3 id=&#34;what-is-network-security&#34;&gt;What is Network Security?&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;Cyber security&lt;/dt&gt;
&lt;dd&gt;是关于个人和组织如何减少 cyber attack 的风险 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Network security&lt;/dt&gt;
&lt;dd&gt;是关于个人和组织如何减少网络攻击的风险 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Risk 风险 : &lt;!-- raw HTML omitted --&gt;
是关于漏洞利用从而对财产造成损失的可能性 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;security-concepts&#34;&gt;Security Concepts&lt;/h3&gt;
&lt;p&gt;首先我们再来回顾一下Cyber security中，最重要的CIA的概念 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Confidentiality&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;确保保密的信息不暴露给未经授权的人员 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Loss of confidentiality = unauthorised disclosure of information &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Integrity&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确保信息和程序只会被授权的人员所修改与处理 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loss of integrity = the unauthorised modification or destruction of information &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Availability&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确保系统正常运行并且不会拒绝授权的用户的访问 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loss of availability = the destruction of access to information/system and the destruction of use of information/system &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;CIA的重要性需要视情况而定，对于不同的资源/系统，我们需要指定不同的CIA的标准 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;more-properties-in-cyber-security&#34;&gt;More properties in Cyber security&lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-26_16-22-20_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Authentication&lt;/dt&gt;
&lt;dd&gt;确保每一个用户的真实身份都是他们所申明的一致 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Non-repudiation&lt;/dt&gt;
&lt;dd&gt;确保信息传输的双发不能否认他们接受或者发送过信息 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Code validation&lt;/dt&gt;
&lt;dd&gt;确保软硬件是健全的（sound），并且检查漏洞 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;osi-security-architecture&#34;&gt;OSI Security Architecture&lt;/h3&gt;
&lt;p&gt;接下来我们来介绍一下OSI的安全框架 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Security attack
: -   任何对组织的信息安全造成危害的行为都称为 security attack &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Passive or Active &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security mechanism
: -   一个用来从security attack中检测，防止和恢复的机制 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如流量检测，预防入侵 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security service
: -   一项用来保护组织中的数据处理系统的服务 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含多中Security mechanisms来对抗security attacks &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-26_16-30-51_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;philosophy-taken-to-counterattacking&#34;&gt;Philosophy taken to counterattacking&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Deter
: -   组织入侵的发生（在其发生之前进行组织），即使用 &lt;code&gt;fencing 围栏&lt;/code&gt;, &lt;code&gt;lighting 完全照明&lt;/code&gt;, &lt;code&gt;signs 出入签名&lt;/code&gt; 等方式对犯罪者进行被动威慑，从最开始就扼杀入侵的念头 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使攻击变得困难，让attacker主动放弃 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detect
: -   检测入侵的行为，例如 &lt;code&gt;CCTV 监控&lt;/code&gt;, 用来监控和记录所有的入侵行为 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intrusion detection software &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Traffic analysis and machine learning to detect abnormities &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deny
: -   拒绝未经授权的访问，通过一些认证系统来主动拒绝入侵的行为，其中防火墙就属于 &lt;code&gt;Deny&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authentication, authorisation, freshness &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay
: -   延缓入侵的速度，通过设置障碍来延长入侵的时间，迫使入侵者放弃或者给予安全团队更多的时间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加密钥的长度 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defend
: -   主动地对入侵者进行打击，通过安全团队或者警方的行动来组织入侵 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;security-mechanisms&#34;&gt;Security Mechanisms&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;Specific security mechanisms&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;May be incorporated into the appropriate protocol layer &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Provide some of the OSI security service: authentication, access control, data confidentiality, data integrity, and non-repudiation &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Very much related to popular security properties &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Non-specific security mechanisms&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;Not specific to any particular OSI security service or protocol layer &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;cryptographic-techniques&#34;&gt;Cryptographic Techniques&lt;/h3&gt;
&lt;p&gt;密码学提供了很多安全服务，例如加密，解密，数据完整性，认证交换，密码存储等服务 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;encipherment&#34;&gt;Encipherment&lt;/h4&gt;
&lt;p&gt;加密通过将明文进行加密，从而来保证confidentiality &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Two crytovariables in cryptographic funtions &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The key 密钥 (can be both symmetric or asymmetric) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;The initial vector (我们在密码学中讲过的随机数，用来参与加密的过程，比如在DES CBC中) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cryptographic-protocols&#34;&gt;Cryptographic Protocols&lt;/h4&gt;
&lt;p&gt;是通信的双方通过加密传递的信息来预防攻击 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Possible attacks?&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;Cyptoanalysis: recover the plaintext from ciphertext without knowing the key &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Message/field insertion, deleteion and change (破坏完整性) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Relay: 对先前合法的密文重复利用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Man-in-the-middle attack &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Countermeasure&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Countermeasures for cryptoanalysis &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Longer keys (e.g., 2048 bits for RSA, used to be 256 bits) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;舍弃弱密钥（比如全是0的或者全是1的） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Countermeasures for message/field insertion, deletion and change &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integrity check (hash, MAC, digital signature) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Countermeasures for replay attack &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provide freshness in protocol run &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Timestamp, sequence number, nounce &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Countermeasure for man-in-the-middle attack &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Cryptographic protocols&lt;/code&gt; should be designed and verified &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use formal methods to &lt;code&gt;evaluate&lt;/code&gt; security properties of cryptographic protocols &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;digital-signature&#34;&gt;Digital Signature&lt;/h4&gt;
&lt;p&gt;主要通过将额外的bit附加在传输的数据上，从而让接收者可以验证数据的 Integrity &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可以用来提供authentication, integrity, and non-repudiation,因为数字签名利用asymmetric非对称加密，使用发送方的private key进行加密，接收者则可以用public key来进行解密 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;authentication-exchange&#34;&gt;Authentication Exchange&lt;/h4&gt;
&lt;p&gt;用于发送方和接收方双方互相确认身份 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;常见的Authentication的方法： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Something you know, e.g., password &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Something you are, e.g., fingerprint &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Something you have, e.g., smart card, your phone &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;2-factor or multifactor authentication 双重/多重认证 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何选择身份认证的方法？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果通信的双方彼此可以信任，同时通信是可靠的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用密码 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何通信的双方是可以信任的，但是通信不可靠 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用密码以及加密协议 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何什么都不可以信任 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用密码，加密协议以及non-repudiation service &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们真的需要密码吗？&lt;/p&gt;
&lt;p&gt;剑桥大学发明了一种可携带的设备：&lt;a class=&#34;link&#34; href=&#34;http://mypico.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pico&lt;/a&gt;,其存储了所有的credentials信息，并且通过一系列传感器，以及生物特征信息来防止丢失后的信息泄露。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;other-security-mechanisms--x-dot-800&#34;&gt;Other Security mechanisms (X.800)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Access control &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;只允许有限的可授权人员的访问 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Traffic padding &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;在数据流中加入一些bits，使流量分析受阻，从而保证了confidentiality保密性 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Notarisation 公证 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;经过第三方来保证安全的信息传输 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security audit trail &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;收集信息来进行安全审计 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security recovery 数据恢复 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Economics &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;增加attack的成本，比如如果发邮件需要花钱，那垃圾邮件势必会减少 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;又或者在Bitcoin当中，发起DDoS攻击就以花费大量的transaction fee &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deception &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;通过暴露攻击者自己，例如使用蜜罐来获取攻击者的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;jamming-sniffing-and-spoofing&#34;&gt;Jamming, Sniffing and Spoofing&lt;/h3&gt;
&lt;h4 id=&#34;jamming&#34;&gt;Jamming&lt;/h4&gt;
&lt;p&gt;Jamming通过发出大量的noise来影响原本的通信，影响availability &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;例如屏蔽Wifi信号 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;也可以用在合法的渠道上，比如用在考场或者需要阻断网络的地方 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;sniffing&#34;&gt;Sniffing&lt;/h4&gt;
&lt;p&gt;Sniffing是来监听其他用户的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Network interface card (NIC 网卡)必须设置在 &lt;code&gt;promiscuous mode&lt;/code&gt; 来获取所有的包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可以用来 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;偷听数据包中没有加密的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;捕捉信息进而使用relay attack &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spoofing&#34;&gt;Spoofing&lt;/h4&gt;
&lt;p&gt;通过伪装来进行攻击，可以修改的内容 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application layer: DNS address, e.g., an URL, an email address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Network layer: IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Link layer: MAC address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spoofing的种类 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Email spoofing: phising &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Text message spoofing: smishing &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Call ID spoofing &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;URL spoofing: phishing website &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;DNS spoofing: cache poisoning &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;IP address spoofing: change the source address in an IP packet &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;MAC spoofing: change the MAC address of NIC &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;model-of-network-security&#34;&gt;Model of Network Security&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_10-39-28_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;cryptographic-protocol&#34;&gt;Cryptographic protocol&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_10-52-17_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;A, B都有自己的symmetric key (K_A, K_B), 同时A想要生成一个共同的key并且分享给B &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A发送给K，用E_A加密的新key K_AB，同时指示这是A与B的共同Key &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;K返回给A 用E_B加密的共同Key K_AB以及标识这个Key是由ID_B加密的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;A将E_B(K_AB)以及加密的数据发送给B，B就可以用自己的E_B先解密，然后再用得到E_AB来解密数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_10-52-42_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Attacker通过拦截并修改A发送给K的请求，从而可以获取K_AB的值，进而可以监听所有的请求 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>NSE Week 2:  TCP/IP protocol architecture, sniffing and traffic analysis</title>
        <link>https://ginkgo.org.cn/posts/nse_week_2_tcp_ip_protocol_architecture_sniffing_and_traffic_analysis/</link>
        <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_2_tcp_ip_protocol_architecture_sniffing_and_traffic_analysis/</guid>
        <description>&lt;h2 id=&#34;nse-week-2-tcp-ip-protocol-architecture-sniffing-and-traffic-analysis&#34;&gt;NSE Week 2:  TCP/IP protocol architecture, sniffing and traffic analysis&lt;/h2&gt;
&lt;h3 id=&#34;tcp-ip-protocol-architecture&#34;&gt;TCP/IP protocol architecture&lt;/h3&gt;
&lt;h4 id=&#34;什么是网络协议&#34;&gt;什么是网络协议？&lt;/h4&gt;
&lt;p&gt;Protocol 就是一组相同通信层上的通信规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;主要的内容： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Syntax：通信信息的格式 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Semantics：如何控制信息以及错误 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Timing：传输以及数据交换的速度，以及次序 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-ip-模型&#34;&gt;TCP/IP 模型&lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-16-56_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;每一个协议都作为Alice &amp;amp; Bob在相同层上面的通信规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们用一个例子来简单概述一下每一层的作用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如Alice想要发一个快递给Bob，那么快递里的货物就是Application，是Bob需要使用的物品； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;那么Transport layer就是是否需要给快递上保险，TCP就是上保险，UDP就是不上保险，如果东西贵重，那么就要TCP，如果丢了也没关系就用UDP &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;接下来快递发出来了，快递单上面要写地址，地址就是IP地址也就是Internet layer的header的双方的IP地址，xx省xx市xx小区这些就是一个个网络，Internet layer就负责进行routing路由，来找到发往这些区域的路径 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Network access就是邮编，在中国没有很大的体现，但是在英国，每一幢楼都对应了一个邮编，且是全英唯一的，也就是网络层的MAC地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;最后Physical物理层就是用飞机，高铁，轮船等方式送货，也就对应了，光纤，双绞线这些传输方式 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接着我们用一个具体的HTTP通信的例子来描述一些细节 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;HTTP是一个应用层的协议，那么通信的双方都将是应用层，而实际传输到对方应用层的应用上，就需要层层封装信息，然后由路上的路由器，交换机进行拆包之后一步步传递。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-24-21_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-27-57_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;网关和路由器会根据IP header进行路由 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-28-33_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;sniffing&#34;&gt;Sniffing&lt;/h3&gt;
&lt;p&gt;Sniffing 嗅探，attacker通过监听网络中的流量来获取他们想要的信息，甚至做出修改。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;当然也可以用于网络的debug和诊断。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Network interface card (NIC 网卡)必须设置在 &lt;code&gt;promiscuous mode&lt;/code&gt; 来获取所有的包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可以用来 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;偷听数据包中没有加密的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;捕捉信息进而使用relay attack &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;promiscuous-mode&#34;&gt;Promiscuous mode&lt;/h4&gt;
&lt;p&gt;我们的网卡network interface card (NIC) 有两种模式： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Promiscuous 不加选择的模式:获取所有网络中的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Non-promiscuous：丢弃所有不经过自己的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要实现嗅探，就必须设置为 Promiscuous mode &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同时我们必须处于Hubs或者WiFi的网络条件下，因为这样才能收到因为广播而接受到的所有数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如交换机这种拥有单独的广播域的就不行，无法捕捉到信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;active-interception-port-mirroring&#34;&gt;Active Interception - port mirroring&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Port Mirroring&lt;/code&gt; 也被称作  &lt;code&gt;SPAN (Switch Port Analyser)&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过配置交换机，使其将一对port（或者整个VLAN）所交换的信息，拷贝一份传输到SPAN ports，进而加以分析利用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;好的用途：网络诊断，入侵检测分析 &lt;!-- raw HTML omitted --&gt;
恶意的用途：当攻击者可以通过物理连接这台交换机，他们就可以看到所有的传输流量 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;active-interception-network-tapping&#34;&gt;Active Interception: network tapping&lt;/h4&gt;
&lt;p&gt;Network tapping就是将原本直连的两台设备，连入TAP后，可以访问他们之间的通信，从而加以分析与利用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;TAP = Traffic Access Point or Test Access Point 是物理层的一个设备 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-44-56_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;原本的连接方式：直连 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-47-39_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;连在Network TAP上之后，就可以用Wireshark来进行监听了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-48-10_screenshot.png&#34; width=&#34;600px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其具体的原理就是通过RJ45线上的引脚进行连接，Pins1 &amp;amp; Pins2 用于转发数据;Pins3 &amp;amp; Pins6 用于接收数据 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-50-50_screenshot.png&#34; width=&#34;300px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TAP A 接口的Pins3 and Pins6 （接受数据）分别来与Host A &amp;amp; Host B 的Pins1 和 Pins2 (传输数据）相连接，使HostA传输给HostB的数据都由TAP A所接受 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HostA_pins1 -&amp;gt; TapA_pins3 -&amp;gt; HostB_pins1 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;HostA_pins2 -&amp;gt; TapA_pins6 -&amp;gt; HostB_pins2 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TAP B 接口的Pins3 and Pins6 （接受数据）分别来与Host A &amp;amp; Host B 的Pins3 和 Pins6（接收数据）相连接，使HostB传输给HostA的数据都由TAP B所接受 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HostA_pins3 -&amp;gt; TapB_pins3 -&amp;gt; HostB_pins3 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;HostA_pins6 -&amp;gt; TapB_pins6 -&amp;gt; HostB_pins6 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从而使TAP_A来接收所有发出的数据，TAP_B则会接收所有接收的数据，一切都会被捕捉 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-57-42_screenshot.png&#34; width=&#34;500px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;从而使所有AB之间的数据都可以被我们的分析软件所捕捉和利用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-00-55_screenshot.png&#34; width=&#34;500px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;不过也可以使用Bypass mode绕过模式来停止复制转发 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-02-58_screenshot.png&#34; width=&#34;500px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;vampire-taps&#34;&gt;Vampire taps&lt;/h4&gt;
&lt;p&gt;所谓的“顺着”网线，如下图所示，直接用RJ-45的线实现TAP,海底电缆也可以如此TAP &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-04-18_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;warxing&#34;&gt;WarXing&lt;/h4&gt;
&lt;p&gt;使用多种设备进行捕捉 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-06-27_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;rouge-access-point&#34;&gt;Rouge Access Point&lt;/h4&gt;
&lt;p&gt;Access point一般是用于创造WLAN供其他设备进行无线连接的设备，一般用于企业，因为其覆盖面积较广，与家用的无线路由器不同的是，其一般没有什么管理功能(e.g., Access control)，只是单纯为了连接 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么Route Access Point就是一个attacker创造的伪装成合法的WiFi来引诱用户连接，从而可以获取用户之间的通信。一般来说attacker会模仿WFi的SSID以及BSSID来进行伪造 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-13-07_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;traffic-analysis&#34;&gt;Traffic Analysis&lt;/h3&gt;
&lt;h4 id=&#34;data-acquisition&#34;&gt;Data Acquisition&lt;/h4&gt;
&lt;p&gt;经过Sniffing之后，我们收集了大量的数据，接下来我们就需要分析与理解这些数据: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Who is talking to whom about what? &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;libpcap-library-of-packet-capture&#34;&gt;Libpcap：Library of packet capture&lt;/h4&gt;
&lt;p&gt;Libpcap 就是用来分析获取数据的API &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;虽然名字中带有packet，实际上是用来capture frames，包括所有的数据链路层到应用层的数据 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Network sniffers可以分析捕捉的网络流量，并保存在 &lt;code&gt;.pcap&lt;/code&gt; 文件当中 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其核心是BPF： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;bpf-berkeley-packet-filter&#34;&gt;BPF, Berkeley packet filter&lt;/h4&gt;
&lt;p&gt;之前存在的问题：我们之前提到过，sniffer在网卡开启了 promiscuous mode之后，会捕获所有的包，但是其中充斥着大量的我们不想要的数据包，那么接下来进行分析的时候，我们就会花费大量的CPU资源在这些不想要的数据包上 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;BPF解决了这个效率问题，通过： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Buffer缓存指定的部分之前就进行过滤 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Filter可以由用户自定义 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;比之前的packet capture tool快了100倍 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BPF的实现&lt;/p&gt;
&lt;p&gt;主要由两个部分： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network tap 用来sniffer获取数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Packet filter 用来对数据包进行提前过滤，越早越好 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-58-29_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BPF filter model&lt;/p&gt;
&lt;p&gt;BPF的过滤器适用directed acyclic control flow graph &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-59-24_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过上图我们可以看到filter是如何通过各种用户自定义的条件来进行筛选，从而决定是buffer还是丢弃 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcpdump&#34;&gt;Tcpdump&lt;/h4&gt;
&lt;p&gt;大家耳熟能详的工具Tcpdump就是基于BPF来进行开发的，其提供了强大的功能来进行数据包分析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;wireshark&#34;&gt;Wireshark&lt;/h4&gt;
&lt;p&gt;Wireshark则提供了更加利于使用的GUI界面 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;traffic-analysis&#34;&gt;Traffic analysis&lt;/h4&gt;
&lt;p&gt;有三种traffic analysis的方法 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Protocol analysis: 分析数据包中的协议信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Packet analysis: 综合分析数据包中的多层协议 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Flow analysis: 分析一系列连贯的数据包：Flow &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Protocol analysis&lt;/p&gt;
&lt;p&gt;我们为什么要进行协议分析： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解数据是如何传输的，以及其中协议需要设置的参数是如何的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;解析其中的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Packet analysis 数据包分析&lt;/p&gt;
&lt;p&gt;我们为什么需要数据包分析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过一系列传输的数据包来观察协议 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;使用数据包以及过滤器来识别感兴趣的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据包分析需要做些什么？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于网络专家来说： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检测网络是否健康 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于安全专家来说： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被动的进行漏洞测试（被动地等着漏洞或者攻击出现） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于攻击者来说 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;被动的攻击工具 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;窃取信息（密码） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现上和之前说的一样，我们分析的实质上是Frame，其作为链路层的数据封装形式，包含了所有向上的header,能够更好的反应更多的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_23-11-14_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;用于分析的技术
: -   Pattern matching &lt;!-- raw HTML omitted --&gt;
-   通过匹配特定参数的值来分析检测特定的数据包，例如 if source IP address = foo &lt;!-- raw HTML omitted --&gt;
-   Parsing protocol fields &lt;!-- raw HTML omitted --&gt;
-   从不同layers的header中获取信息，例如Wireshark可以看到整一个IP header的信息 &lt;!-- raw HTML omitted --&gt;
-   Packet filtering &lt;!-- raw HTML omitted --&gt;
-   通过protocol来筛选想要分析的数据，比如只查看ICMP包的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flow analysis 流量分析&lt;/p&gt;
&lt;p&gt;流量分析顾名思义就是对于一组的数据包进行分析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;为什么我们要进行流量分析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;寻找特征流量（重复的通信） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;单独隔离可疑的活动并且丢弃不相关的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;分析更高层的协议，比如HTTP，SSL &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;从流量提取整体数据（比如提取出整一个传输的二进制文件） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Wireshark中我们可以选择HTTP/UDP/TCP Stream进行分析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_23-17-04_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其他流量分析技术 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;罗列通信以及流量 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以根据特征信息对数据流进行分类提取 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据流导出 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导出之后在未来用作他用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件以及数据挖掘 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从数据流分析中拼接挖掘出有用的文件以及信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List conversations and flows &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List all conversations and/or flows within a packet capture or only specific flows based on their characteristics &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Export a flow &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Isolate a flow or multiple flows, and store the flow(s) of interest to disk for further analysis &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File and data carving &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract files or other data of interest from the reassembled flow &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>NSE Week5: Firewalls</title>
        <link>https://ginkgo.org.cn/posts/nse_week5_firewalls/</link>
        <pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week5_firewalls/</guid>
        <description>&lt;h2 id=&#34;nse-week5-firwalls&#34;&gt;NSE Week5: Firwalls&lt;/h2&gt;
&lt;h3 id=&#34;how-to-protect-edges-of-the-internet-or-internal-network&#34;&gt;How to protect edges of the Internet or Internal network?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Local area networks (LANs)&lt;/code&gt;, &lt;code&gt;personal area networks (PANs)&lt;/code&gt;, &lt;code&gt;wireless local area networks (WLANs)&lt;/code&gt;, 以及 &lt;code&gt;wireless sensor networks (WSNs)&lt;/code&gt; 都属于Internet的最边缘，大多都是个人组织或者家庭所拥有的内部网络，我们可以把保护这样的互联网边缘网络或者内部网络比喻成保卫一座城市，通过三层的保护措施来防止入侵: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Perimeter Security (边界安全): 通过减少入口来控制进出，派遣武装守卫把守，同时要求进出的人员拥有预先设定的证明 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Street patrolling (街道巡逻): 派遣武装守卫定期上街巡逻，来识别入侵者 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;House cleaning (入室排查): 派遣专业的安全专家挨家挨户的排查外来危险品以及安全漏洞 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三道对于城邦的包围也就可以对应网络安全中的三项技术： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perimeter Security &amp;lt;-&amp;gt; Firewall: 防火墙 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Street patrolling &amp;lt;-&amp;gt; Intrusion detection systems: 入侵检测 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;House cleaning &amp;lt;-&amp;gt; Anti-malicious-software: 杀毒软件 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而我们今天要讲的，就是内网的第一道防线，防火墙。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在正式介绍防火墙之前，我们最后再介绍一下针对边界攻击的防御理念：5Ds of Perimeter Security: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Deter -&amp;gt; Detect -&amp;gt; Deny -&amp;gt; Delay -&amp;gt; Defend &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Deter
: -   组织入侵的发生（在其发生之前进行组织），即使用 &lt;code&gt;fencing 围栏&lt;/code&gt;, &lt;code&gt;lighting 完全照明&lt;/code&gt;, &lt;code&gt;signs 出入签名&lt;/code&gt; 等方式对犯罪者进行被动威慑，从最开始就扼杀入侵的念头 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使攻击变得困难，让attacker主动放弃 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detect
: -   检测入侵的行为，例如 &lt;code&gt;CCTV 监控&lt;/code&gt;, 用来监控和记录所有的入侵行为 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intrusion detection software &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Traffic analysis and machine learning to detect abnormities &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deny
: -   拒绝未经授权的访问，通过一些认证系统来主动拒绝入侵的行为，其中防火墙就属于 &lt;code&gt;Deny&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authentication, authorisation, freshness &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay
: -   延缓入侵的速度，通过设置障碍来延长入侵的时间，迫使入侵者放弃或者给予安全团队更多的时间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加密钥的长度 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defend
: -   主动地对入侵者进行打击，通过安全团队或者警方的行动来组织入侵 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;what-is-a-firewall&#34;&gt;What is a firewall?&lt;/h3&gt;
&lt;p&gt;什么是防火墙，它有什么作用呢？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;防火墙是一台主机或者一个网络服务，架设于 &lt;code&gt;内网&lt;/code&gt; 和 &lt;code&gt;外部网络&lt;/code&gt; 之间，用来： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防止坏事发生 (内部泄露机密到外部，外部攻击内部系统) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时使正常的行为不收到影响(员工正常访问外网交互) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_10-26-51_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;防火墙的主要功能&#34;&gt;防火墙的主要功能&lt;/h4&gt;
&lt;p&gt;主要工作：Access control 访问控制 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立一道屏障，所有方向上的网络流量都需要经过防火墙 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;防火墙会预设一系列安全协议来对所有这些经过的流量进行审计和控制（可以对异常的行为设置警报） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;可以对IP packet或者更早层的数据进行过滤 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时也可以部署NAT(network Address Translation)服务以及使用监控等服务 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;也可以通过IPSec来实现VPNs &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;防火墙的技术&#34;&gt;防火墙的技术&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;What? -&amp;gt; Service Control&lt;/dt&gt;
&lt;dd&gt;通过 &lt;code&gt;transport layer ports&lt;/code&gt; 决定 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;决定 &lt;!-- raw HTML omitted --&gt;What types of Internet services&lt;!-- raw HTML omitted --&gt; 可以通过 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Where? -&amp;gt; Direction control&lt;/dt&gt;
&lt;dd&gt;通过 &lt;code&gt;{Source adddress -&amp;gt; Destination address}&lt;/code&gt; 决定 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;决定特定方向的流量是否可以通过 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Who? -&amp;gt; User control&lt;/dt&gt;
&lt;dd&gt;通过 &lt;code&gt;{IP address -&amp;gt; Transport layer port}&lt;/code&gt; 决定 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;决定什么服务可以被什么用户所访问 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;How? -&amp;gt; Behaviour control&lt;/dt&gt;
&lt;dd&gt;控制服务应该被如何使用，比如一些核心的服务只能在特定的时间被使用 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;防火墙的类型&#34;&gt;防火墙的类型&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;Positive filter&lt;/dt&gt;
&lt;dd&gt;主动过滤，白名单过滤，只允许符合规则的数据通过，其他都不可以通过 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;假设所有人都是坏人 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;主动地选定谁是好人，允许其通过 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Negative filter&lt;/dt&gt;
&lt;dd&gt;被动过滤，黑名单过滤，不允许不符合规则的数据通过，其他都可以通过 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;假设所有人都是好人 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;被动地，在发现了坏人之后，将其过滤 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;根据防火墙的类型，过滤的策略也会不一样: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个或多个协议头 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Payload的内容 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;一串数据包的pattern &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;防火墙的限制&#34;&gt;防火墙的限制&lt;/h4&gt;
&lt;p&gt;防火墙也存在很多的限制，要不怎么需要多道的保护呢 &lt;!-- raw HTML omitted --&gt;
其无法保护: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绕过过滤规则的进攻 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;在外部被感染的设备 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;通过外部的WiFi网络进行的攻击 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;来自内部的威胁 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sneakernet&lt;/p&gt;
&lt;p&gt;球鞋网络，顾名思义就是使用物理媒介运输数据，而非通过网络，记得以前上计算机网络的时候，老师就提到过，在网络不稳定或者质量较差的时候，往往还是使用物理传输更为高效 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么这种时候 &lt;code&gt;Firewall&lt;/code&gt; 就完全失效了，因为其所针对的都是网络数据包，物理传输完全不在范畴之内 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WiFi&lt;/p&gt;
&lt;p&gt;WiFi之前的数据共享没办法集中到Firewall进行管理 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_11-24-28_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;packet-filtering-firewall&#34;&gt;Packet filtering firewall&lt;/h3&gt;
&lt;p&gt;What is a packet filtering firewall? &lt;!-- raw HTML omitted --&gt;
&lt;code&gt;基于数据包过滤的防火墙&lt;/code&gt; 是最基础也是最普遍使用的防火墙，其作用在两种数据包上： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ingress packets: 从外网到内网的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Egress packets: 从内网到外网的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时也对应 &lt;code&gt;ingress filtering&lt;/code&gt;, &lt;code&gt;egress filtering&lt;/code&gt; 两种过滤手段： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Packet filtering firewall&lt;/code&gt; 通过预设一系列的规则来决定是否让某一种数据包通过，而这些规则都是用来检测 &lt;code&gt;IP headers&lt;/code&gt; 以及 &lt;code&gt;TCP headers&lt;/code&gt;, 对于应用层所放入的payload一点都不感兴趣 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Packet filtering firewall&lt;/code&gt; 也分成 &lt;code&gt;stateless filtering&lt;/code&gt; 以及 &lt;code&gt;stateful filter&lt;/code&gt;,主要的区别就在于应用的规则是否会审计网络连接的状态，即判断一个数据包的去留是否会参考之前的记录，也可以说是考虑了上下文 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_22-07-19_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;stateless-filtering-无状态过滤&#34;&gt;Stateless filtering 无状态过滤&lt;/h4&gt;
&lt;p&gt;其无状态的过滤主要体现在： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对所有收到的包都一视同仁，单独决断是否放过 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;以前的记录不会影响对改数据包的判断 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们之前提到过 &lt;code&gt;Packet filtering firewall&lt;/code&gt; 主要是通过审查 &lt;code&gt;IP headers&lt;/code&gt; 以及 &lt;code&gt;TCP headers&lt;/code&gt;, 那么细化来说 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;是IP header中的： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Destination IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;other fields: defines the transport protocol &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及 TCP/UDP header 中的： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source port &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Destination port &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过设定对以上信息的规则来实现过滤审查，那么所有的这些规则都会被记录到 &lt;code&gt;ACL (access control list)&lt;/code&gt; 访问控制列表上. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_20-46-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;过滤规则&lt;/p&gt;
&lt;p&gt;通常来说，ACL上定义的规则会被 &lt;code&gt;从上至下&lt;/code&gt; 依次与审查的数据包进行匹配，然后执行对应的动作。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认规则&lt;/p&gt;
&lt;p&gt;之前我们提到过主动过滤和被动过滤，在这里我们展开讲讲 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Default = discard 默认丢包
: -   主动过滤（主动的选择可以通过的名单） &lt;!-- raw HTML omitted --&gt;
-   白名单过滤 &lt;!-- raw HTML omitted --&gt;
-   禁止未经明确许可的行为 (That which is not expressively permitted is prohibited) &lt;!-- raw HTML omitted --&gt;
-   更为稳健和保守的政策 &lt;!-- raw HTML omitted --&gt;
-   所有被允许的服务都需要一个个添加 &lt;!-- raw HTML omitted --&gt;
-   对用户不太友好（就像我们之前所提到的，用户的端口更为灵活，利用白名单一个个加很不明显） &lt;!-- raw HTML omitted --&gt;
-   用户的可见性随着规则的增加而降低 &lt;!-- raw HTML omitted --&gt;
-   相对的，对企业和政府来说更加友好 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Default = forward 默认放行
: -   被动过滤（默认不用过滤，直到被动的知道了有威胁才过滤） &lt;!-- raw HTML omitted --&gt;
-   黑名单过滤 &lt;!-- raw HTML omitted --&gt;
-   没有明确禁止的就是允许的（That which is not expressively prohibited is permitted） &lt;!-- raw HTML omitted --&gt;
-   较于白名单更不安全 &lt;!-- raw HTML omitted --&gt;
-   每当出现新的威胁需要更新记录到黑名单上 &lt;!-- raw HTML omitted --&gt;
-   通常被开发的组织采纳，比如大学 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Granularity of filtering 过滤的颗粒度
: 除了前面提到那几个常见的匹配规则，还有一些内容可以实现更精确的过滤，根据firewall使用的不同的routers来决定 &lt;!-- raw HTML omitted --&gt;
-   在入站时进行过滤 &lt;!-- raw HTML omitted --&gt;
-   在出站时进行过滤 &lt;!-- raw HTML omitted --&gt;
-   在入站和出站同时进行过滤 &lt;!-- raw HTML omitted --&gt;
-   检查数据包的其他控制区域 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ACL实例&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set A&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_22-39-21_screenshot.png&#34; width=&#34;700px&#34;/&gt;
            &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们先来看这第一组规则 &lt;!-- raw HTML omitted --&gt;
&amp;rsquo; * &amp;rsquo; = ANY &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;第一条
: 所有与 &lt;code&gt;SPIGOT&lt;/code&gt; 的通信都被禁止了 &lt;!-- raw HTML omitted --&gt;
1.  两个端口号都没有指定，说明这条规则没有方向（端口号的大小指示了客户端和服务端） &lt;!-- raw HTML omitted --&gt;
2.  只指定了 &lt;code&gt;SPIGOT&lt;/code&gt; 的IP地址，说明到SPIGOT的数据包和从SPIGOT来的数据包都会被禁止，也许是以前有过恶意行为，所以被整一个禁止了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;第二条
: 所有内网开启的SMTP服务都允许被外网所连接 &lt;!-- raw HTML omitted --&gt;
1.  指定了IP地址以及对应的端口号25， 是SMTP服务所对应的端口 &lt;!-- raw HTML omitted --&gt;
2.  这里是允许内网的邮件系统收取邮件 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set B&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
默认丢弃所有的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一条默认丢弃规则，一般来说是放在最下面 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;默认丢弃就是我们之前说的主动过滤，白名单过滤 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;在此之上就是定义的可以通过的规则 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set C&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-30_09-53-39_screenshot.png&#34; width=&#34;700px&#34;/&gt;
            &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与rule set A类似，这次是允许内网所有的主机向外发邮件 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;但是存在两个漏洞 &lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;攻击者也可以修改他们服务端口号到25，这样就可以使泄密的数据绕过防火墙策略 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;attacker也可以修改他们的客户端端口号到25，从而绕过防火墙策略实现入侵，连接内网的服务 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set D&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-30_09-55-57_screenshot.png&#34; width=&#34;700px&#34;/&gt;
            &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;与之前三条不同的是，Rule set D多了flags的信息，主要运用于TCP的连接的判断 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一条和之前Rule set C一样，是允许内网的主机发送邮件到外网 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;第二条则做了更多的限制，要求进入内网的邮件需要是TCP ACK数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set E&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-30_09-58-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
            &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一条，允许内网的主机向外发送数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;第二条，允许回复的ACK包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;第三条，允许内网的服务对外网的客户端进行回复 (port &amp;gt; 1024) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;其他常见过滤规则&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ingress packet 的source IP address 是内网的地址
: 我们知道防火墙是建立在内网和外网之前的，因此 &lt;code&gt;Ingress packet&lt;/code&gt; 只有可能是从外网的地址到内网的地址，这类不寻常的数据包通常都是被恶意修改的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定了路由器的数据包
: 这类数据包通常也是被恶意修改的来绕过防火墙规则的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Payload特别小的数据包
: 这类特别小的数据包，很有可能是用来分离会被审查的信息，以此来绕过防火墙规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;来自外网地址的用于控制的数据包
: 有一些数据包是专门用来进行内网设备管理和控制的，比如DHCP, Bootp, TFTP, NFS, 都是来给内网下发指令或者发送配置的，这些数据包如果来自外网很有可能就是恶意的，应该丢弃 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stateless filtering的优劣势以及漏洞&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Advantages&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现 &lt;code&gt;stateless filtering&lt;/code&gt; 比较方便 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;规则对用户比较透明，速度也很快 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Disadvantages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没办法对更高层的数据进行过滤，因此没办法部署对于应用层的漏洞的过滤 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;一些恶意的指令（存在于payload中）无法被过滤 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果一个客户端端口号被允许通过（&amp;gt;1024）,那么其所有的数据包都会被放行 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志记录的信息较少（因为本来指定规则以及审核数据包所需要用到的数据就很少） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;无法部署高级的认证系统 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;同样因为缺乏高层的审核功能 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vulnerabilities&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法检测出TCP/IP被修改过的数据，spoofing attack &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;无法应用更高层的审核机制，导致数据内容被修改后即可绕过规则 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;由于用于过滤规则制定的变量较少，因此错误的配置很容易就发生了，从而招致入侵 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;攻防实例&lt;/p&gt;
&lt;p&gt;接下来我们来看一些攻防的实例，来看看stateless filtering能抵御哪些攻击 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IP address spoofing&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IP address spoofing&lt;/code&gt; 通常都是通过修改IP地址来欺骗服务器其真正的主机地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Countermeasure
: -   我们可以制定一些规则来避免一些不合理的数据包，例如 &lt;!-- raw HTML omitted --&gt;
-   Ingress（从连接外网的interface传向连接内网的interface）的数据包本来应该是外网到内网的地址，可如果source IP address变成了外网的地址，那就有问题了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source routing attack&lt;/p&gt;
&lt;p&gt;Source routing是一种特殊的路由机制，即发送方可以指定到达接收方的路由（通常来说，我们只是指定gateway，然后让路由器去寻找路由） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么Attacker可以利用这个机制来伪造数据包的IP address绕过过滤规则，同时使用source routing指示数据包真正的路径和方向 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Countermeasure
: -   丢弃所有使用source routing的数据包 &lt;!-- raw HTML omitted --&gt;
-   禁止这些指定了路由的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tiny fragment attacks&lt;/p&gt;
&lt;p&gt;就像我们之前提到过的，攻击者可以将数据包分离成多个小的数据包，将所需要的信息分散到小的数据包当中，而防火墙往往只会检查最开始的数据包片段，由此可以绕过检测规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Countermeasure
: -   防火墙可以设定一些规则比如，丢弃所有分散化的TCP数据包，或者在进行审核之前先重组这些数据包片段 &lt;!-- raw HTML omitted --&gt;
-   规定第一个数据包片段必须含有足够多的数据便于防火墙审核 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;补充知识&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP port numbers&lt;/p&gt;
&lt;p&gt;我们再来复习一下 &lt;code&gt;TCP port numbers&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;TCP port number 一般用来指示运行的应用或者服务： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端（本地的）应用的端口号一般小于1024，这些端口号一般都已经被占用了，我们自己在写程序的时候应该避免使用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;而其他1024~66535的端口号一般被用于客户端（外部的）程序 (16 bits端口号) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还记得我们之前的送快递的例子吗，我们说传输层是上保险，IP地址是送货地址，网络层是找送货的地图，MAC地址是邮编，物理层是送货，那么这个端口号就是写的名字，表明是什么服务传输数据给什么服务 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_21-04-52_screenshot.png&#34; width=&#34;400px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;从中，我们又看出了一些 &lt;code&gt;stateless filtering&lt;/code&gt; 的局限，用户的端口号千变万化，那么就会设置一下较为宽松的规则，从而引发漏洞 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to block an entire subnet?&lt;/p&gt;
&lt;p&gt;Use subnet address with CIDR prefix or subnet masks，使用子网划分的后缀 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_22-09-37_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;stateful-firewall&#34;&gt;Stateful firewall&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Stateful filtering&lt;/code&gt;, 也叫做 &lt;code&gt;connection-state filtering&lt;/code&gt;,通过追踪外部和内部的主机的连接来决定出入规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Connection state&lt;/dt&gt;
&lt;dd&gt;当我们说连接的是，指的就是一个TCP连接的状态，是否已经建立（UDP不建立连接） &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;所有这些建立的TCP连接都会存入 &lt;code&gt;state table&lt;/code&gt; (但如果保存了大量的连接，就会出现TCP SYN Flooding 这样的攻击) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_21-33-38_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How stateful firewall works?&lt;/p&gt;
&lt;p&gt;当有ingress或者egress的数据包通过的时候，firwall会查找 &lt;code&gt;state table&lt;/code&gt; 来判断他们是否属于被记录的connection &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果属于一个连接，发行，并记录信息（比如TCP sequence number，可以用来防御 &lt;code&gt;TCP session hijacking&lt;/code&gt; ） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果不属于，再判断这是否是一个 &lt;code&gt;TCP SYN packet&lt;/code&gt; 用来建立一个连接: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是的话就新开一条记录用来记录这个新的连接 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果不是的话，那就丢弃 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Drawbacks of stateful firewall?&lt;/p&gt;
&lt;p&gt;我们可以同时使用 &lt;code&gt;stateful filtering&lt;/code&gt; 以及 &lt;code&gt;stateless filtering&lt;/code&gt;,因为从上面的描述中，也许有一些朋友已经嗅到了一丝漏洞的味道，存储 -&amp;gt; Emm -&amp;gt;flooding lol. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;查询连接，判断从属，记录信息等等这些动作都需要消耗大量的存储空间和CPU资源，因此很容易遭受攻击，因此可以选择只保存有限的信息，以及一段时间内的连接来减少消耗 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IPTables&lt;/p&gt;
&lt;p&gt;IPtables是Linux的 stateful packet filtering工具，其主要的功能有两个： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Tables
:&lt;/p&gt;
&lt;p&gt;Chains
: 定义了一系列的过滤规则用来处理经过的数据包，然后做出响应的决定（accept or drop） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stateful-firwall-and-proxy-firewall&#34;&gt;Stateful firwall and proxy firewall&lt;/h3&gt;
&lt;h4 id=&#34;circuit-level-gateway-proxy-firewall&#34;&gt;Circuit-level gateway/proxy firewall&lt;/h4&gt;
&lt;p&gt;Circuit-level gateway/proxy firewall 位于 &lt;code&gt;session layer&lt;/code&gt; 会话层，根据网络模型的不同，有一些教材也有说是跑在 &lt;code&gt;Transport layer&lt;/code&gt; 传输层的。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;也被称为 &lt;code&gt;circuit gateways&lt;/code&gt;, &lt;code&gt;transparent proxy firewall&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;
其主要的目标是对内外网想要建立的连接进行审核，通过 &lt;code&gt;packet filters&lt;/code&gt; 与 &lt;code&gt;circuit gateways&lt;/code&gt; 的结合可以构造起一个 &lt;code&gt;dynamic packet filter&lt;/code&gt;  &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何实现连接的过滤呢？&lt;/p&gt;
&lt;p&gt;主要是通过 &lt;code&gt;relay/proxy&lt;/code&gt; 连接，gateway会分别与 &lt;code&gt;server side&lt;/code&gt; 以及 &lt;code&gt;client-side&lt;/code&gt; 建立独立的连接 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在packet filter，无论是 &lt;code&gt;stateful&lt;/code&gt; 或者是 &lt;code&gt;stateless&lt;/code&gt; 中，服务端和客户端的连接都是直连的，而在 circuit-level gateway中实现的relay可以很好的隐藏server和client的信息，外网只能观察到gateway的IP地址，而不知道具体连接的内网设备的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_15-27-07_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;上图就是当外网的client想要连接内网的服务，就会先与gateway建立连接，gateway会维护一个有效连接的表，如果连接是被允许的，那么就会继续建立连接，gateway会用公网IP地址与外网的client建立一个TCP连接，再与内网的设备用内网IP建立TCP连接，之后就不再过滤数据，只是做煎蛋的转发。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;application-level-proxy-firewall&#34;&gt;Application-level proxy firewall&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Application gateways&lt;/code&gt;, also referred to as &lt;code&gt;application-level gateways (ALG)&lt;/code&gt; or &lt;code&gt;proxy servers&lt;/code&gt;, 是安装在指定设备上的软件包，像proxy一样，用来为内网用户处理来自外网的服务请求。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;ALG可以被配置为应用的特定特征进行过滤，例如MIME，或者SQL格式来决定数据包的payload是否合法。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过监测分析这些payload，ALG可以检测出恶意代码还有可疑的数据包，进而屏蔽可以的IP地址以及端口号，这些处理将会要求ALG服务器有大量的运算处理和存储的需求。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;ALG采用白名单的形式，需要为不同的applications配置不同的审核机制，否则就不能进行传输 &lt;!-- raw HTML omitted --&gt;
If gateway does not implement the proxy code for a specific application, then the service is not supported and cannot be forwarded across the firewall &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何连接到ALG服务?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户使用TCP/IP应用来进行连接，例如Telnet/FTP &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ALG会要求用户提供想要连接远程用户的名字 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;用户提供有效的user ID以及相关的认证信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ALG会relay TCP segment来进行监测并转发 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ALG的优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相较于 &lt;code&gt;packet filtering firewalls&lt;/code&gt; 更为安全 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;只需要监测一小部分特定的应用即可 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;更方便的记录日志以及监测应用层的payload &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ALG的缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一个服务都需要进行proxy &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;需要大量的计算处理以及消耗大量的存储空间 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bastion-hosts-and-gateways&#34;&gt;Bastion hosts and Gateways&lt;/h3&gt;
&lt;p&gt;我们之前提到的 &lt;code&gt;Application gateway&lt;/code&gt; 出于内外网之前充当转发的作用，但是相对的，ALG暴露在外网这种，因此我们需要对其提供更多的保护，一种就是 &lt;code&gt;Tursted Operating Systems (TOS)&lt;/code&gt;, 还有一种就是我们本章将要提到的 &lt;code&gt;Bastion hosts&lt;/code&gt; 堡垒机。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Bastion hosts堡垒机将提供强大的防御措施，包括联合使用我们之前所提到过的 &lt;code&gt;application gateways&lt;/code&gt;, &lt;code&gt;circuit gatways&lt;/code&gt; 以及各种类型的firewalls，同时堡垒机安装了可以信任的操作系统TOS，只提供必要的程序功能，例如SSH, DNS, SMTP, authentication programs。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Bastion上的Proxy必须满足以下条件 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gateway software的开发必须使用小型的module，因为小型的module更加容易检查漏洞，并方便重复使用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;堡垒机必须对网络层的用户进行单独的身份认证，例如通过IP packet 中的 source IP address以及destination IP address，这将与更高层的验证分离开来进行身份认证 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;堡垒机需要尽可能少得去连接内网的主机，这样一旦堡垒机出现问题，波及到的主机也会减少 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;堡垒机需要记录所有的系统日志，包括TCP会话连接状态，这将帮助管理员发现问题 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;所有跑在堡垒机上的代理服务都需要独立运行，一旦一个gateway发生问题，只需要单独关闭即可 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;堡垒机应该避免将数据写入硬盘保存（只写入内存中？），避免恶意软件的写入 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;堡垒机上运行的gateway软件不需要给予管理员权限 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;bastion-host-case-study&#34;&gt;Bastion host case study&lt;/h4&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
AWS就是通过设置堡垒机以及其中的Gateway来对危险的SSH进行relay，避免暴露真正的Linux instance &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;firewall-location-and-configuration&#34;&gt;Firewall location and configuration&lt;/h3&gt;
&lt;h4 id=&#34;personal-firewall&#34;&gt;Personal firewall&lt;/h4&gt;
&lt;p&gt;个人防火墙的主要目的是控制用户电脑与外网的网络流量 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;位置：通常是安装在个人电脑或者路由器上的软件包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;主要作用： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拒绝未经许可的外部访问 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;监控出站流量来分析恶意软件的活动 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;host-based-firewall&#34;&gt;Host-based firewall&lt;/h4&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
Host-based firewall其实与personal firewall十分相似，区别我觉得就是personal firewall一般是用在普通用户所使用的操作系统上的，而Host-based firewall则更多的是服务器上的使用，但特点都是一机一wall &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;而我们之前提到的用来分割内外网的firewall我们称为network-based firewall，区别就在于起作用域不一样 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;位置：通常被安装在一个web服务器上 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Advantages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以根据主机的情况进行过滤规则的定制 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;可以根据企业不同的安全政策进行定制 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;可以防御内部以及外部的网络 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dmz-networks&#34;&gt;DMZ networks&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DMZ&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
位于两个防火墙中间的子网我们称为Demilitarised Zones (DMZ 非军事化区域？), 其可以是物理的也可以是逻辑子王 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外部的firewall保护DMZ网络来自外网的威胁 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;针对外网的连接 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部的firewall保护DMZ网络来自内部的威胁 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;保护那些直接从DMZ网络中发出的攻击，例如worms, rootkit, bots &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DMZ中还可以嵌套DMZ形成多层的DMZ，那么连接在最末端firewall的子网就是最安全的，相反，连接在最外侧的firewall就是最不安全的，因为他们只有一个firewall的保护，随着结构的增加和复杂化，安全系数也在提高，攻击者需要绕过一层层的过滤规则才能到达最末端的设备。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通常来说，一些不需要特别强的保护的服务器电脑和其他设备会被放到DMZ网络中，他们起码可以避免暴露在外网当中。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;例如我们可以把WAF和负载均衡这些功能性的服务器给放置在DMZ网络中 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;还有一些用于促进内外连接的服务器也会防止在DMZ中，例如企业网站，邮件以及DNS服务器 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_17-23-08_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;distributed-firewalls&#34;&gt;Distributed firewalls&lt;/h4&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
分布式的防火墙框架，将综合使用多种防火墙，比如单独的防火墙设备以及安装在各个server上的host-based firewall 以及 安装在各个用户系统上的 personal firewall &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Security monitoring&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;日志记录 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;防火墙统计数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;对于单独的用户的监控 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;cloud-firwalls&#34;&gt;Cloud firwalls&lt;/h4&gt;
&lt;p&gt;Virtual private cloud (VPC) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
&lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/azure/firewall/features&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Azure Firewall&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;firewall-summary&#34;&gt;Firewall summary&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_16-26-23_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>NSE Week4: Hijacking and poisoning</title>
        <link>https://ginkgo.org.cn/posts/nse_week_4_hijacking_and_poisoning/</link>
        <pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_4_hijacking_and_poisoning/</guid>
        <description>&lt;h2 id=&#34;nse-week4-hijacking-and-poisoning&#34;&gt;NSE Week4: Hijacking and poisoning&lt;/h2&gt;
&lt;h3 id=&#34;tcp-session-hijacking&#34;&gt;TCP Session Hijacking&lt;/h3&gt;
&lt;h4 id=&#34;what-is-hijacking-劫持&#34;&gt;What is Hijacking 劫持?&lt;/h4&gt;
&lt;p&gt;指的是劫取其他人的东西，特别是在运行的时候。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Hijacking 劫持与spoofing的不同点在于： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hijacking 是劫持一个已经存在的TCP连接 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;而Spoffing则是通过修改IP header来发起新的连接进行欺骗 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Off-path v.s. On-path adversaries&lt;/p&gt;
&lt;p&gt;顾名思义，就是判断发起劫持的主机是否在连接的两台主机的路由上： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在路由上，那么就是On-path, 这种劫持更为强大，可以直接注入错误的信息，但是却很难扩大规模 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果不在路由上，那么就是Off-path,这种劫持就无法直接注入错误的信息了 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-connection&#34;&gt;TCP connection&lt;/h4&gt;
&lt;p&gt;如何唯一识别一个TCP连接呢？ &lt;!-- raw HTML omitted --&gt;
(source IP address + port number) + (destination IP address + port number) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Port number就指示了双方所运行的应用层的应用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP three-way handshake&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_10-22-56_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过不断增加Sequence number以及Acknowledgement number来实现握手，以及后续的通信 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How does an attacker hijack a TCP session?&lt;/p&gt;
&lt;p&gt;攻击者需要构造一个TCP segment来满足sequence number &amp;amp; acknowledgement number的回复 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么需要的信息有 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source IP address + port number (easy to get) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Destination IP address + port number (easy to get) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Sequence number (如果攻击者在路由上的话就不会很难，因为可以通过获取到的通信数据包来推测) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_10-33-18_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Sequence number可以是捕捉到的数据包的sequence number + 1 亦或是+ n，只要n不要太大，接收者都会将这些数据包保存在buffer中，等待中间“未接收到”的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-on-path-connection-hijacking&#34;&gt;TCP on-path connection hijacking&lt;/h4&gt;
&lt;p&gt;TCP on-path connection hijacking, attacker可以更方便的接收到通信的sequence number和acknowledgement number &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;只需要合理增加数字，就可以实现劫持，并发出恶意修改的数据： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;嗅探数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;预测sequence number (client -&amp;gt; server; server -&amp;gt; client) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;注入恶意数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_10-35-07_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_10-35-18_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;tcp-off-path-connection-hijacking&#34;&gt;TCP off-path connection hijacking&lt;/h4&gt;
&lt;p&gt;由于攻击者的主机并不在连接的路由上，因此attacker没有办法获取任何当前连接的信息，因此其需要主动发起一个连接，然后在劫持这个连接，同时返回合法的sequence number,但这一次因为无法进行嗅探，只能进行猜测 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_10-39-24_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to guess the initial sequence number&lt;/p&gt;
&lt;p&gt;这里利用的就是一些操作系统没有使用规范的标准来实现TCP连接 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;RFC 793 (TCP specification)
:&lt;/p&gt;
&lt;p&gt;When new connections are created, an &lt;code&gt;initial sequence number (ISN)&lt;/code&gt; generator is employed which selects a new &lt;code&gt;32 bit ISN&lt;/code&gt;. The generator is bound to a 32 bit clock whose low order bit is incremented roughly every 4 microseconds. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Thus, the ISN cycles approximately &lt;code&gt;every 4.55 hours&lt;/code&gt;. (4 microseconds x 2^32) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Since we assume that segments will stay in the network &lt;code&gt;no more than the Maximum Segment Lifetime&lt;/code&gt; (MSL, defined as 2 minutes in RFC 793) and that the MSL is less than 4.55 hours we can reasonably assume that ISN’s will be &lt;code&gt;unique&lt;/code&gt;. [i.e., sequence numbers should not repeat for at least 4.55 hours] &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The purpose is to ensure undelivered packets from previous connection that arrive late do not overlap with current connection &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;总结：在RFC 793的标准下，sequence number的递增周期就是4.55 hours，这超出了最长的连接时间(2mins),因此无论怎么递增，都基本不会从头开始，可以将所有的sequence number看作是unique唯一的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, BSD Unix TCP/IP stack did not adhere to these recommendations
: -   The sequence number for BSD TCP/IP stacks increases by 128,000 every second and by 64,000 for every new TCP connection. &lt;!-- raw HTML omitted --&gt;
-   Such a sequence is relatively easy to predict and can be much more readily exploited than one which follows the RFC standard &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可是在BSD Unix中，却没有按照标准实现，而是变成了sequence number每秒增加128,000，每一个新的连接增加 64,000, 这放宽了预测的时间以及缩小了范围，使sequence number很容易被预测 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP initial sequence number attack&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_10-46-15_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Attacker首先通过flooding使client无法正常工作，然后发起一个新的TCP连接给server，然后通过预测sequence number来伪装成client来进行通信 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bgp-route-hijacking&#34;&gt;BGP Route Hijacking&lt;/h3&gt;
&lt;h4 id=&#34;bgp-and-as&#34;&gt;BGP and AS&lt;/h4&gt;
&lt;p&gt;Border Gateway Procol 也被认为是最重要的Internet协议之一，因为其能够把多个ISPs组织在一起运作 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;BGP是一个inter-Autonomous System (ASs) 路由协议（用于自治区内部的设备之前通信） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_16-05-47_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Autonomous system (AS, 自治系统)&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;AS是路由策略中的基本单位，由同一个组织的管理员所管理的所有网络都属于一个AS来作为路由协议的基础 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;每一个AS内部都有很多设备相连，也会有很多的网络 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;sometimes referred to as a &lt;code&gt;routing domain&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Autonomous System Number (ASN)&lt;/code&gt;, 每一个AS都有一个，全球唯一 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;bgp-routing-table-and-cidr-prefix&#34;&gt;BGP routing table and CIDR prefix&lt;/h4&gt;
&lt;p&gt;在BGP中，路由并不是直接指定如何到达一个IP地址，而是如何达到一个网段， Classless Inter-Domain Routing (CIDR) prefixes &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CIDR prefix&lt;/p&gt;
&lt;p&gt;CIDR prefix就是subnet mask中含有1的数量 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
172.16.122.204/16 就位于172.16.0.0/16网段当中，前面16bits为network段，用来指示网段;后面为host段，用来指示具体的主机 &lt;!-- raw HTML omitted --&gt;
CIDR prefix = 16 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;BGP Routing table 由两部分组成一个entry (x, l)： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;x就是网段 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;l就是路由器的接口interface，指向下一跳的地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_16-12-24_screenshot.png&#34; width=&#34;300px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BGP 的功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从周边的ASs中获取不同的网段的reachability &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;BGP允许所有的子网都能宣告自己的存在 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;BGP接着会确保所有的路由器都能知道这个子网的存在 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;决定每一个路由器到达不同子网的最优路径 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Policy &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Prefix reachability information &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ASs使用最长掩码匹配机制（longest prefix matching）来选择路径 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;例如当需要决定192.168.20.19的路由时，有两个子网需要选择 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;192.168.20.16/28; 192.168.0.0/16 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;选择192.168.20.16/28，因为其子网掩码长，更具体 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bgp-route-advertisement-and-propagation&#34;&gt;BGP route advertisement and propagation&lt;/h4&gt;
&lt;p&gt;接着我们具体展开来讲上面提到过的BGP的功能 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;首先是宣告子网的功能 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;例如下图，AS22394中有66.174.161.0/24这个子网，于是其开始向外宣告自己有这个子网 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;然后按照相邻的顺序，AS6167首先收到了这个宣告，然后记录下来6167,22394这个顺序 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;然后依次继续宣告，并不断记录次序，方便将来路由 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_16-22-21_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;ebgp-and-ibgp-connections&#34;&gt;eBGP and iBGP connections&lt;/h4&gt;
&lt;p&gt;那么AS中也有很多的路由器属于不同的网络，他们之前也会交换子网的信息方便AS内部的路由，因此有内外两种BGP协议来进行路由 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;eBGP, external BGP (TCP),用于不同的AS之前的路由器之间的通信 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iEBGP, internal BGP (TCP), 用于同一个AS中的路由器之间的通信 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_16-27-38_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;bgp-route-prefix-sub-prefix-hijacking&#34;&gt;BGP route/prefix/sub-prefix hijacking&lt;/h4&gt;
&lt;p&gt;那么有信息交换，就有hijacking，本质上BGP的hijacking的目的就是通过宣告攻击者的AS能够到达目标子网，来诱使其他的AS将原本将要发送到目标子网的数据发送到攻击者的AS中来。其中也有两种不同的方式 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BGP route/prefix hijacking&lt;/p&gt;
&lt;p&gt;一种是通过直接宣告目标子网在攻击者的AS中的错误信息来误导其他AS将数据发送过来 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BGP sub-prefix hijacking&lt;/p&gt;
&lt;p&gt;就是利用我们之前提到的过的longest matching原则，通过加长子网掩码的长度，诱导AS选择更为确切的子网 &lt;!-- raw HTML omitted --&gt;
例如目标子网为10.100.0.0/16，攻击者就宣告，10.100.0.0/24 来误导其他的AS &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bgp-routing-blackhole-and-two-incidents&#34;&gt;BGP routing blackhole and two incidents&lt;/h4&gt;
&lt;p&gt;How to create a routing blackhole? &lt;!-- raw HTML omitted --&gt;
如果ASs开始宣告无法提供的子网，那么整一个Internet就会陷入混乱，因为数据包永远无法到达应该发送的位置，也收不到任何的回复 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns-cache-poisoning&#34;&gt;DNS Cache Poisoning&lt;/h3&gt;
&lt;h4 id=&#34;dns-and-dns-structure&#34;&gt;DNS and DNS structure&lt;/h4&gt;
&lt;p&gt;Domain Name System, DNS &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个分布式的数据库用来存储DNS信息，从而完成一个DNS服务器架构 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;一个应用层的协议来向所有主机提供数据库信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么我们需要DNS？ &lt;!-- raw HTML omitted --&gt;
理由也很简单，好记！现在IPv4已经被用完了，取而代之的是更长的IPv6，如果每访问一个网站都需要记住IP地址就太麻烦了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
DNS服务器采用树状结构 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;全世界一共有13个root server &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;顶级域名Top level domain (TLD) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;com,edu, org, net, gov .etc &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;cn, uk, de, eu, etc. &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本博客目前的域名后缀后缀就是org.cn &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;dns-name-resolution--iterative-and-recursive&#34;&gt;DNS name resolution (iterative and recursive)&lt;/h4&gt;
&lt;p&gt;DNS主要的作用就是map &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Domain names to IP addresses &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;IP addresses to Domain names &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DNS resolver向 nameservers 进行mapping请求，一般我们将查询请求分为两种 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Iterative DNS query with caching 迭代查询&lt;/p&gt;
&lt;p&gt;顾名思义就是一个个DNS服务器查过来，一个查不到就下一个 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Local DNS server &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;root DNS server &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Top level DNS server &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Authoritative DNS server &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_16-57-23_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recursive DNS query with caching 递归查询&lt;/p&gt;
&lt;p&gt;同样也是按次序查询，但是不同的地方在于，只有查到了才会原路返回给用户，否则就会继续将查询递交给下一个服务器 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_16-59-21_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;注：一般来说不会在实际中使用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dns-caching&#34;&gt;DNS caching&lt;/h4&gt;
&lt;p&gt;Why we need DNS caching? &lt;!-- raw HTML omitted --&gt;
通过缓存这些DNS的map信息来加速网页的访问 &lt;!-- raw HTML omitted --&gt;
比如已经查到过一次谷歌的域名和IP地址的map之后，就存在本地的DNS server上，这样下一次就不用花这么多步骤再去查询了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;dns-cache-poisoning-attack&#34;&gt;DNS cache poisoning attack&lt;/h4&gt;
&lt;p&gt;那么这种偷懒的办法也就会遭到黑客的攻击，如果在DNS查询的过程中，黑客发送了伪造的DNS记录给本地的DNS server，那么既而被缓存在本地，造成长久的损害。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同时还会给同一区域的其他设备造成危害，记得之前我们在SCT中提到过的 &lt;code&gt;Water holing attack&lt;/code&gt; 就是利用了 &lt;code&gt;DNS cache poisoning attack&lt;/code&gt;, 通过获取组织内最频繁访问的页面，就可以利用DNS poisoning来将那个网站改为黑客所构建的恶意网站，既而达到其攻击目的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;how-dns-poisoning-attack-works&#34;&gt;How DNS poisoning attack works？&lt;/h4&gt;
&lt;p&gt;那么具体是如何伪造的DNS query回复来使DNS server认为其是合法的查询结构并缓存的呢？ &lt;!-- raw HTML omitted --&gt;
这里也有两种手段 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Query QID attack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每一个DNS query 都有一个唯一的 &lt;code&gt;QID&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS使用UDP进行通信 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因此不存在连接的说法，只要能够选对正确的QID，就能成功代替真实的回复 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-28_17-07-58_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RRSet attack&lt;/p&gt;
&lt;p&gt;每一个DNS query response 会包含一组记录集，Resource Record Sets, or RRSets &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同时，这些记录集不只包含mapping的entry，还可以增加一些其他额外的信息，对未来的mapping有所“帮助” &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;比如在一次递归查询中，一般会包含域名的mapping可以在某一个服务器上获得之类的信息，黑客就可以选择篡改这个信息，直接改为mapping的信息，就可以达到其重定向的目的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>NSE Week 3: Spoofing, flooding and amplification</title>
        <link>https://ginkgo.org.cn/posts/nse_week_3_spoofing_flooding_and_amplification/</link>
        <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_3_spoofing_flooding_and_amplification/</guid>
        <description>&lt;h2 id=&#34;spoofing-flooding-and-amplification&#34;&gt;Spoofing, flooding and amplification&lt;/h2&gt;
&lt;h3 id=&#34;spoofing&#34;&gt;Spoofing&lt;/h3&gt;
&lt;h4 id=&#34;arp-spoofing&#34;&gt;ARP spoofing&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Layer identifiers&lt;/p&gt;
&lt;p&gt;Routing是network communication中重要的一环，computer node在通信之前，需要知道自己在与谁联系，要通过什么路径去联系 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么layer identifier 就代表着每一个computer node &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internet Layer identifier: &lt;code&gt;IP address&lt;/code&gt; (assigned by users or by software, such as DHCP) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Link Layer Identifier: &lt;code&gt;MAC Address&lt;/code&gt; (hardware address, physical address) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP (Address Resolution Protocol)&lt;/p&gt;
&lt;p&gt;aims to translate from IP address to MAC address &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_11-05-46_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP request message generation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当有IP packet需要发出的时候，ARP就会被hardware driver 所调用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;首先获取IP destination address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后在ARP本地的 &lt;code&gt;translation table&lt;/code&gt; 中查找是否有对应得IP address : MAC address entry &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;有的话，就把48-bits的MAC address发送给 hardware driver &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;没有的话，就准备发送ARP请求，填充相关信息 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;sender MAC address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;sender IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;target IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;target MAC address (broadcast address: 00:00:00:00:00:00) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ARP request message在link layer被封装成frame 然后发送出去 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP request message reception&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目标节点将会回复其所包含的MAC address, （如果通信的是其他网络的节点，那么此处寻找的就是网关的MAC address) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;其他收到请求的节点会更新他们的 &lt;code&gt;translation table&lt;/code&gt; (IP address : MAC address entry) 然后丢弃这个包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP rely message reception&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ARP rely 是单播，会直接发送回发送者 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP translation table (ARP table, ARP cache)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过ARP cache 来保存IP address : MAC address entry 来节省空间 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;表内的entry会 ageing &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ARP 是无状态协议，因此只要收到了request/reply 他们就会自动更新 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RARP (Reverse ARP)&lt;/p&gt;
&lt;p&gt;aims to translate from MAC address to IP address &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_11-06-13_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP spoofing attack&lt;/p&gt;
&lt;p&gt;ARP spoofing主要的目的就是污染原本的ARP cache，将Computer A存放的关于 Computer B的信息，改为attacker的，这样A在给B发frame的时候，就会发给attacker &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_10-49-32_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;countermeasure&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 &lt;code&gt;Arp cache&lt;/code&gt; 的过期时间, expire &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;一些系统通过unicast 来更新cache 表，而不是像之前那样无状态的更新 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Against countermeasure &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Attacker可以通过定期发送 ARP spoof packet (every ~40s) 来避免以上方法 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static ARP table 静态ARP表 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;每次启动加载到RAM中 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;没有ARP request主动发送 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Man-in-the-middle attack with ARP spoofing&lt;/p&gt;
&lt;p&gt;通过ARP spoofing 污染两/多台电脑的 &lt;code&gt;ARP cache&lt;/code&gt; ，使他们的通信destination都指向attacker，从而截取通信内容(attacker node 进而转发通信，因为它知道IP address所对应的正确的MAC address) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_10-53-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MAC flooding&lt;/p&gt;
&lt;p&gt;每个switch 会内置一个 &lt;code&gt;CAM (Content Addressable memory)&lt;/code&gt; 表，用于记录不同的MAC address所对应的port number &lt;!-- raw HTML omitted --&gt;
每当有frame 经过 switches, switch就会通过这个 table 来实现转发 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;MAC flooding就是使用大量的spoofed frame来填充switch 的转发表，从而占满 switch 所有的内存空间，使正常的frame的转发策略无法加入table，最终就会导致正常的frame 通信因为没有对应的port而 &lt;code&gt;被迫广播&lt;/code&gt; ，使attacker可以利用sniffer所监听到。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_11-04-54_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dhcp-spoofing&#34;&gt;DHCP spoofing&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DHCP (Dynamic Host Configuration Protocol)&lt;/p&gt;
&lt;p&gt;DHCP是用来自动的给其他的用户分配IP地址以及其他相关配置的（网关，DNS服务器等）协议 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Protocol operations
: 1.  Discovery &lt;!-- raw HTML omitted --&gt;
-   &lt;code&gt;client&lt;/code&gt; 广播 &lt;code&gt;DHCP Discovery message&lt;/code&gt; 来寻找server &lt;!-- raw HTML omitted --&gt;
2.  Offer &lt;!-- raw HTML omitted --&gt;
server单播提供IP给client &lt;!-- raw HTML omitted --&gt;
3.  Request &lt;!-- raw HTML omitted --&gt;
client 发送接收IP的message &lt;!-- raw HTML omitted --&gt;
4.  Acknowledge &lt;!-- raw HTML omitted --&gt;
server确认client愿意接受并发送IP以及其他的配置信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     &lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-31-53_screenshot.png&#34; width=&#34;700px&#34;/&gt;
            &lt;/figure&gt;
 &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DHCP spoofing attack&lt;/p&gt;
&lt;p&gt;DHCP spoofing 主要是通过向DHCP server发送大量的 &lt;code&gt;Spoofed DHCP request message&lt;/code&gt; 来 &lt;code&gt;占用&lt;/code&gt; IP池里的所有可分配的IP，然后再使用一台假的DHCP server来回复client所发出的DHCP discovery message，进而控制这些client的IP以及其他配置（网关，DNS server地址）。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;正常的DHCP request message： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-43-14_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Spoofed DHCP discovery message: 利用大量虚假的MAC地址来占用可分配的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-43-53_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;DHCP starvation
:&lt;/p&gt;
&lt;p&gt;通过发送大量的带有伪造MAC Address的DHCP request message来占用所有的IP池中的IP地址，进而使用假的DHCP server给其他client分配地址和其他配置信息，对他们进行控制 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-45-24_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-45-38_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-45-50_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;flooding-and-amplification&#34;&gt;Flooding and Amplification&lt;/h3&gt;
&lt;h4 id=&#34;icmp-smurfing&#34;&gt;ICMP Smurfing&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ICMP&lt;/p&gt;
&lt;p&gt;Ping
: 提到ICMP协议，就不得不提到ping，ping就类似于一个声纳系统，通过向特定的电脑发送 &lt;code&gt;ICMP ECHO_REQUEST&lt;/code&gt; ，来使他们通过返回 &lt;code&gt;ECHO_REPLY_REQUEST&lt;/code&gt; 来验证是否可以通信 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ICMP Smurfing&lt;/p&gt;
&lt;p&gt;Attacker通过向一个局域网的广播域中发送大量的 &lt;code&gt;spoofed ICMP ECHO_REQUEST&lt;/code&gt; 来诱导大量的clients发送 &lt;code&gt;ICMP ECHO_REPLY_REQUEST&lt;/code&gt; 到指定的一台client进而使其崩溃 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_10-11-31_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Amplification
: 我们从上面的例子可以看到，通过一个简单的广播，就可以让这么多的client进而产生巨大的流量，进而就催生出一个新的技术就是 &lt;code&gt;Amplification&lt;/code&gt; ,可以通过多层的amplifiers来实现巨大的DDoS流量 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_10-13-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ntp-amplification-ddos-attack&#34;&gt;NTP Amplification DDoS Attack&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NTP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network time protocol &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;UDP protocol &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;port 123 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NTP用来用来各个主机的时钟 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;NTP是一个分层的，中间层的时间资源系统 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-46-00_screenshot.png&#34; width=&#34;500px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;每一层我们称为 &lt;code&gt;stratum&lt;/code&gt; ,由最上层的clock一层层同步到不同 &lt;code&gt;stratum&lt;/code&gt; 的NTP server &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NTP如何工作&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-50-06_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client首先发出NTP message，并且在上面记录当前的时间戳： &lt;code&gt;T1=9:00:00am&lt;/code&gt;  &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-50-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NTP server 收到后马上打上时间戳： &lt;code&gt;T2=10:00:01am&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-52-06_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NTP sever返回一条NTP message，然后在发出之前打上时间戳： &lt;code&gt;T3=10:00:02am&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-56-25_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NTP message到达用户的时候马上打上时间戳： &lt;code&gt;T4=9:00:03am&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用这四个时间戳，我们就足以同步client的时间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Timestamp&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T1&lt;/td&gt;
&lt;td&gt;09:00:00&lt;/td&gt;
&lt;td&gt;Client发出的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T2&lt;/td&gt;
&lt;td&gt;10:00:01&lt;/td&gt;
&lt;td&gt;Server收到的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T3&lt;/td&gt;
&lt;td&gt;10:00:02&lt;/td&gt;
&lt;td&gt;Server发出的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T4&lt;/td&gt;
&lt;td&gt;09:00:03&lt;/td&gt;
&lt;td&gt;Client收到的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;计算所有的Message在传输中delay的时间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;delay = D1 - D2 = (T4-T1) - (T3-T2) = 通信花费的总时长 - 在server上的处理时间 = 3 - 1 = 2 seconds
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算 NTP client 与NTP server 之间的时间差 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;O1 = T2 - T1 = 1h 1s &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;O2 = T3 - T4 = 59min &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;T2 = T1 + offset + delay/2 &lt;!-- raw HTML omitted --&gt;
T4 = T3 - offset + delay/2 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;因此Offset = (O1 + O2)/2 = [(T2 - T1 - delay/2) + (T3 - T4 + delay/2)] / 2 = 1 hour &lt;!-- raw HTML omitted --&gt;
总之就是 &lt;code&gt;(=服务端的两个时间&lt;/code&gt; - &lt;code&gt;客户端的两个时间 =)/2&lt;/code&gt;  = offset &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NTP amplification attack&lt;/p&gt;
&lt;p&gt;NTP amplification attack 依赖于利用公共可以访问的 &lt;code&gt;NTP server&lt;/code&gt; 来发出NTP RESPONSE实现对victim host的DDoS攻击 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;补充知识
: NTP 服务支持管理员向NTP server查询其所管理同步的clients信息，NTP servers通过向client发送monlist命令来获得所有最近连接过的hosts的列表 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;ntpd
: NTP daemon是一个操作系统的后台驻留程序，用来设置和维护系统时间并与NTP server交互实现时钟同步 &lt;!-- raw HTML omitted --&gt;
在Ntpd在4.2.7之前的版本都是存在漏洞的。 &lt;!-- raw HTML omitted --&gt;
在老的机器中，monlist command是默认开启的,它将会返回最近600个通信过的client的IP地址（也就是说一条monlist command，可以返回比原本大的多的数据） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How NTP amplification attack works?&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_09-36-42_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Attacker使用bot来伪造NTP request packets，使用victim的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_09-36-57_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Botnet 发送这些伪造的NTP请求，来诱使NTP servers调用他们的monlist命令，返回大量的response &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_09-38-14_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client收到了每一个NTP server所返回的600个IP地址的信息，相当于收到了一次DoS攻击。我们根据上面Wireshark的截图可以观察到，一条的spoofed NTP request只需要234bytes，但是却要受到100个482 bytes的数据包，可见其攻击力度。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;botnet&#34;&gt;Botnet&lt;/h4&gt;
&lt;p&gt;我们之前在NTP amplification attack已经提到过了bot的使用，在这一章节中，我们来稍微展开讲一讲Botnet的内容 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Botnet，僵尸网络，简单来说就是黑客通过控制一系列的设备（主机，手机，IoT设备等），实现对于本机信息的获取以及控制权，可以利用所感染的bot或者僵尸来实现各种攻击，并通过C&amp;amp;C(command and control) server来实现通信与指令下发 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何搭建一个Botnet?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;黑客首先需要得到一群受感染的用户设备，他们可以自己想办法去感染，也可以从地下市场购买别人感染的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后，让这些被感染的bots去连接上 C&amp;amp;C server,实现通信与管理 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;接着，黑客就可以通过C&amp;amp;C server来下达指令，要求Bot去偷取本机的信息，亦或者是配合实现攻击 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-syn-flooding&#34;&gt;TCP SYN Flooding&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP 是一个传输层的协议，用于很多我们耳熟能详的协议例如HTTP, SMTP 还有 ftp &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP 提供了可靠的点对点的基于连接的通信，如果说网络层的IP地址是提供了快递从揽货到送达的路径，那么传输层的TCP和UDP相当于是提供了传输路上的保险 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其可靠性主要是通过 &lt;code&gt;segment sequencing&lt;/code&gt;, &lt;code&gt;re-trasmission&lt;/code&gt; and &lt;code&gt;loss detection&lt;/code&gt; 来实现的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时TCP提供了流量控制和拥塞管理的功能，只要是通过滑动窗口算法以及丢包检测实现的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP connection&lt;/p&gt;
&lt;p&gt;每一个 &lt;code&gt;TCP connection&lt;/code&gt; 的标识符就是： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source IP address + port number &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Destination IP address + port number &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;其中Port number指代的就是所跑的服务所对应的number &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Three-way handshake 三次握手协议&lt;/p&gt;
&lt;p&gt;之前我们提到过TCP协议是基于连接的协议，那么三次握手协议，就是其内置的，用于建立连接的协议 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;首先我们先来认识一下一个用于三次握手协议的TCP header应该包含什么信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其应该包括： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Port numbers (16 bits each) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;SYN flag (1 bit) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ACK flag (1 bit) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Sequence number (32 bits) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Acknowledgement number (32 bits) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-36-39_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;然后看一个具体的例子 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source首先发起第一次握手请求，名为 &lt;code&gt;SYN&lt;/code&gt; 发出其所定义的一个sequence number为 &lt;code&gt;x&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;接着Destination返回第二次握手请求，名为 &lt;code&gt;SYN+ACK&lt;/code&gt; ，将sequence number改为其所定义的值 &lt;code&gt;y&lt;/code&gt; ，并将acknowledge number设为 &lt;code&gt;x+1&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;最后Source发起第三次握手请求，名为 &lt;code&gt;ACK&lt;/code&gt; , 返回acknowledgement number为 &lt;code&gt;y+1&lt;/code&gt; , 同时递增自己的 sequence number为 &lt;code&gt;x+1&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;至此三次握手连接成功，接下来就可以正常的进行通信，并且Source 和 Destination 将逐渐递增其自己的 &lt;code&gt;sequence number&lt;/code&gt; 以及 &lt;code&gt;acknowledge number&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-35-28_screenshot.png&#34; width=&#34;700px&#34;/&gt;
        &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP SYN flooding&lt;/p&gt;
&lt;p&gt;TCP SYN flooding attack本质上是一个DoS attack, 其目的是为了通过向目标服务器发送大量的无效 &lt;code&gt;SYN&lt;/code&gt;, 来诱使服务器发送对等数量的 &lt;code&gt;SYN+ACK&lt;/code&gt; 请求, 继而等待 &lt;code&gt;ACK&lt;/code&gt; 请求回复，同时利用本地缓存这个连接，最终导致本地的缓存空间被占满。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们最后通过一个具体的例子来复现一下这个过程 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-48-13_screenshot.png&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先黑客向服务器发送大量的 &lt;code&gt;SYN&lt;/code&gt; 请求,用的是伪造过的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-52-20_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接着服务器在收到了 &lt;code&gt;SYN&lt;/code&gt; 请求之后，便会发出对应的 &lt;code&gt;SYN+ACK&lt;/code&gt; 回复请求到之前伪造的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-52-30_screenshot.png&#34; width=&#34;700px&#34;/&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;被伪造的IP地址的主机收到由服务器发来的大量 &lt;code&gt;SYN+ACK&lt;/code&gt; 请求，可发现没有记录显示自己之前有发送过 &lt;code&gt;SYN&lt;/code&gt; 请求到该服务器，因此不会回复 &lt;code&gt;ACK&lt;/code&gt; 请求。同时，每维护一个等待 &lt;code&gt;ACK&lt;/code&gt; 的连接，服务器都要开设一个新的端口，同时用缓存保存这些信息，一旦超出上限，那么就会使服务器瘫痪 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mitigation&#34;&gt;Mitigation&lt;/h3&gt;
&lt;h4 id=&#34;mac-flooding-mitigation&#34;&gt;MAC flooding mitigation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用port security，限制从端口可以获取的MAC地址数量 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;对安全的MAC地址进行长时间的使用（不可替代），只要这些地址还存在于第三层的设备的ARP table当中（例如路由器，表示信任路由器的安全措施） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;使用AAA(Authentication, authorisation and accounting)服务器来验证所有MAC地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dhcp-starvation-mitigation&#34;&gt;DHCP starvation mitigation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用Port security, 只有可以信任的端口所连接的DHCP请求才被允许通过 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;DHCP snooping, 只接受信任的DHCP服务器所发送的配置 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dhcp-spoofing-mitigation&#34;&gt;DHCP spoofing mitigation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用入侵检测系统，并审核数字签名来避免伪造的DHCP服务器 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;DHCP snooping, 只接受信任的DHCP服务器所发送的配置 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;icmp-smurfing-mitigation&#34;&gt;ICMP smurfing mitigation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单独配置每一个主机和路由器，拒接相应ICMP请求和广播信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;配置路由器不要转发ICMP到广播域当中 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;入站流量检查，拒绝伪造源地址的数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ntp-amplification-ddos-mitigation&#34;&gt;NTP amplification DDoS mitigation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;禁止 &lt;code&gt;monlist&lt;/code&gt; 的使用，一次来避免NTP返回非常大的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;入站流量检查，拒绝伪造源地址的数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Firewall &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-syn-flooding-attack-mitigation&#34;&gt;TCP SYN flooding attack mitigation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用防火墙来进行filtering，对那些很明显的spoofed的IP address进行丢弃 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;减少SYN接受的时间，将那些黑客建立的半连接尽早关闭来防止崩溃 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;使用防火墙对于TCP connection来进行审查 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
