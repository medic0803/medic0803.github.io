<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>network_security on Under The Ginkgo</title>
        <link>https://ginkgo.org.cn/tags/network_security/</link>
        <description>Recent content in network_security on Under The Ginkgo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Thu, 26 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ginkgo.org.cn/tags/network_security/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>NSE Week 1: Module introduction, security concepts and security attacks</title>
        <link>https://ginkgo.org.cn/posts/nse_week_1_module_introduction_security_concepts_and_security_attacks/</link>
        <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_1_module_introduction_security_concepts_and_security_attacks/</guid>
        <description>&lt;h2 id=&#34;nse-week-1-module-introduction-security-concepts-and-security-attacks&#34;&gt;NSE Week 1: Module introduction, security concepts and security attacks&lt;/h2&gt;
&lt;h3 id=&#34;what-is-network-security&#34;&gt;What is Network Security?&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;Cyber security&lt;/dt&gt;
&lt;dd&gt;是关于个人和组织如何减少 cyber attack 的风险 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Network security&lt;/dt&gt;
&lt;dd&gt;是关于个人和组织如何减少网络攻击的风险 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Risk 风险 : &lt;!-- raw HTML omitted --&gt;
是关于漏洞利用从而对财产造成损失的可能性 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;security-concepts&#34;&gt;Security Concepts&lt;/h3&gt;
&lt;p&gt;首先我们再来回顾一下Cyber security中，最重要的CIA的概念 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Confidentiality&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;确保保密的信息不暴露给未经授权的人员 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Loss of confidentiality = unauthorised disclosure of information &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Integrity&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确保信息和程序只会被授权的人员所修改与处理 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loss of integrity = the unauthorised modification or destruction of information &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Availability&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确保系统正常运行并且不会拒绝授权的用户的访问 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loss of availability = the destruction of access to information/system and the destruction of use of information/system &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;CIA的重要性需要视情况而定，对于不同的资源/系统，我们需要指定不同的CIA的标准 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;more-properties-in-cyber-security&#34;&gt;More properties in Cyber security&lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-26_16-22-20_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Authentication&lt;/dt&gt;
&lt;dd&gt;确保每一个用户的真实身份都是他们所申明的一致 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Non-repudiation&lt;/dt&gt;
&lt;dd&gt;确保信息传输的双发不能否认他们接受或者发送过信息 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Code validation&lt;/dt&gt;
&lt;dd&gt;确保软硬件是健全的（sound），并且检查漏洞 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;osi-security-architecture&#34;&gt;OSI Security Architecture&lt;/h3&gt;
&lt;p&gt;接下来我们来介绍一下OSI的安全框架 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Security attack
: -   任何对组织的信息安全造成危害的行为都称为 security attack &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Passive or Active &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security mechanism
: -   一个用来从security attack中检测，防止和恢复的机制 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如流量检测，预防入侵 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security service
: -   一项用来保护组织中的数据处理系统的服务 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含多中Security mechanisms来对抗security attacks &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-26_16-30-51_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;philosophy-taken-to-counterattacking&#34;&gt;Philosophy taken to counterattacking&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Deter
: -   组织入侵的发生（在其发生之前进行组织），即使用 &lt;code&gt;fencing 围栏&lt;/code&gt;, &lt;code&gt;lighting 完全照明&lt;/code&gt;, &lt;code&gt;signs 出入签名&lt;/code&gt; 等方式对犯罪者进行被动威慑，从最开始就扼杀入侵的念头 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使攻击变得困难，让attacker主动放弃 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detect
: -   检测入侵的行为，例如 &lt;code&gt;CCTV 监控&lt;/code&gt;, 用来监控和记录所有的入侵行为 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intrusion detection software &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Traffic analysis and machine learning to detect abnormities &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deny
: -   拒绝未经授权的访问，通过一些认证系统来主动拒绝入侵的行为，其中防火墙就属于 &lt;code&gt;Deny&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authentication, authorisation, freshness &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay
: -   延缓入侵的速度，通过设置障碍来延长入侵的时间，迫使入侵者放弃或者给予安全团队更多的时间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加密钥的长度 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defend
: -   主动地对入侵者进行打击，通过安全团队或者警方的行动来组织入侵 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;security-mechanisms&#34;&gt;Security Mechanisms&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;Specific security mechanisms&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;May be incorporated into the appropriate protocol layer &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Provide some of the OSI security service: authentication, access control, data confidentiality, data integrity, and non-repudiation &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Very much related to popular security properties &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Non-specific security mechanisms&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;Not specific to any particular OSI security service or protocol layer &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;cryptographic-techniques&#34;&gt;Cryptographic Techniques&lt;/h3&gt;
&lt;p&gt;密码学提供了很多安全服务，例如加密，解密，数据完整性，认证交换，密码存储等服务 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;encipherment&#34;&gt;Encipherment&lt;/h4&gt;
&lt;p&gt;加密通过将明文进行加密，从而来保证confidentiality &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Two crytovariables in cryptographic funtions &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The key 密钥 (can be both symmetric or asymmetric) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;The initial vector (我们在密码学中讲过的随机数，用来参与加密的过程，比如在DES CBC中) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cryptographic-protocols&#34;&gt;Cryptographic Protocols&lt;/h4&gt;
&lt;p&gt;是通信的双方通过加密传递的信息来预防攻击 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Possible attacks?&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;Cyptoanalysis: recover the plaintext from ciphertext without knowing the key &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Message/field insertion, deleteion and change (破坏完整性) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Relay: 对先前合法的密文重复利用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Man-in-the-middle attack &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Countermeasure&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Countermeasures for cryptoanalysis &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Longer keys (e.g., 2048 bits for RSA, used to be 256 bits) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;舍弃弱密钥（比如全是0的或者全是1的） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Countermeasures for message/field insertion, deletion and change &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integrity check (hash, MAC, digital signature) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Countermeasures for replay attack &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provide freshness in protocol run &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Timestamp, sequence number, nounce &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Countermeasure for man-in-the-middle attack &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Cryptographic protocols&lt;/code&gt; should be designed and verified &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use formal methods to &lt;code&gt;evaluate&lt;/code&gt; security properties of cryptographic protocols &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;digital-signature&#34;&gt;Digital Signature&lt;/h4&gt;
&lt;p&gt;主要通过将额外的bit附加在传输的数据上，从而让接收者可以验证数据的 Integrity &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可以用来提供authentication, integrity, and non-repudiation,因为数字签名利用asymmetric非对称加密，使用发送方的private key进行加密，接收者则可以用public key来进行解密 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;authentication-exchange&#34;&gt;Authentication Exchange&lt;/h4&gt;
&lt;p&gt;用于发送方和接收方双方互相确认身份 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;常见的Authentication的方法： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Something you know, e.g., password &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Something you are, e.g., fingerprint &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Something you have, e.g., smart card, your phone &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;2-factor or multifactor authentication 双重/多重认证 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何选择身份认证的方法？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果通信的双方彼此可以信任，同时通信是可靠的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用密码 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何通信的双方是可以信任的，但是通信不可靠 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用密码以及加密协议 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何什么都不可以信任 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用密码，加密协议以及non-repudiation service &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们真的需要密码吗？&lt;/p&gt;
&lt;p&gt;剑桥大学发明了一种可携带的设备：&lt;a class=&#34;link&#34; href=&#34;http://mypico.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pico&lt;/a&gt;,其存储了所有的credentials信息，并且通过一系列传感器，以及生物特征信息来防止丢失后的信息泄露。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;other-security-mechanisms--x-dot-800&#34;&gt;Other Security mechanisms (X.800)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Access control &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;只允许有限的可授权人员的访问 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Traffic padding &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;在数据流中加入一些bits，使流量分析受阻，从而保证了confidentiality保密性 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Notarisation 公证 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;经过第三方来保证安全的信息传输 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security audit trail &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;收集信息来进行安全审计 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security recovery 数据恢复 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Economics &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;增加attack的成本，比如如果发邮件需要花钱，那垃圾邮件势必会减少 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;又或者在Bitcoin当中，发起DDoS攻击就以花费大量的transaction fee &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deception &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;通过暴露攻击者自己，例如使用蜜罐来获取攻击者的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;jamming-sniffing-and-spoofing&#34;&gt;Jamming, Sniffing and Spoofing&lt;/h3&gt;
&lt;h4 id=&#34;jamming&#34;&gt;Jamming&lt;/h4&gt;
&lt;p&gt;Jamming通过发出大量的noise来影响原本的通信，影响availability &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;例如屏蔽Wifi信号 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;也可以用在合法的渠道上，比如用在考场或者需要阻断网络的地方 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;sniffing&#34;&gt;Sniffing&lt;/h4&gt;
&lt;p&gt;Sniffing是来监听其他用户的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Network interface card (NIC 网卡)必须设置在 &lt;code&gt;promiscuous mode&lt;/code&gt; 来获取所有的包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可以用来 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;偷听数据包中没有加密的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;捕捉信息进而使用relay attack &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spoofing&#34;&gt;Spoofing&lt;/h4&gt;
&lt;p&gt;通过伪装来进行攻击，可以修改的内容 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application layer: DNS address, e.g., an URL, an email address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Network layer: IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Link layer: MAC address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spoofing的种类 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Email spoofing: phising &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Text message spoofing: smishing &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Call ID spoofing &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;URL spoofing: phishing website &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;DNS spoofing: cache poisoning &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;IP address spoofing: change the source address in an IP packet &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;MAC spoofing: change the MAC address of NIC &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;model-of-network-security&#34;&gt;Model of Network Security&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_10-39-28_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;cryptographic-protocol&#34;&gt;Cryptographic protocol&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_10-52-17_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;A, B都有自己的symmetric key (K_A, K_B), 同时A想要生成一个共同的key并且分享给B &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A发送给K，用E_A加密的新key K_AB，同时指示这是A与B的共同Key &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;K返回给A 用E_B加密的共同Key K_AB以及标识这个Key是由ID_B加密的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;A将E_B(K_AB)以及加密的数据发送给B，B就可以用自己的E_B先解密，然后再用得到E_AB来解密数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_10-52-42_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Attacker通过拦截并修改A发送给K的请求，从而可以获取K_AB的值，进而可以监听所有的请求 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>NSE Week 2:  TCP/IP protocol architecture, sniffing and traffic analysis</title>
        <link>https://ginkgo.org.cn/posts/nse_week_2_tcp_ip_protocol_architecture_sniffing_and_traffic_analysis/</link>
        <pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_2_tcp_ip_protocol_architecture_sniffing_and_traffic_analysis/</guid>
        <description>&lt;h2 id=&#34;nse-week-2-tcp-ip-protocol-architecture-sniffing-and-traffic-analysis&#34;&gt;NSE Week 2:  TCP/IP protocol architecture, sniffing and traffic analysis&lt;/h2&gt;
&lt;h3 id=&#34;tcp-ip-protocol-architecture&#34;&gt;TCP/IP protocol architecture&lt;/h3&gt;
&lt;h4 id=&#34;什么是网络协议&#34;&gt;什么是网络协议？&lt;/h4&gt;
&lt;p&gt;Protocol 就是一组相同通信层上的通信规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;主要的内容： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Syntax：通信信息的格式 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Semantics：如何控制信息以及错误 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Timing：传输以及数据交换的速度，以及次序 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-ip-模型&#34;&gt;TCP/IP 模型&lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-16-56_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;每一个协议都作为Alice &amp;amp; Bob在相同层上面的通信规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们用一个例子来简单概述一下每一层的作用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如Alice想要发一个快递给Bob，那么快递里的货物就是Application，是Bob需要使用的物品； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;那么Transport layer就是是否需要给快递上保险，TCP就是上保险，UDP就是不上保险，如果东西贵重，那么就要TCP，如果丢了也没关系就用UDP &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;接下来快递发出来了，快递单上面要写地址，地址就是IP地址也就是Internet layer的header的双方的IP地址，xx省xx市xx小区这些就是一个个网络，Internet layer就负责进行routing路由，来找到发往这些区域的路径 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Network access就是邮编，在中国没有很大的体现，但是在英国，每一幢楼都对应了一个邮编，且是全英唯一的，也就是网络层的MAC地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;最后Physical物理层就是用飞机，高铁，轮船等方式送货，也就对应了，光纤，双绞线这些传输方式 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接着我们用一个具体的HTTP通信的例子来描述一些细节 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;HTTP是一个应用层的协议，那么通信的双方都将是应用层，而实际传输到对方应用层的应用上，就需要层层封装信息，然后由路上的路由器，交换机进行拆包之后一步步传递。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-24-21_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-27-57_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;网关和路由器会根据IP header进行路由 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-28-33_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;sniffing&#34;&gt;Sniffing&lt;/h3&gt;
&lt;p&gt;Sniffing 嗅探，attacker通过监听网络中的流量来获取他们想要的信息，甚至做出修改。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;当然也可以用于网络的debug和诊断。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Network interface card (NIC 网卡)必须设置在 &lt;code&gt;promiscuous mode&lt;/code&gt; 来获取所有的包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可以用来 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;偷听数据包中没有加密的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;捕捉信息进而使用relay attack &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;promiscuous-mode&#34;&gt;Promiscuous mode&lt;/h4&gt;
&lt;p&gt;我们的网卡network interface card (NIC) 有两种模式： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Promiscuous 不加选择的模式:获取所有网络中的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Non-promiscuous：丢弃所有不经过自己的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要实现嗅探，就必须设置为 Promiscuous mode &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同时我们必须处于Hubs或者WiFi的网络条件下，因为这样才能收到因为广播而接受到的所有数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如交换机这种拥有单独的广播域的就不行，无法捕捉到信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;active-interception-port-mirroring&#34;&gt;Active Interception - port mirroring&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Port Mirroring&lt;/code&gt; 也被称作  &lt;code&gt;SPAN (Switch Port Analyser)&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过配置交换机，使其将一对port（或者整个VLAN）所交换的信息，拷贝一份传输到SPAN ports，进而加以分析利用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;好的用途：网络诊断，入侵检测分析 &lt;!-- raw HTML omitted --&gt;
恶意的用途：当攻击者可以通过物理连接这台交换机，他们就可以看到所有的传输流量 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;active-interception-network-tapping&#34;&gt;Active Interception: network tapping&lt;/h4&gt;
&lt;p&gt;Network tapping就是将原本直连的两台设备，连入TAP后，可以访问他们之间的通信，从而加以分析与利用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;TAP = Traffic Access Point or Test Access Point 是物理层的一个设备 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-44-56_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;原本的连接方式：直连 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-47-39_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;连在Network TAP上之后，就可以用Wireshark来进行监听了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-48-10_screenshot.png&#34; width=&#34;600px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其具体的原理就是通过RJ45线上的引脚进行连接，Pins1 &amp;amp; Pins2 用于转发数据;Pins3 &amp;amp; Pins6 用于接收数据 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-50-50_screenshot.png&#34; width=&#34;300px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TAP A 接口的Pins3 and Pins6 （接受数据）分别来与Host A &amp;amp; Host B 的Pins1 和 Pins2 (传输数据）相连接，使HostA传输给HostB的数据都由TAP A所接受 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HostA_pins1 -&amp;gt; TapA_pins3 -&amp;gt; HostB_pins1 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;HostA_pins2 -&amp;gt; TapA_pins6 -&amp;gt; HostB_pins2 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TAP B 接口的Pins3 and Pins6 （接受数据）分别来与Host A &amp;amp; Host B 的Pins3 和 Pins6（接收数据）相连接，使HostB传输给HostA的数据都由TAP B所接受 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HostA_pins3 -&amp;gt; TapB_pins3 -&amp;gt; HostB_pins3 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;HostA_pins6 -&amp;gt; TapB_pins6 -&amp;gt; HostB_pins6 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从而使TAP_A来接收所有发出的数据，TAP_B则会接收所有接收的数据，一切都会被捕捉 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_21-57-42_screenshot.png&#34; width=&#34;500px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;从而使所有AB之间的数据都可以被我们的分析软件所捕捉和利用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-00-55_screenshot.png&#34; width=&#34;500px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;不过也可以使用Bypass mode绕过模式来停止复制转发 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-02-58_screenshot.png&#34; width=&#34;500px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;vampire-taps&#34;&gt;Vampire taps&lt;/h4&gt;
&lt;p&gt;所谓的“顺着”网线，如下图所示，直接用RJ-45的线实现TAP,海底电缆也可以如此TAP &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-04-18_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;warxing&#34;&gt;WarXing&lt;/h4&gt;
&lt;p&gt;使用多种设备进行捕捉 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-06-27_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;rouge-access-point&#34;&gt;Rouge Access Point&lt;/h4&gt;
&lt;p&gt;Access point一般是用于创造WLAN供其他设备进行无线连接的设备，一般用于企业，因为其覆盖面积较广，与家用的无线路由器不同的是，其一般没有什么管理功能(e.g., Access control)，只是单纯为了连接 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么Route Access Point就是一个attacker创造的伪装成合法的WiFi来引诱用户连接，从而可以获取用户之间的通信。一般来说attacker会模仿WFi的SSID以及BSSID来进行伪造 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-13-07_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;traffic-analysis&#34;&gt;Traffic Analysis&lt;/h3&gt;
&lt;h4 id=&#34;data-acquisition&#34;&gt;Data Acquisition&lt;/h4&gt;
&lt;p&gt;经过Sniffing之后，我们收集了大量的数据，接下来我们就需要分析与理解这些数据: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Who is talking to whom about what? &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;libpcap-library-of-packet-capture&#34;&gt;Libpcap：Library of packet capture&lt;/h4&gt;
&lt;p&gt;Libpcap 就是用来分析获取数据的API &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;虽然名字中带有packet，实际上是用来capture frames，包括所有的数据链路层到应用层的数据 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Network sniffers可以分析捕捉的网络流量，并保存在 &lt;code&gt;.pcap&lt;/code&gt; 文件当中 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其核心是BPF： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;bpf-berkeley-packet-filter&#34;&gt;BPF, Berkeley packet filter&lt;/h4&gt;
&lt;p&gt;之前存在的问题：我们之前提到过，sniffer在网卡开启了 promiscuous mode之后，会捕获所有的包，但是其中充斥着大量的我们不想要的数据包，那么接下来进行分析的时候，我们就会花费大量的CPU资源在这些不想要的数据包上 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;BPF解决了这个效率问题，通过： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Buffer缓存指定的部分之前就进行过滤 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Filter可以由用户自定义 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;比之前的packet capture tool快了100倍 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BPF的实现&lt;/p&gt;
&lt;p&gt;主要由两个部分： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network tap 用来sniffer获取数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Packet filter 用来对数据包进行提前过滤，越早越好 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-58-29_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BPF filter model&lt;/p&gt;
&lt;p&gt;BPF的过滤器适用directed acyclic control flow graph &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_22-59-24_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过上图我们可以看到filter是如何通过各种用户自定义的条件来进行筛选，从而决定是buffer还是丢弃 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcpdump&#34;&gt;Tcpdump&lt;/h4&gt;
&lt;p&gt;大家耳熟能详的工具Tcpdump就是基于BPF来进行开发的，其提供了强大的功能来进行数据包分析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;wireshark&#34;&gt;Wireshark&lt;/h4&gt;
&lt;p&gt;Wireshark则提供了更加利于使用的GUI界面 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;traffic-analysis&#34;&gt;Traffic analysis&lt;/h4&gt;
&lt;p&gt;有三种traffic analysis的方法 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Protocol analysis: 分析数据包中的协议信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Packet analysis: 综合分析数据包中的多层协议 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Flow analysis: 分析一系列连贯的数据包：Flow &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Protocol analysis&lt;/p&gt;
&lt;p&gt;我们为什么要进行协议分析： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解数据是如何传输的，以及其中协议需要设置的参数是如何的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;解析其中的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Packet analysis 数据包分析&lt;/p&gt;
&lt;p&gt;我们为什么需要数据包分析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过一系列传输的数据包来观察协议 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;使用数据包以及过滤器来识别感兴趣的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据包分析需要做些什么？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于网络专家来说： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检测网络是否健康 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于安全专家来说： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被动的进行漏洞测试（被动地等着漏洞或者攻击出现） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于攻击者来说 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;被动的攻击工具 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;窃取信息（密码） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现上和之前说的一样，我们分析的实质上是Frame，其作为链路层的数据封装形式，包含了所有向上的header,能够更好的反应更多的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_23-11-14_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;用于分析的技术
: -   Pattern matching &lt;!-- raw HTML omitted --&gt;
-   通过匹配特定参数的值来分析检测特定的数据包，例如 if source IP address = foo &lt;!-- raw HTML omitted --&gt;
-   Parsing protocol fields &lt;!-- raw HTML omitted --&gt;
-   从不同layers的header中获取信息，例如Wireshark可以看到整一个IP header的信息 &lt;!-- raw HTML omitted --&gt;
-   Packet filtering &lt;!-- raw HTML omitted --&gt;
-   通过protocol来筛选想要分析的数据，比如只查看ICMP包的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flow analysis 流量分析&lt;/p&gt;
&lt;p&gt;流量分析顾名思义就是对于一组的数据包进行分析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;为什么我们要进行流量分析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;寻找特征流量（重复的通信） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;单独隔离可疑的活动并且丢弃不相关的信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;分析更高层的协议，比如HTTP，SSL &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;从流量提取整体数据（比如提取出整一个传输的二进制文件） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Wireshark中我们可以选择HTTP/UDP/TCP Stream进行分析 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_23-17-04_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其他流量分析技术 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;罗列通信以及流量 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以根据特征信息对数据流进行分类提取 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据流导出 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导出之后在未来用作他用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件以及数据挖掘 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从数据流分析中拼接挖掘出有用的文件以及信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List conversations and flows &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List all conversations and/or flows within a packet capture or only specific flows based on their characteristics &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Export a flow &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Isolate a flow or multiple flows, and store the flow(s) of interest to disk for further analysis &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File and data carving &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract files or other data of interest from the reassembled flow &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>NSE Week5: Firewalls</title>
        <link>https://ginkgo.org.cn/posts/nse_week5_firewalls/</link>
        <pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week5_firewalls/</guid>
        <description>&lt;h2 id=&#34;nse-week5-firwalls&#34;&gt;NSE Week5: Firwalls&lt;/h2&gt;
&lt;h3 id=&#34;how-to-protect-edges-of-the-internet-or-internal-network&#34;&gt;How to protect edges of the Internet or Internal network?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Local area networks (LANs)&lt;/code&gt;, &lt;code&gt;personal area networks (PANs)&lt;/code&gt;, &lt;code&gt;wireless local area networks (WLANs)&lt;/code&gt;, 以及 &lt;code&gt;wireless sensor networks (WSNs)&lt;/code&gt; 都属于Internet的最边缘，大多都是个人组织或者家庭所拥有的内部网络，我们可以把保护这样的互联网边缘网络或者内部网络比喻成保卫一座城市，通过三层的保护措施来防止入侵: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Perimeter Security (边界安全): 通过减少入口来控制进出，派遣武装守卫把守，同时要求进出的人员拥有预先设定的证明 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Street patrolling (街道巡逻): 派遣武装守卫定期上街巡逻，来识别入侵者 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;House cleaning (入室排查): 派遣专业的安全专家挨家挨户的排查外来危险品以及安全漏洞 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三道对于城邦的包围也就可以对应网络安全中的三项技术： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perimeter Security &amp;lt;-&amp;gt; Firewall: 防火墙 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Street patrolling &amp;lt;-&amp;gt; Intrusion detection systems: 入侵检测 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;House cleaning &amp;lt;-&amp;gt; Anti-malicious-software: 杀毒软件 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而我们今天要讲的，就是内网的第一道防线，防火墙。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在正式介绍防火墙之前，我们最后再介绍一下针对边界攻击的防御理念：5Ds of Perimeter Security: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Deter -&amp;gt; Detect -&amp;gt; Deny -&amp;gt; Delay -&amp;gt; Defend &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Deter
: -   组织入侵的发生（在其发生之前进行组织），即使用 &lt;code&gt;fencing 围栏&lt;/code&gt;, &lt;code&gt;lighting 完全照明&lt;/code&gt;, &lt;code&gt;signs 出入签名&lt;/code&gt; 等方式对犯罪者进行被动威慑，从最开始就扼杀入侵的念头 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使攻击变得困难，让attacker主动放弃 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detect
: -   检测入侵的行为，例如 &lt;code&gt;CCTV 监控&lt;/code&gt;, 用来监控和记录所有的入侵行为 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intrusion detection software &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Traffic analysis and machine learning to detect abnormities &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deny
: -   拒绝未经授权的访问，通过一些认证系统来主动拒绝入侵的行为，其中防火墙就属于 &lt;code&gt;Deny&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authentication, authorisation, freshness &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay
: -   延缓入侵的速度，通过设置障碍来延长入侵的时间，迫使入侵者放弃或者给予安全团队更多的时间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加密钥的长度 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defend
: -   主动地对入侵者进行打击，通过安全团队或者警方的行动来组织入侵 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;what-is-a-firewall&#34;&gt;What is a firewall?&lt;/h3&gt;
&lt;p&gt;什么是防火墙，它有什么作用呢？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;防火墙是一台主机或者一个网络服务，架设于 &lt;code&gt;内网&lt;/code&gt; 和 &lt;code&gt;外部网络&lt;/code&gt; 之间，用来： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防止坏事发生 (内部泄露机密到外部，外部攻击内部系统) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时使正常的行为不收到影响(员工正常访问外网交互) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_10-26-51_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;防火墙的主要功能&#34;&gt;防火墙的主要功能&lt;/h4&gt;
&lt;p&gt;主要工作：Access control 访问控制 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立一道屏障，所有方向上的网络流量都需要经过防火墙 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;防火墙会预设一系列安全协议来对所有这些经过的流量进行审计和控制（可以对异常的行为设置警报） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;可以对IP packet或者更早层的数据进行过滤 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时也可以部署NAT(network Address Translation)服务以及使用监控等服务 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;也可以通过IPSec来实现VPNs &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;防火墙的技术&#34;&gt;防火墙的技术&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;What? -&amp;gt; Service Control&lt;/dt&gt;
&lt;dd&gt;通过 &lt;code&gt;transport layer ports&lt;/code&gt; 决定 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;决定 &lt;!-- raw HTML omitted --&gt;What types of Internet services&lt;!-- raw HTML omitted --&gt; 可以通过 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Where? -&amp;gt; Direction control&lt;/dt&gt;
&lt;dd&gt;通过 &lt;code&gt;{Source adddress -&amp;gt; Destination address}&lt;/code&gt; 决定 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;决定特定方向的流量是否可以通过 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Who? -&amp;gt; User control&lt;/dt&gt;
&lt;dd&gt;通过 &lt;code&gt;{IP address -&amp;gt; Transport layer port}&lt;/code&gt; 决定 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;决定什么服务可以被什么用户所访问 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;How? -&amp;gt; Behaviour control&lt;/dt&gt;
&lt;dd&gt;控制服务应该被如何使用，比如一些核心的服务只能在特定的时间被使用 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;防火墙的类型&#34;&gt;防火墙的类型&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;Positive filter&lt;/dt&gt;
&lt;dd&gt;主动过滤，白名单过滤，只允许符合规则的数据通过，其他都不可以通过 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;假设所有人都是坏人 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;主动地选定谁是好人，允许其通过 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Negative filter&lt;/dt&gt;
&lt;dd&gt;被动过滤，黑名单过滤，不允许不符合规则的数据通过，其他都可以通过 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;假设所有人都是好人 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;被动地，在发现了坏人之后，将其过滤 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;根据防火墙的类型，过滤的策略也会不一样: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个或多个协议头 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Payload的内容 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;一串数据包的pattern &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;防火墙的限制&#34;&gt;防火墙的限制&lt;/h4&gt;
&lt;p&gt;防火墙也存在很多的限制，要不怎么需要多道的保护呢 &lt;!-- raw HTML omitted --&gt;
其无法保护: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绕过过滤规则的进攻 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;在外部被感染的设备 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;通过外部的WiFi网络进行的攻击 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;来自内部的威胁 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sneakernet&lt;/p&gt;
&lt;p&gt;球鞋网络，顾名思义就是使用物理媒介运输数据，而非通过网络，记得以前上计算机网络的时候，老师就提到过，在网络不稳定或者质量较差的时候，往往还是使用物理传输更为高效 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么这种时候 &lt;code&gt;Firewall&lt;/code&gt; 就完全失效了，因为其所针对的都是网络数据包，物理传输完全不在范畴之内 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WiFi&lt;/p&gt;
&lt;p&gt;WiFi之前的数据共享没办法集中到Firewall进行管理 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_11-24-28_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;packet-filtering-firewall&#34;&gt;Packet filtering firewall&lt;/h3&gt;
&lt;p&gt;What is a packet filtering firewall? &lt;!-- raw HTML omitted --&gt;
&lt;code&gt;基于数据包过滤的防火墙&lt;/code&gt; 是最基础也是最普遍使用的防火墙，其作用在两种数据包上： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ingress packets: 从外网到内网的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Egress packets: 从内网到外网的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时也对应 &lt;code&gt;ingress filtering&lt;/code&gt;, &lt;code&gt;egress filtering&lt;/code&gt; 两种过滤手段： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Packet filtering firewall&lt;/code&gt; 通过预设一系列的规则来决定是否让某一种数据包通过，而这些规则都是用来检测 &lt;code&gt;IP headers&lt;/code&gt; 以及 &lt;code&gt;TCP headers&lt;/code&gt;, 对于应用层所放入的payload一点都不感兴趣 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Packet filtering firewall&lt;/code&gt; 也分成 &lt;code&gt;stateless filtering&lt;/code&gt; 以及 &lt;code&gt;stateful filter&lt;/code&gt;,主要的区别就在于应用的规则是否会审计网络连接的状态，即判断一个数据包的去留是否会参考之前的记录，也可以说是考虑了上下文 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_22-07-19_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;stateless-filtering-无状态过滤&#34;&gt;Stateless filtering 无状态过滤&lt;/h4&gt;
&lt;p&gt;其无状态的过滤主要体现在： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对所有收到的包都一视同仁，单独决断是否放过 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;以前的记录不会影响对改数据包的判断 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们之前提到过 &lt;code&gt;Packet filtering firewall&lt;/code&gt; 主要是通过审查 &lt;code&gt;IP headers&lt;/code&gt; 以及 &lt;code&gt;TCP headers&lt;/code&gt;, 那么细化来说 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;是IP header中的： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Destination IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;other fields: defines the transport protocol &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及 TCP/UDP header 中的： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source port &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Destination port &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过设定对以上信息的规则来实现过滤审查，那么所有的这些规则都会被记录到 &lt;code&gt;ACL (access control list)&lt;/code&gt; 访问控制列表上. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_20-46-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;过滤规则&lt;/p&gt;
&lt;p&gt;通常来说，ACL上定义的规则会被 &lt;code&gt;从上至下&lt;/code&gt; 依次与审查的数据包进行匹配，然后执行对应的动作。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认规则&lt;/p&gt;
&lt;p&gt;之前我们提到过主动过滤和被动过滤，在这里我们展开讲讲 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Default = discard 默认丢包
: -   主动过滤（主动的选择可以通过的名单） &lt;!-- raw HTML omitted --&gt;
-   白名单过滤 &lt;!-- raw HTML omitted --&gt;
-   禁止未经明确许可的行为 (That which is not expressively permitted is prohibited) &lt;!-- raw HTML omitted --&gt;
-   更为稳健和保守的政策 &lt;!-- raw HTML omitted --&gt;
-   所有被允许的服务都需要一个个添加 &lt;!-- raw HTML omitted --&gt;
-   对用户不太友好（就像我们之前所提到的，用户的端口更为灵活，利用白名单一个个加很不明显） &lt;!-- raw HTML omitted --&gt;
-   用户的可见性随着规则的增加而降低 &lt;!-- raw HTML omitted --&gt;
-   相对的，对企业和政府来说更加友好 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Default = forward 默认放行
: -   被动过滤（默认不用过滤，直到被动的知道了有威胁才过滤） &lt;!-- raw HTML omitted --&gt;
-   黑名单过滤 &lt;!-- raw HTML omitted --&gt;
-   没有明确禁止的就是允许的（That which is not expressively prohibited is permitted） &lt;!-- raw HTML omitted --&gt;
-   较于白名单更不安全 &lt;!-- raw HTML omitted --&gt;
-   每当出现新的威胁需要更新记录到黑名单上 &lt;!-- raw HTML omitted --&gt;
-   通常被开发的组织采纳，比如大学 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Granularity of filtering 过滤的颗粒度
: 除了前面提到那几个常见的匹配规则，还有一些内容可以实现更精确的过滤，根据firewall使用的不同的routers来决定 &lt;!-- raw HTML omitted --&gt;
-   在入站时进行过滤 &lt;!-- raw HTML omitted --&gt;
-   在出站时进行过滤 &lt;!-- raw HTML omitted --&gt;
-   在入站和出站同时进行过滤 &lt;!-- raw HTML omitted --&gt;
-   检查数据包的其他控制区域 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ACL实例&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set A&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_22-39-21_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们先来看这第一组规则 &lt;!-- raw HTML omitted --&gt;
&amp;rsquo; * &amp;rsquo; = ANY &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;第一条
: 所有与 &lt;code&gt;SPIGOT&lt;/code&gt; 的通信都被禁止了 &lt;!-- raw HTML omitted --&gt;
1.  两个端口号都没有指定，说明这条规则没有方向（端口号的大小指示了客户端和服务端） &lt;!-- raw HTML omitted --&gt;
2.  只指定了 &lt;code&gt;SPIGOT&lt;/code&gt; 的IP地址，说明到SPIGOT的数据包和从SPIGOT来的数据包都会被禁止，也许是以前有过恶意行为，所以被整一个禁止了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;第二条
: 所有内网开启的SMTP服务都允许被外网所连接 &lt;!-- raw HTML omitted --&gt;
1.  指定了IP地址以及对应的端口号25， 是SMTP服务所对应的端口 &lt;!-- raw HTML omitted --&gt;
2.  这里是允许内网的邮件系统收取邮件 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set B&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
默认丢弃所有的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一条默认丢弃规则，一般来说是放在最下面 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;默认丢弃就是我们之前说的主动过滤，白名单过滤 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;在此之上就是定义的可以通过的规则 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set C&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-30_09-53-39_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与rule set A类似，这次是允许内网所有的主机向外发邮件 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;但是存在两个漏洞 &lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;攻击者也可以修改他们服务端口号到25，这样就可以使泄密的数据绕过防火墙策略 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;attacker也可以修改他们的客户端端口号到25，从而绕过防火墙策略实现入侵，连接内网的服务 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set D&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-30_09-55-57_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;与之前三条不同的是，Rule set D多了flags的信息，主要运用于TCP的连接的判断 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一条和之前Rule set C一样，是允许内网的主机发送邮件到外网 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;第二条则做了更多的限制，要求进入内网的邮件需要是TCP ACK数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set E&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-30_09-58-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一条，允许内网的主机向外发送数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;第二条，允许回复的ACK包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;第三条，允许内网的服务对外网的客户端进行回复 (port &amp;gt; 1024) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;其他常见过滤规则&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ingress packet 的source IP address 是内网的地址
: 我们知道防火墙是建立在内网和外网之前的，因此 &lt;code&gt;Ingress packet&lt;/code&gt; 只有可能是从外网的地址到内网的地址，这类不寻常的数据包通常都是被恶意修改的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定了路由器的数据包
: 这类数据包通常也是被恶意修改的来绕过防火墙规则的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Payload特别小的数据包
: 这类特别小的数据包，很有可能是用来分离会被审查的信息，以此来绕过防火墙规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;来自外网地址的用于控制的数据包
: 有一些数据包是专门用来进行内网设备管理和控制的，比如DHCP, Bootp, TFTP, NFS, 都是来给内网下发指令或者发送配置的，这些数据包如果来自外网很有可能就是恶意的，应该丢弃 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stateless filtering的优劣势以及漏洞&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Advantages&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现 &lt;code&gt;stateless filtering&lt;/code&gt; 比较方便 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;规则对用户比较透明，速度也很快 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Disadvantages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没办法对更高层的数据进行过滤，因此没办法部署对于应用层的漏洞的过滤 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;一些恶意的指令（存在于payload中）无法被过滤 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果一个客户端端口号被允许通过（&amp;gt;1024）,那么其所有的数据包都会被放行 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志记录的信息较少（因为本来指定规则以及审核数据包所需要用到的数据就很少） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;无法部署高级的认证系统 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;同样因为缺乏高层的审核功能 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vulnerabilities&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法检测出TCP/IP被修改过的数据，spoofing attack &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;无法应用更高层的审核机制，导致数据内容被修改后即可绕过规则 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;由于用于过滤规则制定的变量较少，因此错误的配置很容易就发生了，从而招致入侵 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;攻防实例&lt;/p&gt;
&lt;p&gt;接下来我们来看一些攻防的实例，来看看stateless filtering能抵御哪些攻击 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IP address spoofing&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IP address spoofing&lt;/code&gt; 通常都是通过修改IP地址来欺骗服务器其真正的主机地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Countermeasure
: -   我们可以制定一些规则来避免一些不合理的数据包，例如 &lt;!-- raw HTML omitted --&gt;
-   Ingress（从连接外网的interface传向连接内网的interface）的数据包本来应该是外网到内网的地址，可如果source IP address变成了外网的地址，那就有问题了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source routing attack&lt;/p&gt;
&lt;p&gt;Source routing是一种特殊的路由机制，即发送方可以指定到达接收方的路由（通常来说，我们只是指定gateway，然后让路由器去寻找路由） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么Attacker可以利用这个机制来伪造数据包的IP address绕过过滤规则，同时使用source routing指示数据包真正的路径和方向 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Countermeasure
: -   丢弃所有使用source routing的数据包 &lt;!-- raw HTML omitted --&gt;
-   禁止这些指定了路由的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tiny fragment attacks&lt;/p&gt;
&lt;p&gt;就像我们之前提到过的，攻击者可以将数据包分离成多个小的数据包，将所需要的信息分散到小的数据包当中，而防火墙往往只会检查最开始的数据包片段，由此可以绕过检测规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Countermeasure
: -   防火墙可以设定一些规则比如，丢弃所有分散化的TCP数据包，或者在进行审核之前先重组这些数据包片段 &lt;!-- raw HTML omitted --&gt;
-   规定第一个数据包片段必须含有足够多的数据便于防火墙审核 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;补充知识&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP port numbers&lt;/p&gt;
&lt;p&gt;我们再来复习一下 &lt;code&gt;TCP port numbers&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;TCP port number 一般用来指示运行的应用或者服务： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端（本地的）应用的端口号一般小于1024，这些端口号一般都已经被占用了，我们自己在写程序的时候应该避免使用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;而其他1024~66535的端口号一般被用于客户端（外部的）程序 (16 bits端口号) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还记得我们之前的送快递的例子吗，我们说传输层是上保险，IP地址是送货地址，网络层是找送货的地图，MAC地址是邮编，物理层是送货，那么这个端口号就是写的名字，表明是什么服务传输数据给什么服务 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_21-04-52_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;从中，我们又看出了一些 &lt;code&gt;stateless filtering&lt;/code&gt; 的局限，用户的端口号千变万化，那么就会设置一下较为宽松的规则，从而引发漏洞 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to block an entire subnet?&lt;/p&gt;
&lt;p&gt;Use subnet address with CIDR prefix or subnet masks，使用子网划分的后缀 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_22-09-37_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;stateful-firewall&#34;&gt;Stateful firewall&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Stateful filtering&lt;/code&gt;, 也叫做 &lt;code&gt;connection-state filtering&lt;/code&gt;,通过追踪外部和内部的主机的连接来决定出入规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Connection state&lt;/dt&gt;
&lt;dd&gt;当我们说连接的是，指的就是一个TCP连接的状态，是否已经建立（UDP不建立连接） &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;所有这些建立的TCP连接都会存入 &lt;code&gt;state table&lt;/code&gt; (但如果保存了大量的连接，就会出现TCP SYN Flooding 这样的攻击) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_21-33-38_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How stateful firewall works?&lt;/p&gt;
&lt;p&gt;当有ingress或者egress的数据包通过的时候，firwall会查找 &lt;code&gt;state table&lt;/code&gt; 来判断他们是否属于被记录的connection &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果属于一个连接，发行，并记录信息（比如TCP sequence number，可以用来防御 &lt;code&gt;TCP session hijacking&lt;/code&gt; ） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果不属于，再判断这是否是一个 &lt;code&gt;TCP SYN packet&lt;/code&gt; 用来建立一个连接: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是的话就新开一条记录用来记录这个新的连接 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果不是的话，那就丢弃 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Drawbacks of stateful firewall?&lt;/p&gt;
&lt;p&gt;我们可以同时使用 &lt;code&gt;stateful filtering&lt;/code&gt; 以及 &lt;code&gt;stateless filtering&lt;/code&gt;,因为从上面的描述中，也许有一些朋友已经嗅到了一丝漏洞的味道，存储 -&amp;gt; Emm -&amp;gt;flooding lol. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;查询连接，判断从属，记录信息等等这些动作都需要消耗大量的存储空间和CPU资源，因此很容易遭受攻击，因此可以选择只保存有限的信息，以及一段时间内的连接来减少消耗 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IPTables&lt;/p&gt;
&lt;p&gt;IPtables是Linux的 stateful packet filtering工具，其主要的功能有两个： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Tables
:&lt;/p&gt;
&lt;p&gt;Chains
: 定义了一系列的过滤规则用来处理经过的数据包，然后做出响应的决定（accept or drop） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stateful-firwall-and-proxy-firewall&#34;&gt;Stateful firwall and proxy firewall&lt;/h3&gt;
&lt;h4 id=&#34;circuit-level-gateway-proxy-firewall&#34;&gt;Circuit-level gateway/proxy firewall&lt;/h4&gt;
&lt;p&gt;Circuit-level gateway/proxy firewall 位于 &lt;code&gt;session layer&lt;/code&gt; 会话层，根据网络模型的不同，有一些教材也有说是跑在 &lt;code&gt;Transport layer&lt;/code&gt; 传输层的。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;也被称为 &lt;code&gt;circuit gateways&lt;/code&gt;, &lt;code&gt;transparent proxy firewall&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;
其主要的目标是对内外网想要建立的连接进行审核，通过 &lt;code&gt;packet filters&lt;/code&gt; 与 &lt;code&gt;circuit gateways&lt;/code&gt; 的结合可以构造起一个 &lt;code&gt;dynamic packet filter&lt;/code&gt;  &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何实现连接的过滤呢？&lt;/p&gt;
&lt;p&gt;主要是通过 &lt;code&gt;relay/proxy&lt;/code&gt; 连接，gateway会分别与 &lt;code&gt;server side&lt;/code&gt; 以及 &lt;code&gt;client-side&lt;/code&gt; 建立独立的连接 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在packet filter，无论是 &lt;code&gt;stateful&lt;/code&gt; 或者是 &lt;code&gt;stateless&lt;/code&gt; 中，服务端和客户端的连接都是直连的，而在 circuit-level gateway中实现的relay可以很好的隐藏server和client的信息，外网只能观察到gateway的IP地址，而不知道具体连接的内网设备的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_15-27-07_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;上图就是当外网的client想要连接内网的服务，就会先与gateway建立连接，gateway会维护一个有效连接的表，如果连接是被允许的，那么就会继续建立连接，gateway会用公网IP地址与外网的client建立一个TCP连接，再与内网的设备用内网IP建立TCP连接，之后就不再过滤数据，只是做煎蛋的转发。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;application-level-proxy-firewall&#34;&gt;Application-level proxy firewall&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Application gateways&lt;/code&gt;, also referred to as &lt;code&gt;application-level gateways (ALG)&lt;/code&gt; or &lt;code&gt;proxy servers&lt;/code&gt;, 是安装在指定设备上的软件包，像proxy一样，用来为内网用户处理来自外网的服务请求。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;ALG可以被配置为应用的特定特征进行过滤，例如MIME，或者SQL格式来决定数据包的payload是否合法。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过监测分析这些payload，ALG可以检测出恶意代码还有可疑的数据包，进而屏蔽可以的IP地址以及端口号，这些处理将会要求ALG服务器有大量的运算处理和存储的需求。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;ALG采用白名单的形式，需要为不同的applications配置不同的审核机制，否则就不能进行传输 &lt;!-- raw HTML omitted --&gt;
If gateway does not implement the proxy code for a specific application, then the service is not supported and cannot be forwarded across the firewall &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何连接到ALG服务?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户使用TCP/IP应用来进行连接，例如Telnet/FTP &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ALG会要求用户提供想要连接远程用户的名字 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;用户提供有效的user ID以及相关的认证信息 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ALG会relay TCP segment来进行监测并转发 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ALG的优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相较于 &lt;code&gt;packet filtering firewalls&lt;/code&gt; 更为安全 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;只需要监测一小部分特定的应用即可 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;更方便的记录日志以及监测应用层的payload &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ALG的缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一个服务都需要进行proxy &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;需要大量的计算处理以及消耗大量的存储空间 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bastion-hosts-and-gateways&#34;&gt;Bastion hosts and Gateways&lt;/h3&gt;
&lt;p&gt;我们之前提到的 &lt;code&gt;Application gateway&lt;/code&gt; 出于内外网之前充当转发的作用，但是相对的，ALG暴露在外网这种，因此我们需要对其提供更多的保护，一种就是 &lt;code&gt;Tursted Operating Systems (TOS)&lt;/code&gt;, 还有一种就是我们本章将要提到的 &lt;code&gt;Bastion hosts&lt;/code&gt; 堡垒机。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Bastion hosts堡垒机将提供强大的防御措施，包括联合使用我们之前所提到过的 &lt;code&gt;application gateways&lt;/code&gt;, &lt;code&gt;circuit gatways&lt;/code&gt; 以及各种类型的firewalls，同时堡垒机安装了可以信任的操作系统TOS，只提供必要的程序功能，例如SSH, DNS, SMTP, authentication programs。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Bastion上的Proxy必须满足以下条件 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gateway software的开发必须使用小型的module，因为小型的module更加容易检查漏洞，并方便重复使用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;堡垒机必须对网络层的用户进行单独的身份认证，例如通过IP packet 中的 source IP address以及destination IP address，这将与更高层的验证分离开来进行身份认证 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;堡垒机需要尽可能少得去连接内网的主机，这样一旦堡垒机出现问题，波及到的主机也会减少 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;堡垒机需要记录所有的系统日志，包括TCP会话连接状态，这将帮助管理员发现问题 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;所有跑在堡垒机上的代理服务都需要独立运行，一旦一个gateway发生问题，只需要单独关闭即可 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;堡垒机应该避免将数据写入硬盘保存（只写入内存中？），避免恶意软件的写入 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;堡垒机上运行的gateway软件不需要给予管理员权限 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;bastion-host-case-study&#34;&gt;Bastion host case study&lt;/h4&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
AWS就是通过设置堡垒机以及其中的Gateway来对危险的SSH进行relay，避免暴露真正的Linux instance &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;firewall-location-and-configuration&#34;&gt;Firewall location and configuration&lt;/h3&gt;
&lt;h4 id=&#34;personal-firewall&#34;&gt;Personal firewall&lt;/h4&gt;
&lt;p&gt;个人防火墙的主要目的是控制用户电脑与外网的网络流量 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;位置：通常是安装在个人电脑或者路由器上的软件包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;主要作用： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拒绝未经许可的外部访问 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;监控出站流量来分析恶意软件的活动 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;host-based-firewall&#34;&gt;Host-based firewall&lt;/h4&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
Host-based firewall其实与personal firewall十分相似，区别我觉得就是personal firewall一般是用在普通用户所使用的操作系统上的，而Host-based firewall则更多的是服务器上的使用，但特点都是一机一wall &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;而我们之前提到的用来分割内外网的firewall我们称为network-based firewall，区别就在于起作用域不一样 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;位置：通常被安装在一个web服务器上 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Advantages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以根据主机的情况进行过滤规则的定制 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;可以根据企业不同的安全政策进行定制 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;可以防御内部以及外部的网络 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dmz-networks&#34;&gt;DMZ networks&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DMZ&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
位于两个防火墙中间的子网我们称为Demilitarised Zones (DMZ 非军事化区域？), 其可以是物理的也可以是逻辑子王 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外部的firewall保护DMZ网络来自外网的威胁 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;针对外网的连接 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部的firewall保护DMZ网络来自内部的威胁 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;保护那些直接从DMZ网络中发出的攻击，例如worms, rootkit, bots &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DMZ中还可以嵌套DMZ形成多层的DMZ，那么连接在最末端firewall的子网就是最安全的，相反，连接在最外侧的firewall就是最不安全的，因为他们只有一个firewall的保护，随着结构的增加和复杂化，安全系数也在提高，攻击者需要绕过一层层的过滤规则才能到达最末端的设备。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通常来说，一些不需要特别强的保护的服务器电脑和其他设备会被放到DMZ网络中，他们起码可以避免暴露在外网当中。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;例如我们可以把WAF和负载均衡这些功能性的服务器给放置在DMZ网络中 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;还有一些用于促进内外连接的服务器也会防止在DMZ中，例如企业网站，邮件以及DNS服务器 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_17-23-08_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;distributed-firewalls&#34;&gt;Distributed firewalls&lt;/h4&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
分布式的防火墙框架，将综合使用多种防火墙，比如单独的防火墙设备以及安装在各个server上的host-based firewall 以及 安装在各个用户系统上的 personal firewall &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Security monitoring&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;日志记录 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;防火墙统计数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;对于单独的用户的监控 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;cloud-firwalls&#34;&gt;Cloud firwalls&lt;/h4&gt;
&lt;p&gt;Virtual private cloud (VPC) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt; &lt;!-- raw HTML omitted --&gt;
&lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/azure/firewall/features&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Azure Firewall&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;firewall-summary&#34;&gt;Firewall summary&lt;/h3&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-27_16-26-23_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>NSE Week 3: Spoofing, flooding and amplification</title>
        <link>https://ginkgo.org.cn/posts/nse_week_3_spoofing_flooding_and_amplification/</link>
        <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_3_spoofing_flooding_and_amplification/</guid>
        <description>&lt;h2 id=&#34;spoofing-flooding-and-amplification&#34;&gt;Spoofing, flooding and amplification&lt;/h2&gt;
&lt;h3 id=&#34;spoofing&#34;&gt;Spoofing&lt;/h3&gt;
&lt;h4 id=&#34;arp-spoofing&#34;&gt;ARP spoofing&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Layer identifiers&lt;/p&gt;
&lt;p&gt;Routing是network communication中重要的一环，computer node在通信之前，需要知道自己在与谁联系，要通过什么路径去联系 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么layer identifier 就代表着每一个computer node &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internet Layer identifier: &lt;code&gt;IP address&lt;/code&gt; (assigned by users or by software, such as DHCP) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Link Layer Identifier: &lt;code&gt;MAC Address&lt;/code&gt; (hardware address, physical address) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP (Address Resolution Protocol)&lt;/p&gt;
&lt;p&gt;aims to translate from IP address to MAC address &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_11-05-46_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP request message generation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当有IP packet需要发出的时候，ARP就会被hardware driver 所调用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;首先获取IP destination address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后在ARP本地的 &lt;code&gt;translation table&lt;/code&gt; 中查找是否有对应得IP address : MAC address entry &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;有的话，就把48-bits的MAC address发送给 hardware driver &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;没有的话，就准备发送ARP请求，填充相关信息 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;sender MAC address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;sender IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;target IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;target MAC address (broadcast address: 00:00:00:00:00:00) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ARP request message在link layer被封装成frame 然后发送出去 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP request message reception&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目标节点将会回复其所包含的MAC address, （如果通信的是其他网络的节点，那么此处寻找的就是网关的MAC address) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;其他收到请求的节点会更新他们的 &lt;code&gt;translation table&lt;/code&gt; (IP address : MAC address entry) 然后丢弃这个包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP rely message reception&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;收到回复的节点也会更新他们的ARP cache &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP translation table (ARP table, ARP cache)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过ARP cache 来保存IP address : MAC address entry 来节省空间 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;表内的entry会 ageing &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ARP 是无状态协议，因此只要收到了request/reply 他们就会自动更新 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RARP (Reverse ARP)&lt;/p&gt;
&lt;p&gt;aims to translate from MAC address to IP address &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_11-06-13_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP spoofing attack&lt;/p&gt;
&lt;p&gt;ARP spoofing主要的目的就是污染原本的ARP cache，将Computer A存放的关于 Computer B的信息，改为attacker的，这样A在给B发frame的时候，就会发给attacker &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_10-49-32_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;countermeasure&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 &lt;code&gt;Arp cache&lt;/code&gt; 的过期时间, expire &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;一些系统通过unicast 来更新cache 表，而不是像之前那样无状态的更新 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Against countermeasure &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Attacker可以通过定期发送 ARP spoof packet (every ~40s) 来避免以上方法 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static ARP table 静态ARP表 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;每次启动加载到RAM中 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;没有ARP request主动发送 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Man-in-the-middle attack with ARP spoofing&lt;/p&gt;
&lt;p&gt;通过ARP spoofing 污染两/多台电脑的 &lt;code&gt;ARP cache&lt;/code&gt; ，使他们的通信destination都指向attacker，从而截取通信内容(attacker node 进而转发通信，因为它知道IP address所对应的正确的MAC address) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_10-53-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MAC flooding&lt;/p&gt;
&lt;p&gt;每个switch 会内置一个 &lt;code&gt;CAM (Content Addressable memory)&lt;/code&gt; 表，用于记录不同的MAC address所对应的port number &lt;!-- raw HTML omitted --&gt;
每当有frame 经过 switches, switch就会通过这个 table 来实现转发 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;MAC flooding就是使用大量的spoofed frame来填充switch 的转发表，从而占满 switch 所有的内存空间，使正常的frame的转发策略无法加入table，最终就会导致正常的frame 通信因为没有对应的port而 &lt;code&gt;被迫广播&lt;/code&gt; ，使attacker可以利用sniffer所监听到。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_11-04-54_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dhcp-spoofing&#34;&gt;DHCP spoofing&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DHCP (Dynamic Host Configuration Protocol)&lt;/p&gt;
&lt;p&gt;DHCP是用来自动的给其他的用户分配IP地址以及其他相关配置的（网关，DNS服务器等）协议 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Protocol operations
: 1.  Discovery &lt;!-- raw HTML omitted --&gt;
-   &lt;code&gt;client&lt;/code&gt; 广播 &lt;code&gt;DHCP Discovery message&lt;/code&gt; 来寻找server &lt;!-- raw HTML omitted --&gt;
2.  Offer &lt;!-- raw HTML omitted --&gt;
server单播提供IP给client &lt;!-- raw HTML omitted --&gt;
3.  Request &lt;!-- raw HTML omitted --&gt;
client 发送接收IP的message &lt;!-- raw HTML omitted --&gt;
4.  Acknowledge &lt;!-- raw HTML omitted --&gt;
server确认client愿意接受并发送IP以及其他的配置信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     &lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-31-53_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DHCP spoofing attack&lt;/p&gt;
&lt;p&gt;DHCP spoofing 主要是通过向DHCP server发送大量的 &lt;code&gt;Spoofed DHCP request message&lt;/code&gt; 来 &lt;code&gt;占用&lt;/code&gt; IP池里的所有可分配的IP，然后再使用一台假的DHCP server来回复client所发出的DHCP discovery message，进而控制这些client的IP以及其他配置（网关，DNS server地址）。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;正常的DHCP request message： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-43-14_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Spoofed DHCP discovery message: 利用大量虚假的MAC地址来占用可分配的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-43-53_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;DHCP starvation
:&lt;/p&gt;
&lt;p&gt;通过发送大量的带有伪造MAC Address的DHCP request message来占用所有的IP池中的IP地址，进而使用假的DHCP server给其他client分配地址和其他配置信息，对他们进行控制 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-45-24_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-45-38_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-45-50_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;flooding-and-amplification&#34;&gt;Flooding and Amplification&lt;/h3&gt;
&lt;h4 id=&#34;icmp-smurfing&#34;&gt;ICMP Smurfing&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ICMP&lt;/p&gt;
&lt;p&gt;Ping
: 提到ICMP协议，就不得不提到ping，ping就类似于一个声纳系统，通过向特定的电脑发送 &lt;code&gt;ICMP ECHO_REQUEST&lt;/code&gt; ，来使他们通过返回 &lt;code&gt;ECHO_REPLY_REQUEST&lt;/code&gt; 来验证是否可以通信 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ICMP Smurfing&lt;/p&gt;
&lt;p&gt;Attacker通过向一个局域网的广播域中发送大量的 &lt;code&gt;spoofed ICMP ECHO_REQUEST&lt;/code&gt; 来诱导大量的clients发送 &lt;code&gt;ICMP ECHO_REPLY_REQUEST&lt;/code&gt; 到指定的一台client进而使其崩溃 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_10-11-31_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Amplification
: 我们从上面的例子可以看到，通过一个简单的广播，就可以让这么多的client进而产生巨大的流量，进而就催生出一个新的技术就是 &lt;code&gt;Amplification&lt;/code&gt; ,可以通过多层的amplifiers来实现巨大的DDoS流量 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_10-13-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ntp-amplification-ddos-attack&#34;&gt;NTP Amplification DDoS Attack&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NTP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network time protocol &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;UDP protocol &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;port 123 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NTP用来用来各个主机的时钟 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;NTP是一个分层的，中间层的时间资源系统 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-46-00_screenshot.png&#34; width=&#34;500px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;每一层我们称为 &lt;code&gt;stratum&lt;/code&gt; ,由最上层的clock一层层同步到不同 &lt;code&gt;stratum&lt;/code&gt; 的NTP server &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NTP如何工作&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-50-06_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client首先发出NTP message，并且在上面记录当前的时间戳： &lt;code&gt;T1=9:00:00am&lt;/code&gt;  &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-50-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NTP server 收到后马上打上时间戳： &lt;code&gt;T2=10:00:01am&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-52-06_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NTP sever返回一条NTP message，然后在发出之前打上时间戳： &lt;code&gt;T3=10:00:02am&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-56-25_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NTP message到达用户的时候马上打上时间戳： &lt;code&gt;T4=9:00:03am&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用这四个时间戳，我们就足以同步client的时间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Timestamp&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T1&lt;/td&gt;
&lt;td&gt;09:00:00&lt;/td&gt;
&lt;td&gt;Client发出的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T2&lt;/td&gt;
&lt;td&gt;10:00:01&lt;/td&gt;
&lt;td&gt;Server收到的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T3&lt;/td&gt;
&lt;td&gt;10:00:02&lt;/td&gt;
&lt;td&gt;Server发出的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T4&lt;/td&gt;
&lt;td&gt;09:00:03&lt;/td&gt;
&lt;td&gt;Client收到的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;计算所有的Message在传输中delay的时间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;delay = D1 - D2 = (T4-T1) - (T3-T2) = 通信花费的总时长 - 在server上的处理时间 = 3 - 1 = 2 seconds
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算 NTP client 与NTP server 之间的时间差 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;O1 = T2 - T1 = 1h 1s &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;O2 = T3 - T4 = 59min &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;T2 = T1 + offset + delay/2 &lt;!-- raw HTML omitted --&gt;
T4 = T3 - offset + delay/2 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;因此Offset = (O1 + O2)/2 = [(T2 - T1 - delay/2) + (T3 - T4 + delay/2)] / 2 = 1 hour &lt;!-- raw HTML omitted --&gt;
总之就是 &lt;code&gt;(=服务端的两个时间&lt;/code&gt; - &lt;code&gt;客户端的两个时间 =)/2&lt;/code&gt;  = offset &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NTP amplification attack&lt;/p&gt;
&lt;p&gt;NTP amplification attack 依赖于利用公共可以访问的 &lt;code&gt;NTP server&lt;/code&gt; 来发出NTP RESPONSE实现对victim host的DDoS攻击 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;补充知识
: NTP 服务支持管理员向NTP server查询其所管理同步的clients信息，NTP servers通过向client发送monlist命令来获得所有最近连接过的hosts的列表 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;ntpd
: NTP daemon是一个操作系统的后台驻留程序，用来设置和维护系统时间并与NTP server交互实现时钟同步 &lt;!-- raw HTML omitted --&gt;
在Ntpd在4.2.7之前的版本都是存在漏洞的。 &lt;!-- raw HTML omitted --&gt;
在老的机器中，monlist command是默认开启的,它将会返回最近600个通信过的client的IP地址（也就是说一条monlist command，可以返回比原本大的多的数据） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How NTP amplification attack works?&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_09-36-42_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Attacker使用bot来伪造NTP request packets，使用victim的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_09-36-57_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Botnet 发送这些伪造的NTP请求，来诱使NTP servers调用他们的monlist命令，返回大量的response &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_09-38-14_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client收到了每一个NTP server所返回的600个IP地址的信息，相当于收到了一次DoS攻击。我们根据上面Wireshark的截图可以观察到，一条的spoofed NTP request只需要234bytes，但是却要受到100个482 bytes的数据包，可见其攻击力度。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;botnet&#34;&gt;Botnet&lt;/h4&gt;
&lt;p&gt;我们之前在NTP amplification attack已经提到过了bot的使用，在这一章节中，我们来稍微展开讲一讲Botnet的内容 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Botnet，僵尸网络，简单来说就是黑客通过控制一系列的设备（主机，手机，IoT设备等），实现对于本机信息的获取以及控制权，可以利用所感染的bot或者僵尸来实现各种攻击，并通过C&amp;amp;C(command and control) server来实现通信与指令下发 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何搭建一个Botnet?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;黑客首先需要得到一群受感染的用户设备，他们可以自己想办法去感染，也可以从地下市场购买别人感染的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后，让这些被感染的bots去连接上 C&amp;amp;C server,实现通信与管理 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;接着，黑客就可以通过C&amp;amp;C server来下达指令，要求Bot去偷取本机的信息，亦或者是配合实现攻击 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-syn-flooding&#34;&gt;TCP SYN Flooding&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP 是一个传输层的协议，用于很多我们耳熟能详的协议例如HTTP, SMTP 还有 ftp &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP 提供了可靠的点对点的基于连接的通信，如果说网络层的IP地址是提供了快递从揽货到送达的路径，那么传输层的TCP和UDP相当于是提供了传输路上的保险 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其可靠性主要是通过 &lt;code&gt;segment sequencing&lt;/code&gt;, &lt;code&gt;re-trasmission&lt;/code&gt; and &lt;code&gt;loss detection&lt;/code&gt; 来实现的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时TCP提供了流量控制和拥塞管理的功能，只要是通过滑动窗口算法以及丢包检测实现的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP connection&lt;/p&gt;
&lt;p&gt;每一个 &lt;code&gt;TCP connection&lt;/code&gt; 的标识符就是： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source IP address + port number &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Destination IP address + port number &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;其中Port number指代的就是所跑的服务所对应的number &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Three-way handshake 三次握手协议&lt;/p&gt;
&lt;p&gt;之前我们提到过TCP协议是基于连接的协议，那么三次握手协议，就是其内置的，用于建立连接的协议 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;首先我们先来认识一下一个用于三次握手协议的TCP header应该包含什么信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其应该包括： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Port numbers (16 bits each) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;SYN flag (1 bit) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ACK flag (1 bit) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Sequence number (32 bits) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Acknowledgement number (32 bits) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-36-39_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;然后看一个具体的例子 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source首先发起第一次握手请求，名为 &lt;code&gt;SYN&lt;/code&gt; 发出其所定义的一个sequence number为 &lt;code&gt;x&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;接着Destination返回第二次握手请求，名为 &lt;code&gt;SYN+ACK&lt;/code&gt; ，将sequence number改为其所定义的值 &lt;code&gt;y&lt;/code&gt; ，并将acknowledge number设为 &lt;code&gt;x+1&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;最后Source发起第三次握手请求，名为 &lt;code&gt;ACK&lt;/code&gt; , 返回acknowledgement number为 &lt;code&gt;y+1&lt;/code&gt; , 同时递增自己的 sequence number为 &lt;code&gt;x+1&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;至此三次握手连接成功，接下来就可以正常的进行通信，并且Source 和 Destination 将逐渐递增其自己的 &lt;code&gt;sequence number&lt;/code&gt; 以及 &lt;code&gt;acknowledge number&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-35-28_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP SYN flooding&lt;/p&gt;
&lt;p&gt;TCP SYN flooding attack本质上是一个DoS attack, 其目的是为了通过向目标服务器发送大量的无效 &lt;code&gt;SYN&lt;/code&gt;, 来诱使服务器发送对等数量的 &lt;code&gt;SYN+ACK&lt;/code&gt; 请求, 继而等待 &lt;code&gt;ACK&lt;/code&gt; 请求回复，同时利用本地缓存这个连接，最终导致本地的缓存空间被占满。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们最后通过一个具体的例子来复现一下这个过程 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-48-13_screenshot.png&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先黑客向服务器发送大量的 &lt;code&gt;SYN&lt;/code&gt; 请求,用的是伪造过的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-52-20_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接着服务器在收到了 &lt;code&gt;SYN&lt;/code&gt; 请求之后，便会发出对应的 &lt;code&gt;SYN+ACK&lt;/code&gt; 回复请求到之前伪造的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-52-30_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;被伪造的IP地址的主机收到由服务器发来的大量 &lt;code&gt;SYN+ACK&lt;/code&gt; 请求，可发现没有记录显示自己之前有发送过 &lt;code&gt;SYN&lt;/code&gt; 请求到该服务器，因此不会回复 &lt;code&gt;ACK&lt;/code&gt; 请求。同时，每维护一个等待 &lt;code&gt;ACK&lt;/code&gt; 的连接，服务器都要开设一个新的端口，同时用缓存保存这些信息，一旦超出上限，那么就会使服务器瘫痪 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
