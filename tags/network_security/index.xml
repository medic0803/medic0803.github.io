<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>network_security on Under The Ginkgo</title>
        <link>https://ginkgo.org.cn/tags/network_security/</link>
        <description>Recent content in network_security on Under The Ginkgo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Fri, 29 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ginkgo.org.cn/tags/network_security/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>NSE Week5: Firewalls</title>
        <link>https://ginkgo.org.cn/posts/nse_week5_firewalls/</link>
        <pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week5_firewalls/</guid>
        <description>&lt;h2 id=&#34;nse-week5-firwalls&#34;&gt;NSE Week5: Firwalls&lt;/h2&gt;
&lt;h3 id=&#34;how-to-protect-edges-of-the-internet-or-internal-network&#34;&gt;How to protect edges of the Internet or Internal network?&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Local area networks (LANs)&lt;/code&gt;, &lt;code&gt;personal area networks (PANs)&lt;/code&gt;, &lt;code&gt;wireless local area networks (WLANs)&lt;/code&gt;, 以及 &lt;code&gt;wireless sensor networks (WSNs)&lt;/code&gt; 都属于Internet的最边缘，大多都是个人组织或者家庭所拥有的内部网络，我们可以把保护这样的互联网边缘网络或者内部网络比喻成保卫一座城市，通过三层的保护措施来防止入侵: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Perimeter Security (边界安全): 通过减少入口来控制进出，派遣武装守卫把守，同时要求进出的人员拥有预先设定的证明 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Street patrolling (街道巡逻): 派遣武装守卫定期上街巡逻，来识别入侵者 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;House cleaning (入室排查): 派遣专业的安全专家挨家挨户的排查外来危险品以及安全漏洞 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三道对于城邦的包围也就可以对应网络安全中的三项技术： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perimeter Security &amp;lt;-&amp;gt; Firewall: 防火墙 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Street patrolling &amp;lt;-&amp;gt; Intrusion detection systems: 入侵检测 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;House cleaning &amp;lt;-&amp;gt; Anti-malicious-software: 杀毒软件 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而我们今天要讲的，就是内网的第一道防线，防火墙。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在正式介绍防火墙之前，我们最后再介绍一下针对边界攻击的防御理念：5Ds of Perimeter Security: &lt;!-- raw HTML omitted --&gt;
Deter -&amp;gt; Detect -&amp;gt; Deny -&amp;gt; Delay -&amp;gt; Defend &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Deter
: 组织入侵的发生，即使用 &lt;code&gt;fencing 围栏&lt;/code&gt;, &lt;code&gt;lighting 完全照明&lt;/code&gt;, &lt;code&gt;signs 出入签名&lt;/code&gt; 等方式对犯罪者进行被动威慑，从最开始就扼杀入侵的念头 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Detect
: 检测入侵的行为，例如 &lt;code&gt;CCTV 监控&lt;/code&gt;, 用来监控和记录所有的入侵行为 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deny
: 拒绝危险的进入，通过一些认证系统来主动拒绝入侵的行为，其中防火墙就属于 &lt;code&gt;Deny&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delay
: 延缓入侵的速度，通过设置障碍来延长入侵的时间，迫使入侵者放弃或者给予安全团队更多的时间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defend
: 主动地对入侵者进行打击，通过安全团队或者警方的行动来组织入侵 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;what-is-a-firewall&#34;&gt;What is a firewall?&lt;/h3&gt;
&lt;p&gt;什么是防火墙，它有什么作用呢？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;防火墙是一台主机或者一个网络服务，架设于内网和外部网络之间，用来： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防止坏事发生 (内部泄露机密到外部，外部攻击内部系统) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时使正常的行为不收到影响(员工正常访问外网交互) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_10-26-51_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;防火墙的主要功能&#34;&gt;防火墙的主要功能&lt;/h4&gt;
&lt;p&gt;主要工作：Access control 访问控制 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立一道屏障，所有方向上的网络流量都需要经过防火墙 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;防火墙会预设一系列安全协议来对所有这些经过的流量进行审计和控制（可以对异常的行为设置警报） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;可以对IP packet或者更早层的数据进行过滤 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;同时也可以部署NAT(network Address Translation)服务以及使用监控等服务 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;也可以通过IPSec来实现VPNs &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;防火墙的技术&#34;&gt;防火墙的技术&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;What? -&amp;gt; Service Control&lt;/dt&gt;
&lt;dd&gt;通过 &lt;code&gt;transport layer ports&lt;/code&gt; 决定 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;决定 &lt;!-- raw HTML omitted --&gt;What types of Internet services&lt;!-- raw HTML omitted --&gt; 可以通过 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Where? -&amp;gt; Direction control&lt;/dt&gt;
&lt;dd&gt;通过 &lt;code&gt;{Source adddress -&amp;gt; Destination address}&lt;/code&gt; 决定 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;决定特定方向的流量是否可以通过 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Who? -&amp;gt; User control&lt;/dt&gt;
&lt;dd&gt;通过 &lt;code&gt;{IP address -&amp;gt; Transport layer port}&lt;/code&gt; 决定 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;决定什么服务可以被什么用户所访问 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;How? -&amp;gt; Behaviour control&lt;/dt&gt;
&lt;dd&gt;控制服务应该被如何使用，比如一些核心的服务只能在特定的时间被使用 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;防火墙的类型&#34;&gt;防火墙的类型&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;Positive filter&lt;/dt&gt;
&lt;dd&gt;主动过滤，白名单过滤，主允许符合规则的数据通过，其他都不可以通过 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;假设所有人都是坏人 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;主动的，选定是好人的，允许其通过 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Negative filter&lt;/dt&gt;
&lt;dd&gt;被动过滤，黑名单过滤，不允许不符合规则的数据通过，其他都可以通过 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;假设所有人都是好人 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;被动的，在发现了坏人之后，将其过滤 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;根据防火墙的类型，过滤的策略也会不一样: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个或多个协议头 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Payload的内容 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;一串数据包的pattern &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;防火墙的限制&#34;&gt;防火墙的限制&lt;/h4&gt;
&lt;p&gt;防火墙也存在很多的限制，要不怎么需要多道的保护呢 &lt;!-- raw HTML omitted --&gt;
其无法保护: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绕过过滤规则的进攻 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;在外部被感染的设备 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;通过外部的WiFi网络进行的攻击 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;来自内部的威胁 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sneakernet&lt;/p&gt;
&lt;p&gt;球鞋网络，顾名思义就是使用物理媒介运输数据，而非通过网络，记得以前上计算机网络的时候，老师就提到过，在网络不稳定或者质量较差的时候，往往还是使用物理传输更为高校 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么这种时候 &lt;code&gt;Firewall&lt;/code&gt; 就完全失效了，因为其所针对的都是网络数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WiFi&lt;/p&gt;
&lt;p&gt;WiFi之前的数据共享没办法集中到Firewall进行管理 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_11-24-28_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;packet-filtering-firewall&#34;&gt;Packet filtering firewall&lt;/h3&gt;
&lt;p&gt;• What is a packet filtering firewall &lt;!-- raw HTML omitted --&gt;
包过滤防火墙是最基础也是最普遍使用的防火墙，其作用在两种数据包上： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ingress packets: 从外网到内网的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Egress packets: 从内网到外网的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同时也对应 &lt;code&gt;ingress filtering&lt;/code&gt;, &lt;code&gt;egress filtering&lt;/code&gt; 两种过滤手段 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Packet filtering firewall&lt;/code&gt; 通过预设一系列的规则来决定是否让某一种数据包通过，而这些规则都是用来检测 &lt;code&gt;IP headers&lt;/code&gt; 以及 &lt;code&gt;TCP headers&lt;/code&gt;, 对于应用层所放入的payload一定都不感兴趣 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Packet filtering firewall&lt;/code&gt; 也分成 &lt;code&gt;stateless filtering&lt;/code&gt; 以及 &lt;code&gt;stateful filter&lt;/code&gt; 主要的区别就在于应用的规则是否会审计网络连接的状态，即判断一个数据包的去留是否会参考之前的记录，也可以说是考虑了上下文 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_22-07-19_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;stateless-filtering-无状态过滤&#34;&gt;Stateless filtering 无状态过滤&lt;/h4&gt;
&lt;p&gt;其无状态的过滤主要体现在： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对所有收到的包都一视同仁，单独决断是否放过 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;以前的记录不会影响对改数据包的判断 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们之前提到过 &lt;code&gt;Packet filtering firewall&lt;/code&gt; 主要是通过审查 &lt;code&gt;IP headers&lt;/code&gt; 以及 &lt;code&gt;TCP headers&lt;/code&gt;, 那么细化来说 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;是IP header中的： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Destination IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;other fields: defines the transport protocol &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以及 TCP/UDP header 中的： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source port &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Destination port &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过设定对以上信息的规则来实现过滤审查，那么所有的这些规则都会被记录到 &lt;code&gt;ACL (access control list)&lt;/code&gt; 访问控制列表上. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_20-46-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;过滤规则&lt;/p&gt;
&lt;p&gt;通常来说，ACL上定义的规则会被 &lt;code&gt;从上至下&lt;/code&gt; 依次与审查的数据包进行匹配，然后执行对应的动作。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认规则&lt;/p&gt;
&lt;p&gt;之前我们提到过主动过滤和被动过滤，在这里我们展开讲讲 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Default = discard 默认丢包
: -   主动过滤（主动的选择可以通过的名单） &lt;!-- raw HTML omitted --&gt;
-   白名单过滤 &lt;!-- raw HTML omitted --&gt;
-   禁止未经明确许可的行为 (That which is not expressively permitted is prohibited) &lt;!-- raw HTML omitted --&gt;
-   更为稳健和保守的政策 &lt;!-- raw HTML omitted --&gt;
-   所有被允许的服务都需要一个个添加 &lt;!-- raw HTML omitted --&gt;
-   对用户不太友好（就像我们之前所提到的，用户的端口更为灵活，利用白名单一个个加很不明显） &lt;!-- raw HTML omitted --&gt;
-   用户的可见性随着规则的增加而降低 &lt;!-- raw HTML omitted --&gt;
-   相对的，对企业和政府来说更加友好 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Default = forward 默认放行
: -   被动过滤（默认不用过滤，直到被动的知道了有威胁才过滤） &lt;!-- raw HTML omitted --&gt;
-   黑名单过滤 &lt;!-- raw HTML omitted --&gt;
-   没有明确禁止的就是允许的（That which is not expressively prohibited is permitted） &lt;!-- raw HTML omitted --&gt;
-   较于白名单更不安全 &lt;!-- raw HTML omitted --&gt;
-   每当出现新的威胁需要更新记录到黑名单上 &lt;!-- raw HTML omitted --&gt;
-   通常被开发的组织采纳，比如大学 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Granularity of filtering 过滤的颗粒度
: 除了前面提到那几个常见的匹配规则，还有一些内容可以实现更精确的过滤，根据firewall使用的不同的routers来决定 &lt;!-- raw HTML omitted --&gt;
-   在入站时进行过滤 &lt;!-- raw HTML omitted --&gt;
-   在出站时进行过滤 &lt;!-- raw HTML omitted --&gt;
-   在入站和出站同时践行过滤 &lt;!-- raw HTML omitted --&gt;
-   检查数据包的其他控制区域 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ACL实例&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set A&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_22-39-21_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们先来看这第一组规则 &lt;!-- raw HTML omitted --&gt;
&amp;rsquo; * &amp;rsquo; = ANY &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;第一条
: -   两个端口号都没有指定，说明这条规则没有方向（端口号的大小指示了客户端和服务端） &lt;!-- raw HTML omitted --&gt;
-   只指定了 &lt;code&gt;SPIGOT&lt;/code&gt; 的IP地址，说明到SPIGOT的数据包和从SPIGOT来的数据包都会被禁止，也许是以前有过恶意行为，所以被整一个禁止了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;第二条
: -   指定了IP地址以及对应的端口号25， 是SMTP服务所对应的端口 &lt;!-- raw HTML omitted --&gt;
-   这里是允许内网的邮件系统收取邮件 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set B&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-30_09-52-19_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一条默认丢弃规则，一般来说是放在最下面 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;默认丢弃就是我们之前说的主动过滤，白名单过滤 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;在此之上就是定义的可以通过的规则 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set C&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-30_09-53-39_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与rule set A类似，这次是允许内网所有的主机向外发邮件 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;但是存在两个漏洞 &lt;!-- raw HTML omitted --&gt;
&lt;ol&gt;
&lt;li&gt;外面的服务可以修改他们的端口号到25，这样就可以使泄密的数据绕过防火墙策略 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;attacker也可以修改他们的客户端端口号，从而绕过防火墙策略实现入侵 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set D&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-30_09-55-57_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;与之前三条不同的是，Rule set D多了flags的信息，主要运用于TCP的连接的判断 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一条和之前Rule set C一样，是允许内网的主机发送邮件到外网 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;第二条则做了更多的限制，要求进入内网的邮件需要是TCP ACK数据包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rule set E&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-30_09-58-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一条，允许内网的主机向外发送数据 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;第二条，允许回复的ACK包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;第三条，允许内网的服务对外网的客户端进行回复 (port &amp;gt; 1024) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;其他常见过滤规则&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ingress packet 的source IP address 是内网的地址
: 我们知道防火墙是建立在内网和外网之前的，因此 &lt;code&gt;Ingress packet&lt;/code&gt; 只有可能是从外网的地址到内网的地址，这类不寻找的数据包通常都是被恶意修改的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定了路由器的数据包
: 这类数据包通常也是被恶意修改的来绕过防火墙规则的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Payload特别小的数据包
: 这类特别小的数据包，很有可能是用来分离会被审查的信息，以此来绕过防火墙规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;来自外网地址的用于控制的数据包
: 有一些数据包是专门用来进行内网设备管理和控制的，比如DHCP, Bootp, TFTP, NFS, 都是来给内网下发指令或者发送配置的，这些数据包如果来自外网很有可能就是恶意的，应该丢弃 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stateless filtering的优劣势以及漏洞&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Advantages&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现 &lt;code&gt;stateless filtering&lt;/code&gt; 比较方便 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;规则对用户比较透明，速度也很快 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Disadvantages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没办法对更高层的数据进行过滤，因此没办法部署对于应用层的漏洞的过滤 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;一些恶意的指令（存在于payload中）无法被过滤 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;如果一个客户端端口号被允许通过（&amp;gt;1024）,那么其所有的数据包都会被放行 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志记录的信息较少（因为本来指定规则以及审核数据包所需要用到的数据就很少） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;无法部署高级的认证系统 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;同样因为缺乏高层的审核功能 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vulnerabilities&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法检测出TCP/IP被修改过的数据 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;无法应用更高层的审核机制，导致数据内容被修改后即可绕过规则 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;由于用于过滤规则制定的变量较少，因此错误的配置很容易就发生了，从而招致入侵 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;攻防实例&lt;/p&gt;
&lt;p&gt;接下来我们来看一些攻防的实例，来看看stateless filtering能抵御哪些攻击 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IP address spoofing&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IP address spoofing&lt;/code&gt; 通常都是通过修改IP地址来欺骗服务器其真正的主机地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Countermeasure
: -   我们可以制定一些规则来避免一些不合理的数据包，例如 &lt;!-- raw HTML omitted --&gt;
-   Ingress（从连接外网的interface传向连接内网的interface）的数据包本来应该是外网到内网的地址，可如果source IP address变成了外网的地址，那就有问题了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source routing attack&lt;/p&gt;
&lt;p&gt;Source routing是一种特殊的路由机制，即发送方可以指定到达接收方的路由（通常来说，我们只是指定gateway，然后让路由器去寻找路由） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么Attacker可以利用这个机制来伪造数据包的IP address绕过过滤规则，同时使用source routing指示数据包真正的路径和方向 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Countermeasure
: -   丢弃所有使用source routing的数据包 &lt;!-- raw HTML omitted --&gt;
-   禁止这些指定了路由的数据包 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tiny fragment attacks&lt;/p&gt;
&lt;p&gt;就像我们之前提到过的，攻击者可以将数据包分离成多个小的数据包，将所需要的信息分散到小的数据包当中，而防火墙往往只会检查最开始的数据包片段，由此可以绕过检测规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Countermeasure
: -   防火墙可以设定一些规则比如，丢弃所有分散化的TCP数据包，或者在进行审核之前先重组这些数据包片段 &lt;!-- raw HTML omitted --&gt;
-   规定第一个数据包片段必须含有足够多的数据便于防火墙审核 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;补充知识&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP port numbers&lt;/p&gt;
&lt;p&gt;我们再来复习一下 &lt;code&gt;TCP port numbers&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;TCP port number 一般用来指示运行的应用或者服务： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器端（本地的）应用的端口号一般小于1024，这些端口号一般都已经被占用了，我们自己在写程序的时候应该避免使用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;而其他1024~66535的端口号一般被用于客户端（外部的）程序 (16 bits端口号) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还记得我们之前的送快递的例子吗，我们说传输层是上保险，IP地址是送货地址，网络层是找送货的地图，MAC地址是邮编，物理层是送货，那么这个端口号就是写的名字，表明是什么服务传输数据给什么服务 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_21-04-52_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;从中，我们又看出了一些 &lt;code&gt;stateless filtering&lt;/code&gt; 的局限，用户的端口号千变万化，那么就会设置一下较为宽松的规则，从而引发漏洞 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to block an entire subnet?&lt;/p&gt;
&lt;p&gt;Use subnet address with CIDR prefix or subnet masks，使用子网划分的后缀 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_22-09-37_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;stateful-firewall&#34;&gt;Stateful firewall&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Stateful filtering&lt;/code&gt;, 也叫做 &lt;code&gt;connection-state filtering&lt;/code&gt;,通过追踪外部和内部的主机的连接来决定出入规则 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Connection state&lt;/dt&gt;
&lt;dd&gt;当我们说连接的是，指的就是一个TCP连接的状态，是否已经建立（UDP不建立连接） &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;所有这些建立的TCP连接都会存入 &lt;code&gt;state table&lt;/code&gt;  &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-29_21-33-38_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How stateful firewall works?&lt;/p&gt;
&lt;p&gt;当有ingress或者egress的数据包通过的时候，firwall会查找 &lt;code&gt;state table&lt;/code&gt; 来判断他们是否属于被记录的connection &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果属于一个连接，发行，并记录信息（比如TCP sequence number，可以用来防御 &lt;code&gt;TCP session hijacking&lt;/code&gt; ） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果不属于，再判断是否是一个TCP SYN packet which用于建立一个连接，如果是的话就新开一条记录用来记录这个新的连接，如果不是的话，那就丢弃 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Drawbacks of stateful firewall?&lt;/p&gt;
&lt;p&gt;我们可以同时使用 &lt;code&gt;stateful filtering&lt;/code&gt; 以及 &lt;code&gt;stateless filtering&lt;/code&gt;,因为从上面的描述中，也许有一些朋友已经嗅到了一丝漏洞的味道，存储 -&amp;gt; Emm -&amp;gt;flooding lol. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;查询连接，判断从属，记录信息等等这些动作都需要消耗大量的存储空间和CPU资源，因此很容易遭受攻击，因此可以选择只保存有限的信息，以及一段时间内的连接来减少消耗 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IPTables&lt;/p&gt;
&lt;p&gt;IPtables是Linux的 stateful packet filtering工具，其主要的功能有两个： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Tables
:&lt;/p&gt;
&lt;p&gt;Chains
: 定义了一系列的过滤规则用来处理经过的数据包，然后做出响应的决定（accept or drop） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stateful-firwall-and-proxy-firewall&#34;&gt;Stateful firwall and proxy firewall&lt;/h3&gt;
&lt;h4 id=&#34;application-level-proxy-firewall&#34;&gt;Application-level proxy firewall&lt;/h4&gt;
&lt;h4 id=&#34;circuit-level-gateway-proxy-firewall&#34;&gt;Circuit-level gateway/proxy firewall&lt;/h4&gt;
&lt;h3 id=&#34;firewall-location-and-configuration&#34;&gt;Firewall location and configuration&lt;/h3&gt;
&lt;h4 id=&#34;personal-firewall&#34;&gt;Personal firewall&lt;/h4&gt;
&lt;h4 id=&#34;host-based-firewall&#34;&gt;Host-based firewall&lt;/h4&gt;
&lt;h4 id=&#34;dmz-networks&#34;&gt;DMZ networks&lt;/h4&gt;
&lt;h4 id=&#34;distributed-firewalls&#34;&gt;Distributed firewalls&lt;/h4&gt;
&lt;h4 id=&#34;cloud-firwalls&#34;&gt;Cloud firwalls&lt;/h4&gt;
&lt;p&gt;Virtual private cloud (VPC) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;firewall-basing&#34;&gt;Firewall basing&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>NSE Week 3: Spoofing, flooding and amplification</title>
        <link>https://ginkgo.org.cn/posts/nse_week_3_spoofing_flooding_and_amplification/</link>
        <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/nse_week_3_spoofing_flooding_and_amplification/</guid>
        <description>&lt;h2 id=&#34;spoofing-flooding-and-amplification&#34;&gt;Spoofing, flooding and amplification&lt;/h2&gt;
&lt;h3 id=&#34;spoofing&#34;&gt;Spoofing&lt;/h3&gt;
&lt;h4 id=&#34;arp-spoofing&#34;&gt;ARP spoofing&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Layer identifiers&lt;/p&gt;
&lt;p&gt;Routing是network communication中重要的一环，computer node在通信之前，需要知道自己在与谁联系，要通过什么路径去联系 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么layer identifier 就代表着每一个computer node &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internet Layer identifier: &lt;code&gt;IP address&lt;/code&gt; (assigned by users or by software, such as DHCP) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Link Layer Identifier: &lt;code&gt;MAC Address&lt;/code&gt; (hardware address, physical address) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP (Address Resolution Protocol)&lt;/p&gt;
&lt;p&gt;aims to translate from IP address to MAC address &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_11-05-46_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP request message generation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当有IP packet需要发出的时候，ARP就会被hardware driver 所调用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;首先获取IP destination address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后在ARP本地的translation table 中查找是否有对应得IP address : MAC address entry &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;有的话，就把48-bits的MAC address发送给 hardware driver &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;没有的话，就准备发送ARP请求，填充相关信息 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;sender MAC address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;sender IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;target IP address &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;target MAC address (broadcast address: 00:00:00:00:00:00) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ARP request message在link layer被封装成frame 然后发送出去 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP request message reception&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目标节点将会回复其所包含的MAC address, （如果通信的是其他网络的节点，那么此处寻找的就是网关的MAC address) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;其他收到请求的节点会更新他们的translation table (IP address : MAC address entry) 然后丢弃这个包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP rely message reception&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;收到回复的节点也会更新他们的ARP cache &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP translation table (ARP table, ARP cache)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过ARP cache 来保存IP address : MAC address entry 来节省空间 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;表内的entry会 ageing &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ARP 是无状态协议，因此只要收到了request/reply 他们就会自动更新 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RARP (Reverse ARP)&lt;/p&gt;
&lt;p&gt;aims to translate from MAC address to IP address &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_11-06-13_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ARP spoofing attack&lt;/p&gt;
&lt;p&gt;ARP spoofing主要的目的就是污染原本的ARP cache，将Computer A存放的关于 Computer B的信息，改为attacker的，这样A在给B发frame的时候，就会发给attacker &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_10-49-32_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;countermeasure&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置Arp cache 的过期时间expire &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;一些系统通过unicast 来更新cache 表，而不是像之前那样无状态的更新 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Against countermeasure &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;Attacker可以通过定期发送 ARP spoof packet (every ~40s) 来避免以上方法 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static ARP table 静态ARP表 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;每次启动加载到RAM中 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;没有ARP request主动发送 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Man-in-the-middle attack with ARP spoofing&lt;/p&gt;
&lt;p&gt;通过ARP spoofing污染两/多台电脑的ARP cache，使他们的通信destination都指向attacker，从而截取通信内容(attacker node 进而转发通信，因为它知道IP address所对应的正确的MAC address) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_10-53-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MAC flooding&lt;/p&gt;
&lt;p&gt;每个switch 会内置一个 &lt;code&gt;CAM (Content Addressable memory)&lt;/code&gt; 表，用于记录不同的MAC address所对应的port number &lt;!-- raw HTML omitted --&gt;
每当有frame 讲过switches, switch就会通过这个table 来实现转发 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;MAC flooding就是使用大量的spoofed frame来填充switch 的转发表，从而占满 switch 所有的内存空间，使正常的frame的转发策略无法加入table，最终就会导致正常的frame 通信因为没有对应的port而 &lt;code&gt;被迫广播&lt;/code&gt; ，使attacker可以利用sniffer所监听到。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_11-04-54_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;dhcp-spoofing&#34;&gt;DHCP spoofing&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DHCP (Dynamic Host Configuration Protocol)&lt;/p&gt;
&lt;p&gt;DHCP是用来自动的给其他的用户分配IP地址以及其他相关配置的（网关，DNS服务器等）协议 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Protocol operations
: 1.  Discovery &lt;!-- raw HTML omitted --&gt;
-   &lt;code&gt;client&lt;/code&gt; 广播 &lt;code&gt;DHCP Discovery message&lt;/code&gt; 来寻找server &lt;!-- raw HTML omitted --&gt;
2.  Offer &lt;!-- raw HTML omitted --&gt;
server单播提供IP给client &lt;!-- raw HTML omitted --&gt;
3.  Request &lt;!-- raw HTML omitted --&gt;
client 发送接收IP的message &lt;!-- raw HTML omitted --&gt;
4.  Acknowledge &lt;!-- raw HTML omitted --&gt;
server确认client愿意接受并发送IP以及其他的配置信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     &lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-31-53_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DHCP spoofing attack&lt;/p&gt;
&lt;p&gt;DHCP spoofing 主要是通过向DHCP server发送大量的 &lt;code&gt;Spoofed DHCP request message&lt;/code&gt; 来 &lt;code&gt;占用&lt;/code&gt; IP池里的所有可分配的IP，然后再使用一台假的DHCP server来回复client所发出的DHCP discovery message，进而控制这些client的IP以及其他配置（网关，DNS server地址）。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;正常的DHCP request message： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-43-14_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Spoofed DHCP discovery message: 利用大量虚假的MAC地址来占用可分配的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-43-53_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;DHCP starvation
:&lt;/p&gt;
&lt;p&gt;通过发送大量的带有伪造MAC Address的DHCP request message来占用所有的IP池中的IP地址，进而使用假的DHCP server给其他client分配地址和其他配置信息，对他们进行控制 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-45-24_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-45-38_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_09-45-50_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;flooding-and-amplification&#34;&gt;Flooding and Amplification&lt;/h3&gt;
&lt;h4 id=&#34;icmp-smurfing&#34;&gt;ICMP Smurfing&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ICMP&lt;/p&gt;
&lt;p&gt;Ping
: 提到ICMP协议，就不得不提到ping，ping就类似于一个声纳系统，通过向特定的电脑发送 &lt;code&gt;ICMP ECHO_REQUEST&lt;/code&gt; ，来使他们通过返回 &lt;code&gt;ECHO_REPLY_REQUEST&lt;/code&gt; 来验证是否可以通信 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ICMP Smurfing&lt;/p&gt;
&lt;p&gt;Attacker通过向一个局域网的广播域中发送大量的 &lt;code&gt;spoofed ICMP ECHO_REQUEST&lt;/code&gt; 来诱导大量的clients发送 &lt;code&gt;ICMP ECHO_REPLY_REQUEST&lt;/code&gt; 到指定的一台client进而使其崩溃 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_10-11-31_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Amplification
: 我们从上面的例子可以看到，通过一个简单的广播，就可以让这么多的client进而产生巨大的流量，进而就催生出一个新的技术就是 &lt;code&gt;Amplification&lt;/code&gt; ,可以通过多层的amplifiers来实现巨大的DDoS流量 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_10-13-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ntp-amplification-ddos-attack&#34;&gt;NTP Amplification DDoS Attack&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NTP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network time protocol &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;UPD protocol &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;port 123 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NTP用来用来各个主机的时钟 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;NTP是一个分层的，中间层的时间资源系统 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-46-00_screenshot.png&#34; width=&#34;500px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;每一层我们称为 &lt;code&gt;stratum&lt;/code&gt; ,由最上层的clock一层层同步到不同 &lt;code&gt;stratum&lt;/code&gt; 的NTP server &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NTP如何工作&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-50-06_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client首先发出NTP message，并且在上面记录当前的时间戳： &lt;code&gt;T1=9:00:00am&lt;/code&gt;  &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-50-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NTP server 收到后马上打上时间戳： &lt;code&gt;T2=10:00:01am&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-52-06_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NTP sever返回一条NTP message，然后在发出之前打上时间戳： &lt;code&gt;T3=10:00:02am&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-26_22-56-25_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NTP message到达用户的时候马上打上时间戳： &lt;code&gt;T4=9:00:03am&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用这四个时间戳，我们就足以同步client的时间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Timestamp&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T1&lt;/td&gt;
&lt;td&gt;09:00:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T2&lt;/td&gt;
&lt;td&gt;10:00:01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T3&lt;/td&gt;
&lt;td&gt;10:00:02&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T4&lt;/td&gt;
&lt;td&gt;09:00:03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;计算所有的Message在传输中delay的时间 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;delay = D1 - D2 = (T4-T1) - (T3-T2) = 通信花费的总时长 - 在server上的处理时间 = 3 - 1 = 2 seconds
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算 NTP client 与NTP server 之间的时间差 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;O1 = T2 - T1 = 1h 1s &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;O2 = T3 - T4 = 59min &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;T2 = T1 + offset + delay/2 &lt;!-- raw HTML omitted --&gt;
T4 = T3 - offset + delay/2 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;因此Offset = (O1 + O2)/2 = [(T2 - T1 - delay/2) + (T3 - T4 + delay/2)] / 2 = 1 hour &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NTP amplification attack&lt;/p&gt;
&lt;p&gt;NTP amplification attack 依赖于利用公共可以访问的NTP server来发出NTP RESPONSE实现对victim host的DDoS攻击 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;补充知识
: NTP 服务支持管理员向NTP server查询其所管理同步的clients信息，NTP servers通过向client发送monlist命令来获得所有最近连接过的hosts的列表 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;ntpd
: NTP daemon是一个操作系统的后台驻留程序，用来设置和维护系统时间并与NTP server交互实现时钟同步 &lt;!-- raw HTML omitted --&gt;
在Ntpd在4.2.7之前的版本都是存在漏洞的。 &lt;!-- raw HTML omitted --&gt;
在老的机器中，monlist command是默认开启的,它将会返回最近600个通信过的client的IP地址（也就是说一条monlist command，可以返回比原本大的多的数据） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How NTP amplification attack works?&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_09-36-42_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Attacker使用bot来伪造NTP request packets，使用victim的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_09-36-57_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Botnet 发送这些伪造的NTP请求，来诱使NTP servers调用他们的monlist命令，返回大量的response &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_09-38-14_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client收到了每一个NTP server所返回的600个IP地址的信息，相当于收到了一次DoS攻击。我们根据上面Wireshark的截图可以观察到，一条的spoofed NTP request只需要234bytes，但是却要受到100个482 bytes的数据包，可见其攻击力度。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;botnet&#34;&gt;Botnet&lt;/h4&gt;
&lt;p&gt;我们之前在NTP amplification attack已经提到过了bot的使用，在这一章节中，我们来稍微展开讲一讲Botnet的内容 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Botnet，僵尸网络，简单来说就是黑客通过控制一系列的设备（主机，手机，IoT设备等），实现对于本机信息的获取以及控制权，可以利用所感染的bot或者僵尸来实现各种攻击，并通过C&amp;amp;C(command and control) server来实现通信与指令下发 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何搭建一个Botnet?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;黑客首先需要得到一群受感染的用户设备，他们可以自己想办法去感染，也可以从地下市场购买别人感染的 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后，让这些被感染的bots去连接上 C&amp;amp;C server,实现通信与管理 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;接着，黑客就可以通过C&amp;amp;C server来下达指令，要求Bot去偷取本机的信息，亦或者是配合实现攻击 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-syn-flooding&#34;&gt;TCP SYN Flooding&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP 是一个传输层的协议，用于很多我们耳熟能详的协议例如HTTP, SMTP 还有 ftp &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP 提供了可靠的点对点的基于连接的通信，如果说网络层的IP地址是提供了快递从揽货到送达的路径，那么传输层的TCP和UDP相当于是提供了传输路上的保险 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其可靠性主要是通过 &lt;code&gt;segment sequencing&lt;/code&gt;, &lt;code&gt;re-trasmission&lt;/code&gt; and =loss detection=来实现的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同时TCP提供了流量控制和拥塞管理的功能，只要是通过滑动窗口算法以及丢包检测实现的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP connection&lt;/p&gt;
&lt;p&gt;每一个 &lt;code&gt;TCP connection&lt;/code&gt; 的标识符就是： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source IP address + port number, Destination IP address + port number &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;其中Port number指代的就是所跑的服务所对应的number &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Three-way handshake 三次握手协议&lt;/p&gt;
&lt;p&gt;之前我们提到过TCP协议是基于连接的协议，那么三次握手协议，就是其内置的，用于建立连接的协议 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;首先我们先来认识一下一个用于三次握手协议的TCP header应该包含什么信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其应该包括： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Port numbers (16 bits each) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;SYN flag (1 bit) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ACK flag (1 bit) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Sequence number (32 bits) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Acknowledgement number (32 bits) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-36-39_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;然后看一个具体的例子 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source首先发起第一次握手请求，名为 &lt;code&gt;SYN&lt;/code&gt; 发出其所定义的一个sequence number为x &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;接着Destination返回第二次握手请求，名为 &lt;code&gt;SYN+ACK&lt;/code&gt; ，将sequence number改为其所定义的值y，并将acknowledge number设为x+1 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;最后Source发起第三次握手请求，名为 &lt;code&gt;ACK&lt;/code&gt; , 返回acknowledgement number为y+1, 同时递增自己的 sequence number为x+1 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;至此三次握手连接成功，接下来就可以正常的进行通信，并且Source 和 Destination将逐渐递增其自己的sequence number以及acknowledge number &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-35-28_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP SYN flooding&lt;/p&gt;
&lt;p&gt;TCP SYN flooding attack本质上是一个DoS attack, 其目的是为了通过向目标服务器发送大量的无效 &lt;code&gt;SYN&lt;/code&gt;, 来诱使服务器发送对等数量的 &lt;code&gt;SYN+ACK&lt;/code&gt; 请求, 继而等待 &lt;code&gt;ACK&lt;/code&gt; 请求回复，同时利用本地缓存这个连接，最终导致本地的缓存空间被占满。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们最后通过一个具体的例子来复现一下这个过程 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-48-13_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先黑客向服务器发送大量的 &lt;code&gt;SYN&lt;/code&gt; 请求,用的是伪造过的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-52-20_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接着服务器在收到了 &lt;code&gt;SYN&lt;/code&gt; 请求之后，便会发出对应的 &lt;code&gt;SYN+ACK&lt;/code&gt; 回复请求到之前伪造的IP地址 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-27_10-52-30_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;被伪造的IP地址的主机收到由服务器发来的大量 &lt;code&gt;SYN+ACK&lt;/code&gt; 请求，可发现没有记录显示自己之前有发送过 &lt;code&gt;SYN&lt;/code&gt; 请求到该服务器，因此不会回复 &lt;code&gt;ACK&lt;/code&gt; 请求。同时，每维护一个等待 &lt;code&gt;ACK&lt;/code&gt; 的连接，服务器都要开设一个新的端口，同时用缓存保存这些信息，一旦超出上限，那么就会使服务器瘫痪 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>SCT Topic 8: Password Cracking</title>
        <link>https://ginkgo.org.cn/posts/password_cracking/</link>
        <pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/password_cracking/</guid>
        <description>&lt;h2 id=&#34;sct-topic-8-password-cracking&#34;&gt;SCT Topic 8: Password Cracking&lt;/h2&gt;
&lt;h3 id=&#34;case-study-adobe-password-leak&#34;&gt;Case Study: Adobe Password Leak&lt;/h3&gt;
&lt;p&gt;If you are familiar with how online service store users&amp;rsquo;s password, let me ask you:&lt;/p&gt;
&lt;p&gt;How Should You Do?&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-03-19_09-43-18_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Yes, we will use &lt;code&gt;hash algorithm&lt;/code&gt;, &lt;code&gt;salt&lt;/code&gt; and store the hashed password and salt, which actively avoid the exposion of plaintext password and &lt;!-- raw HTML omitted --&gt;brute force&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;But how Adobe Did It?&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-03-19_09-46-25_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;What were the consequences?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you get the &lt;code&gt;master key&lt;/code&gt;, literally you own all &amp;ldquo;encrypted passwords&amp;rdquo;&lt;/li&gt;
&lt;li&gt;If two users choose same password, their encrypted ciphertext are same, consequently, &lt;code&gt;frequently analysis&lt;/code&gt; would help hacker to find out the details of encryption process.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more details, please refer to this article: &lt;a class=&#34;link&#34; href=&#34;https://nakedsecurity.sophos.com/2013/11/04/anatomy-of-a-password-disaster-adobes-giant-sized-cryptographic-blunder/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Anatomy of a password disaster – Adobe’s giant-sized cryptographic blunder&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;cryptanalysis-basics&#34;&gt;Cryptanalysis basics&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;Cryptanalysis&lt;/dt&gt;
&lt;dd&gt;The study of techniques to reveal what cryptography is attempting to hide or protect.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;In other words, break the cryptographyic algorithms without knowing the key.&lt;/p&gt;
&lt;p&gt;Cryptanalysis are based on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The nature of the cryptographic algorithm&lt;/li&gt;
&lt;li&gt;the key&lt;/li&gt;
&lt;li&gt;some knowledge on the text, such as language(common words), format or encoding (script, image alway begin with some same pattern),&lt;/li&gt;
&lt;li&gt;a section with both plaintext and encrypted text&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;brute-force-attacks&#34;&gt;Brute-force attacks&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;Brute-force attack&lt;/dt&gt;
&lt;dd&gt;Aim to decrypt an encrypted text by exhaustively &lt;code&gt;trying all possible&lt;/code&gt; secret keys until you obtain a meaningful plaintext&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;On average, you need to try at least &lt;code&gt;half of all the possible&lt;/code&gt; keys to be successful&lt;/p&gt;
&lt;p&gt;For example, to brute force a 4-digit password, the number of possibilities is 10^4 = 10000, therefore, on average, a brute-force attack in this scenario will succeed after 5000 attempts. If 1 attempt cost 1s, it needs at least 1h24min to finish this work.&lt;/p&gt;
&lt;h4 id=&#34;dictionary-attacks&#34;&gt;Dictionary attacks&lt;/h4&gt;
&lt;p&gt;4-digit password needs one hour and half? Forget about it, let&amp;rsquo;s to try something not so naive.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s first define the term &amp;ldquo;password&amp;rdquo; as a user-defined encrypted secret key.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Passowrd dictionary attacks&lt;/dt&gt;
&lt;dd&gt;Use a &amp;ldquo;dictionary&amp;rdquo; of possbile words (based on an attacker-defined alphabet) to make exploitation attempts, including English words, user&amp;rsquo;s private information and common passwords.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Common dictionaries for attacks include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Words and meaningful fragments of words combination for a certain language&lt;/li&gt;
&lt;li&gt;Personal information (e.g., obtained from OSINT or social engineering)&lt;/li&gt;
&lt;li&gt;Lists of names, locations, dates, companies, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, if the attackers use dictionary attack, the &lt;code&gt;password length&lt;/code&gt; does not provide too much help on password robustness.&lt;/p&gt;
&lt;h4 id=&#34;password-robustness&#34;&gt;Password robustness&lt;/h4&gt;
&lt;p&gt;There are four main elements to determine the security of a password&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Number of symbols in the password&lt;/dt&gt;
&lt;dd&gt;As we mentioned before, 4-digit locker would require on average 10^4/2 seconds, or almost 1.5 hours to brute force, the longer password, the longer time to brute force.&lt;/dd&gt;
&lt;dt&gt;Number of possibilities for each position&lt;/dt&gt;
&lt;dd&gt;We continue use previous example, if we expand the types of symbols to alphabet and number, the possibilities expand to 36*36*36 for brute force, which requires much more time than 1.5 hours.&lt;/dd&gt;
&lt;dt&gt;Time required for each attempt&lt;/dt&gt;
&lt;dd&gt;Based on my experience, some online service will delay the login attempt to expand the time of brute force, which may also help to defend the attack like DDoS.&lt;/dd&gt;
&lt;dt&gt;Are there easier alternatives&lt;/dt&gt;
&lt;dd&gt;Remember we metioned in &lt;em&gt;Social Engineering&lt;/em&gt;: &amp;ldquo;The easiest way to get the information you want is always by asking the victims themselves&amp;rdquo;?
&lt;p&gt;There are always more than one way to get the answer of a question, so does cryptanalysis, you can even physically break the lock :)&lt;/p&gt;
&lt;p&gt;Some common alternatives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;finding write-down notes in officers&lt;/li&gt;
&lt;li&gt;shoulder-surfing, i.e., looking over someone&amp;rsquo;s shoulder when they&amp;rsquo;re typing their passwords&lt;/li&gt;
&lt;li&gt;physical break-in&lt;/li&gt;
&lt;li&gt;physically stealing passwords lists or logbooks&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;cryptographic-hash-functions&#34;&gt;Cryptographic hash functions&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;Hash function&lt;/dt&gt;
&lt;dd&gt;A function that maps input data of &lt;code&gt;arbitrary size&lt;/code&gt; to &lt;code&gt;fixed-size&lt;/code&gt; output values called &lt;code&gt;hashes&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;Crytographic hash functions (CHF)&lt;/dt&gt;
&lt;dd&gt;are hash functions more suitable for information security applications which contains ideal following properties:
&lt;ol&gt;
&lt;li&gt;deterministic: given message M, its hash H(M) is &lt;!-- raw HTML omitted --&gt;always&lt;!-- raw HTML omitted --&gt; the same&lt;/li&gt;
&lt;li&gt;quick to compute&lt;/li&gt;
&lt;li&gt;unfeasible to generate message M that has a specific hash value H (hard to find alternative message M&#39;)&lt;/li&gt;
&lt;li&gt;unfeasible to find messages M1 and M2 such that H(M1) = H(M2) (hard to find a collision)&lt;/li&gt;
&lt;li&gt;avalanche effect: a small change in message M leads to siginificant change to the hash value.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Usage of CHF includes MACs (Message Authentication Codes), digital signatures and authentications.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use an example for better understanding of CHF&lt;/p&gt;
&lt;p&gt;Left hand column is the input, after cryptographic hash function, we get the output, we called &lt;code&gt;Digest&lt;/code&gt; here.&lt;/p&gt;
&lt;p&gt;We can observe that, a single character change of input text, the digest would be very different from previous one.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-03-19_14-44-36_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;As you can easily guess, there are many problems and attacks which threat the CHF:&lt;/p&gt;
&lt;h4 id=&#34;the-birthday-problem--or-the-birthday-paradox&#34;&gt;The birthday problem (or the birthday paradox)&lt;/h4&gt;
&lt;p&gt;Let me ask you a classic question, how many people you need in a single room, which makes the probability that at least two person share a birthday to be 50%?&lt;/p&gt;
&lt;p&gt;You only need 23 people to raise probability to 50 per cent.&lt;/p&gt;
&lt;p&gt;Prove:
The goal is to compute P(A), the probability that at least two people in the room have same birthday.&lt;/p&gt;
&lt;p&gt;However, it is simpler to calculate the reverse one, P(A&amp;rsquo;), the probability that &lt;code&gt;NO&lt;/code&gt; two people in the room have the same birthday.&lt;/p&gt;
&lt;p&gt;To calculate P(A&amp;rsquo;), the event is that &lt;code&gt;person 2&lt;/code&gt; does not have the same birthday as &lt;code&gt;person 1&lt;/code&gt;, and that persona 3 does not have the same birthday as either person 1 or person 2, and so on, and finally that person 23 does not have the same birthday as any of persons 1 through 22.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s number this event as Event 1 to Event 23&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s calculate the product of the probability of these events:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-03-19_15-31-52_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;Evaluating equation with (23) gives P(A&amp;rsquo;) ≈ 0.492703&lt;/p&gt;
&lt;p&gt;Therefore, P(A) ≈ 1 − 0.492703 = 0.507297 (50.7297%).&lt;/p&gt;
&lt;p&gt;Also, according to the &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Pigeonhole_principle&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pigenhole principle&lt;/a&gt;, the probability reaches 100 per cent when at least 367 people are present since there are only 366 possible birthdays.&lt;/p&gt;
&lt;p&gt;Based on above knowledge, we can understand that birthday attack is based on higher likelihood of collisions found between &lt;strong&gt;random attack&lt;/strong&gt; and &lt;strong&gt;fixed degree of permutations&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;collision-attack&#34;&gt;Collision attack&lt;/h4&gt;
&lt;p&gt;The collision attack aims to identify two inputs that generate the same hash.&lt;/p&gt;
&lt;p&gt;More formally, we assume user has password &lt;strong&gt;P&lt;/strong&gt; with hash &lt;strong&gt;H(P)&lt;/strong&gt;, an attacker may find another string Q, such that H(P) = H(Q)&lt;/p&gt;
&lt;p&gt;This is why we need CHF to have the property to make it feasible to find the collision.&lt;/p&gt;
&lt;h4 id=&#34;preimage-attack&#34;&gt;Preimage attack&lt;/h4&gt;
&lt;p&gt;The preimage attack aims to find a message that has a specific hash value&lt;/p&gt;
&lt;p&gt;More formally, an adversary &amp;ldquo;tweaks&amp;rdquo; an input message M&amp;rsquo; until H(M&amp;rsquo;)=H(M)&lt;/p&gt;
&lt;p&gt;This attack will put huge harm to the security property: Integrity, because if this kind of tweak success, we can not trust anything, even if it has been hashed.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see an example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Message M: Give Mr John Smith a salary increase of £1,000.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This message will be digitally signed as a contract by CHF H.&lt;/p&gt;
&lt;p&gt;But the attacker finds some alternatives of messages which change their meaning of the input message, but get the same output digest as H(M)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Message M’: Award Mr Smith a raise of £2,000&lt;/li&gt;
&lt;li&gt;Message M&amp;rsquo;&amp;rsquo;: Present John Smith a bonus of £3,000&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Same signed hash value, different meaning, how powerful it is&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;md5-collision-exercise&#34;&gt;MD5 collision exercise&lt;/h3&gt;
&lt;p&gt;When we download some files/software, many of them will provide md5 authentication, to authenticate that the integrity of the software, however, here is a &lt;a class=&#34;link&#34; href=&#34;https://www.mscs.dal.ca/~selinger/md5collision/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;exercise&lt;/a&gt; that shows MD5 can not be trusted anymore.&lt;/p&gt;
&lt;p&gt;Please review the details, I will just post something interesting here:&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see two programs like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Program 1: if (data1 == data1) then { good_program } else { evil_program }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Program 2: if (data2 == data1) then { good_program } else { evil_program }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only difference between these two statements is the variable to compare, however, it has been proved by Chinese researchers that we can only change some data in the input source files, but get the same MD5 hash value, which announce the &lt;code&gt;death of MD5&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;rainbow-table-attacks&#34;&gt;Rainbow table attacks&lt;/h3&gt;
&lt;p&gt;In this section, we will see a smarter variant of dictionary attack to do the brute force, it called &lt;code&gt;pre-computed dictionary attack&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this attack, we will pre-compute a list of hashes of dictionary words, and store in a table, which you can always easily to map the hashed text and plaintext password. If &amp;ldquo;hash-chain&amp;rdquo; functions are used to store the pre-computed hashes(to reduce the storage space), then the table is called a &lt;code&gt;rainbow table&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use an example to introduce the terms and processes in a Rainbow Table usage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The letter &lt;code&gt;H&lt;/code&gt; denotes a hash function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The letters &lt;code&gt;R_i&lt;/code&gt; denote different reduction functions, which aim to store more plaintext-hashed-text chains in the table (The number and sequences of reduction functions are same in each row).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We only store two columns of data in a system: 1. The &lt;code&gt;first column&lt;/code&gt; (in green) and the &lt;code&gt;last&lt;/code&gt; (in yellow).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-03-19_16-33-39_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;how-we-utilise-the-rainbow-table-the-plaintext-of-a-given-hashed-text&#34;&gt;How we utilise the rainbow table the plaintext of a given hashed text?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Step 0
We find the hashed text &lt;code&gt;&amp;quot;re3xes&amp;quot;&lt;/code&gt; in /etc/shadow directory of the victim, we want the plaintext of this password, and have a rainbow table which contains two columns (green and yellow).&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-03-19_16-36-34_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Step 1
We use the reduction function &lt;code&gt;R3&lt;/code&gt; on &lt;code&gt;&amp;quot;re3xes&amp;quot;&lt;/code&gt; (start from last reduction function) and see if the result &amp;ldquo;rambo&amp;rdquo; is in the last column of the rainbow table. In this example it is not.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-03-19_16-39-37_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2
Next, try two rounds of reduction function, use reductions R2 and R3 and obtain &amp;ldquo;linux23&amp;rdquo; as the result.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-03-19_16-50-07_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3
Find the match&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-03-19_16-50-29_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 4
Start with matched plaintext column &amp;ldquo;passwd&amp;rdquo; and do the reductions to reach plaintext which will hashed to given hashed text &amp;ldquo;re3xes&amp;rdquo;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-03-19_16-51-59_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;dl&gt;
&lt;dt&gt;Summary&lt;/dt&gt;
&lt;dd&gt;We assume that the given hashed text are contained in the chains of a row in the rainbow table, and use a sequence of reduction functions and hash function to see if it could reach the last column.
&lt;p&gt;If there is match, then we could locate the row of first (green) column and begin to reproduce the chains and get the plaintext.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-03-19_16-43-11_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;

&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;salt&#34;&gt;Salt&lt;/h4&gt;
&lt;p&gt;Remember that I mentioned a term in first section: Salt?&lt;/p&gt;
&lt;p&gt;Rainbow table attacks and pre-computed dictionary attacks can be thwarted via the use of salt.&lt;/p&gt;
&lt;p&gt;The reason is very simple, even if you can use pre-computed table based on some common use dictionaries, but you can predict what&amp;rsquo;s the salt are used in hashing.&lt;/p&gt;
&lt;p&gt;Here are the most common mistakes in applying salt:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Using short salts:
if the salt is too short, the attacker may predict or brute-force pre-computed dictionaries with known salts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reusing salts:
if you reuse the salt for multiple accounts, the attacker can easily find out that the plaintext passwords were the same, and use side-channel information (e.g., password hints) to corrupt multiple accounts at once.&lt;/p&gt;
&lt;p&gt;Moreover, if the attacker randomly predicted the correct salt while computing a precomputed dicionary, then all the passwords would be compromised at once.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally it is important to note that using a ‘salt’ is not robust enough to thwart dictionary attacks, but only the pre-computation.&lt;/p&gt;
&lt;h3 id=&#34;countermeasures-and-best-practices&#34;&gt;Countermeasures and best practices&lt;/h3&gt;
&lt;h4 id=&#34;weak-passwords&#34;&gt;Weak passwords&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;Default passwords&lt;/dt&gt;
&lt;dd&gt;Default provided by system vendor which should be changed at installation time
&lt;ul&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;li&gt;default&lt;/li&gt;
&lt;li&gt;admin&lt;/li&gt;
&lt;li&gt;guest&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Dictionary words&lt;/dt&gt;
&lt;dd&gt;Including non-English dictionaries:
&lt;ul&gt;
&lt;li&gt;chameleon&lt;/li&gt;
&lt;li&gt;RedSox&lt;/li&gt;
&lt;li&gt;sandbags&lt;/li&gt;
&lt;li&gt;bunnyhop&lt;/li&gt;
&lt;li&gt;IntenseCrabtree&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Words with numbers appended&lt;/dt&gt;
&lt;dd&gt;These can be easily tested automatically by attackers with little time cost.
&lt;ul&gt;
&lt;li&gt;password1&lt;/li&gt;
&lt;li&gt;deer2000&lt;/li&gt;
&lt;li&gt;john1234&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Words with simple obfuscations&lt;/dt&gt;
&lt;dd&gt;Still, it can be tested automatically with little additional effort
&lt;ul&gt;
&lt;li&gt;p@ssw0rd&lt;/li&gt;
&lt;li&gt;l33th4x0r&lt;/li&gt;
&lt;li&gt;g0ldf1sh&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Doubled words&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;crabcrab&lt;/li&gt;
&lt;li&gt;stopstop&lt;/li&gt;
&lt;li&gt;treetree&lt;/li&gt;
&lt;li&gt;passpass.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Common sequences from a keyboard row&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;qwerty (keyboard)&lt;/li&gt;
&lt;li&gt;123456&lt;/li&gt;
&lt;li&gt;asdfgh (keyboard)&lt;/li&gt;
&lt;li&gt;fred.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Numeric sequences based on well known numbers such as&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;911 (9-1-1, 9/11)&lt;/li&gt;
&lt;li&gt;314159&amp;hellip; (pi)&lt;/li&gt;
&lt;li&gt;27182&amp;hellip; (e)&lt;/li&gt;
&lt;li&gt;112 (1-1-2).&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Identifiers&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;jsmith123&lt;/li&gt;
&lt;li&gt;1/1/1970&lt;/li&gt;
&lt;li&gt;555–1234&lt;/li&gt;
&lt;li&gt;one&amp;rsquo;s username.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Weak passwords in non-English languages&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;contraseña (Spanish)&lt;/li&gt;
&lt;li&gt;ji32k7au4a83 (encoding from Chinese).&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Anything personally related to an individual&lt;/dt&gt;
&lt;dd&gt;All these can be easily tested automatically after a simple investigation of a person&amp;rsquo;s details, eg through social engineering.
&lt;ul&gt;
&lt;li&gt;license plate number&lt;/li&gt;
&lt;li&gt;social security number&lt;/li&gt;
&lt;li&gt;current or past telephone numbers&lt;/li&gt;
&lt;li&gt;student ID number&lt;/li&gt;
&lt;li&gt;current address&lt;/li&gt;
&lt;li&gt;previous addresses&lt;/li&gt;
&lt;li&gt;birthday&lt;/li&gt;
&lt;li&gt;sports team&lt;/li&gt;
&lt;li&gt;relative&amp;rsquo;s or pet&amp;rsquo;s names, nicknames, birthdays, initials, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;Dates&lt;/dt&gt;
&lt;dd&gt;Dates follow a pattern and make passwords weak.&lt;/dd&gt;
&lt;dt&gt;Common passwords from previous leaks&lt;/dt&gt;
&lt;dd&gt;For example, the top 10 most common passwords in a &lt;a class=&#34;link&#34; href=&#34;https://edition.cnn.com/2019/04/22/uk/most-common-passwords-scli-gbr-intl/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CNN article&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;123456&lt;/li&gt;
&lt;li&gt;123456789&lt;/li&gt;
&lt;li&gt;qwerty&lt;/li&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;li&gt;111111&lt;/li&gt;
&lt;li&gt;12345678&lt;/li&gt;
&lt;li&gt;abc123&lt;/li&gt;
&lt;li&gt;1234567&lt;/li&gt;
&lt;li&gt;password1&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;12345&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;side-channel-attacks&#34;&gt;Side-channel attacks&lt;/h4&gt;
&lt;p&gt;As its name suggest, rather than exploiting the weakness of the algorithm itself (eg. cryptanalysis and software bugs), a side-channel attack relies on information gained from the implementation of a computer system.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;timing information (eg, implement the encryption, hashing)&lt;/li&gt;
&lt;li&gt;power consumption&lt;/li&gt;
&lt;li&gt;electromagnetic leaks&lt;/li&gt;
&lt;li&gt;sound&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are familar with SQL injection, the time-based blind injection is also a side-channel attacks.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the details of a &lt;code&gt;timeing attack&lt;/code&gt;:
By analyse time taken by the cryptographic algorithm implementation operation, the attacker is able to reverse engineer the input.&lt;/p&gt;
&lt;p&gt;In 2003, &lt;a class=&#34;link&#34; href=&#34;https://id.elsevier.com/as/authorization.oauth2?platSite=SD%2Fscience&amp;amp;scope=openid%20email%20profile%20els_auth_info%20els_idp_info%20els_idp_analytics_attrs%20els_sa_discover%20urn%3Acom%3Aelsevier%3Aidp%3Apolicy%3Aproduct%3Ainst_assoc&amp;amp;response_type=code&amp;amp;redirect_uri=https%3A%2F%2Fwww.sciencedirect.com%2Fuser%2Fidentity%2Flanding&amp;amp;authType=SINGLE_SIGN_IN&amp;amp;prompt=login&amp;amp;client_id=SDFE-v3&amp;amp;state=retryCounter%3D0%26csrfToken%3D8db72d04-1503-4c61-852a-86ec787771b8%26idpPolicy%3Durn%253Acom%253Aelsevier%253Aidp%253Apolicy%253Aproduct%253Ainst_assoc%26returnUrl%3D%252Fscience%252Farticle%252Fpii%252FS1389128605000125%253Fvia%25253Dihub%26prompt%3Dlogin%26cid%3Darp-7f672742-0676-47c6-9ce3-f01d2dc6f238&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Boneh and Brumley&lt;/a&gt; published a practical network-based timing attack on SSL-enabled web server, the server key was recovered in a matter of hours using this method.&lt;/p&gt;
&lt;h4 id=&#34;good-practice-around-passwords&#34;&gt;Good practice around passwords&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Do not reuse passwords
&lt;ul&gt;
&lt;li&gt;Browser&lt;/li&gt;
&lt;li&gt;KeePassX&lt;/li&gt;
&lt;li&gt;Local&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use password managers&lt;/li&gt;
&lt;li&gt;Use Two-Factor Authentication (2FA)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
