<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>cryptocurrecy on Under The Ginkgo</title>
        <link>https://ginkgo.org.cn/tags/cryptocurrecy/</link>
        <description>Recent content in cryptocurrecy on Under The Ginkgo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Wed, 11 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ginkgo.org.cn/tags/cryptocurrecy/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Mastering Bitcoin 2nd Edition Chapter 2</title>
        <link>https://ginkgo.org.cn/posts/mb2_chapter_2/</link>
        <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/mb2_chapter_2/</guid>
        <description>&lt;h2 id=&#34;mastering-bitcoin-2nd-edition-chapter-2&#34;&gt;Mastering Bitcoin 2nd Edition Chapter 2&lt;/h2&gt;
&lt;h3 id=&#34;bitcoin-transactions&#34;&gt;Bitcoin transactions&lt;/h3&gt;
&lt;h4 id=&#34;terms&#34;&gt;Terms&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;Transaction&lt;/dt&gt;
&lt;dd&gt;Move value from &lt;code&gt;transaction inputs&lt;/code&gt; to &lt;code&gt;transaction outputs&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;将多个 bitcoin value 转移给多个outputs地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Input: reference to a previous transaction&amp;rsquo;s output, showing where the value is coming from &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Wallet里面的bitcoin都来自于之前的 transaction 的 output，使用的时候就是引用之前 outputs的地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Output: directs a specific value to new owner&amp;rsquo;s bitcoin address, and can include a change output back to the original owner &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Bitcoin value发送到新的拥有者的地址，同时一部分找零回到原有者的地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Transaction as double-entry bookkeeping &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-21_10-55-13_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Change&lt;/dt&gt;
&lt;dd&gt;找零 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;与物理货币使用类似，当作为input的bitcoin value大于实际所需要的output的值，那么由于不能把一个bitcoin value拆开，因此output除了原来要求的值，还有一个新的bitcoin value返回给原有的账户，均使用新的地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Transaction fee&lt;/dt&gt;
&lt;dd&gt;The slight difference between input and outputs &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It is collected by the miner as a fee for validating and including the transaction in a block to be recorded on the blockchain &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Transaction output 后会扣除一定的 &lt;code&gt;transcation fee&lt;/code&gt;,用于作为miner验证和将transaction加入block的奖励 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&amp;ldquo;Spending&amp;rdquo;&lt;/dt&gt;
&lt;dd&gt;sign a transaction that transfers value from a previous transaction over to a new owner identified by a bitcoin address &lt;!-- raw HTML omitted --&gt;
使用用户的 key 来确认一次transaction &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Transaction chains&lt;/dt&gt;
&lt;dd&gt;所有当前拥有者所拥有的bitcoin value 均来自于上一次 transaction的 output，这些 bitcoin value将会作为下一次 transaction 的 input &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-21_10-54-39_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id=&#34;transaction-forms&#34;&gt;Transaction forms&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Most common transaction&lt;/p&gt;
&lt;p&gt;最普通的 transaction，input的value 大于output，因此一部分转交给新的owner，一部分找零返回原来的地址 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-21_10-56-43_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Transaction aggregating funds&lt;/p&gt;
&lt;p&gt;当有很多“零钱”的时候，凑齐（aggregate）很多的inputs转交给新的owner &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-21_10-57-21_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Transaction distributing funds&lt;/p&gt;
&lt;p&gt;一份或多份inputs需要转交给多个owners，例如发工资(payroll) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-21_10-58-21_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constructing-a-transaction&#34;&gt;Constructing a Transaction&lt;/h3&gt;
&lt;h4 id=&#34;getting-the-right-inputs&#34;&gt;Getting the Right Inputs:&lt;/h4&gt;
&lt;p&gt;Most wallets keep track of all the available outputs belonging to addresses in the wallet &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Wallet application queries the bitcoin network to retrieve this information &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;For example, use HTTP GET command to a specific URL to return all the unspent transaction outputs for an address &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Wallet application can construct transactions even if it is completely offline &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;关于Transaction的工作完全是由用户选择的wallet application来完成的，那么在获取正确的inputs的时候 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果用户选择的wallet是一个full node，那么wallet就会直接去查询bitcoin network 中的内容； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果用户选择的是一个lightweight 的wallet，那么它只会追踪用户个人的unspent outputs &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;然后进行转账，这时候不需要网络也可以进行，就像在家里写了一张支票，可以稍后再交给银行一样，这里在本地离线写好了transaction的inputs和outputs，随后再交给bitcoin network 也可以 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;creating-outputs&#34;&gt;Creating outputs&lt;/h4&gt;
&lt;p&gt;&amp;ldquo;A transaction output is created in the form of a script that creates an encumbrance on the value and can only be redeemed by the introduction of a solution to the script.&amp;rdquo; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Alice’s transaction output will contain a script that says something like, “This output is payable to whoever can present a signature from the key corresponding to Bob’s public address.” Because only Bob has the wallet with the keys corresponding to that address, only Bob’s wallet can present such a signature to redeem this output. Alice will therefore “encumber” the output value with a demand for a signature from Bob.&amp;rdquo; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;创建outputs: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Alice 创建一个脚本，这个脚本会实现：将一部分的inputs抵押在bitcoin network 上，随后等待Bob 来赎回。那么赎回就需要Bob 提供他对应的key来进行签名，只要签名正确就可以赎回这部分的 bitcoin value &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同时transaction 会产生transaction fee 用来支付 miner 对transaction进行验证和记账的奖励，这个 trasaction fee 通常会在找零 change 里扣除 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;bitcoin-mining&#34;&gt;Bitcoin Mining&lt;/h3&gt;
&lt;h4 id=&#34;记账&#34;&gt;记账&lt;/h4&gt;
&lt;p&gt;转发交易：最终的目的是将每一次交易都记录在block chain 上面 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;所有参与到bitcoin network 中的终端都叫做bitcoin node  他们都通过bitcoin protocol 来进行交流 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;当Alice的wallet 将一个transaction 发送到另一个bitcoin node 的时候，每个节点都会验证这个transaction 是否属于自己，因为他们都可以用自己的key来验证，直到传递到Bob &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;当一个bitcoin node 收到了之前没有见过的transaction 的时候，他们就会做flooding 来确保大部分的节点都能收到这个transaction &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这里有一个常见的误区就是，Bob 需要等待10min或者60min的时间，等待transaction被记账之后，才能完成咖啡的交付，实际上只需要几秒钟的时间，Bob 所拥有的 bitcoin node 就会得知有一个属于他的待赎回的outputs, 这已经是十分可靠的了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;挖矿&#34;&gt;挖矿&lt;/h4&gt;
&lt;p&gt;矿工负担高性能的机器以及运行所需要的电费来进行挖矿，主要的工作是验证 Proof-of-Work &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;“The algorithm for Proof-of-Work involves repeatedly hashing the header of the block and a random number with the SHA256 cryptographic algorithm until a solution matching a predetermined pattern emerges.” &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;矿工之前都可以互相合作，通过 mining pool &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;每次当bitcoin network 中有bitcoin node 提交一个新的transaction ，这些transaction就会被放到pool of unverified transactions 当中。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;每个矿工开始挖矿的目的都是为了创造一个属于自己的block, 然后将这个block 添加到blockchain 上面去 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;因此他们会首先创建一个 &lt;code&gt;candidate block&lt;/code&gt;, 然后开始验证所有当前存在于 &lt;code&gt;pool of unverified&lt;/code&gt; 的 transactions, 同时他们会添加一条新的transaction which 指向他们的地址，这个transaction 所包含的bitcoin value 就是一个新的block 的奖励以及所有的transaction fee ，相当于是银行印了新的钱还有所有转账的手续费，当他们谁第一个完成了 proof of work algorithm的计算，就可以将他们所创造的 &lt;code&gt;candidate block&lt;/code&gt; 添加到block chain 的末尾去成为新的block，其他人验证了其正确性之后，就会转而创建新的candidate block来计算新的block &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;一个很好的比喻就是proof of work 就是一个大型的数独游戏，通过增加行和列的大小可以很容易的增加难度，但是验证起来却十分容易 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同时除了验证pool of unverified transactions 之外，还需要验证以前的transactions ，也就是说计算量会越来越大，之前的transaction 也会变得越来越可靠，一般认为存在于6个blocks的 transaction就已经是不可逆的了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Mastering Bitcoin 2nd Edition Chapter 6</title>
        <link>https://ginkgo.org.cn/posts/mb2_chapter_6/</link>
        <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/mb2_chapter_6/</guid>
        <description>&lt;p&gt;&amp;lt;!&amp;ndash;more&amp;ndash;&amp;gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;mastering-bitcoin-2nd-edition-chapter-6-transaction&#34;&gt;Mastering Bitcoin 2nd Edition Chapter 6: Transaction&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Transactions are the most important part of the bitcoin system. Everything else in bitcoin is designed to ensure that transactions can be created, propagated on the network, validated, and finally added to the global ledger of transactions (the blockchain).&amp;rdquo; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;第六章的开篇又提到了Transaction 的重要性，可以说就是为了保证Transaction 能够成功，才创造了其他一系列的技术支持。在第二章中，我们已经大致明白了transaction 是怎样工作的了，在第六章中，我们将介绍其中的细节。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;先贴一个Transaction 在这里，之后我们慢慢展开讲其中所包含的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;locktime&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;vin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;txid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;vout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;scriptSig&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204 b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d1 72787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;sequence&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4294967295&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;vout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.01500000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;scriptPubKey&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OP_DUP OP_HASH160
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.08450000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;scriptPubKey&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OP_DUP OP_HASH160
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt; 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;transaction-outputs-and-inputs&#34;&gt;Transaction Outputs and Inputs&lt;/h3&gt;
&lt;p&gt;这里我们直接引入一个新的概念： &lt;code&gt;UTXO (Unspent transaction outputs)&lt;/code&gt; 未被花费的outputs，他具有discrete and indivisible 两个特性，就像物理货币一样，每一个硬币，每一张钞票，你在消费的时候，不能把它拆开来使用一样，并且一旦用出，你得到的找零也是其他的货币。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;所有的Transaction整个过程中都是涉及到UTXO &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Received Bitcoin&lt;/dt&gt;
&lt;dd&gt;Wallet 通过检测整一个bitcoin network, 发现有与当前钱包所控制的bitcoin address 相关的UTXO 存在 &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Bitcoin Balance&lt;/dt&gt;
&lt;dd&gt;Wallet 对所有这些检测到的可以使用的UTXO 做一个总和，就是当前的余额balance &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;dt&gt;Spend UTXO&lt;/dt&gt;
&lt;dd&gt;&lt;ol&gt;
&lt;li&gt;将多个UTXO 汇总/直接使用一个大额度的UTXO &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;差值作为找零生成新的UTXO 返回钱包 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;这同时也代表着新的UTXO 的产生 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;不同大小的UTXO的不断汇总，分散，但是形成了一条chain &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;dt&gt;Coinbase transaction&lt;/dt&gt;
&lt;dd&gt;先有鸡，还是先有蛋的问题，最找的UTXO 从哪里来的呢？ &lt;!-- raw HTML omitted --&gt;
这里就要引入一个新的概念coinbase transaction 也就是每个block由miner创造的一个特殊的transaction， 包含了创造新的block 的奖励以及所有的transaction fees，这个就是最初始产生的UTXO &lt;!-- raw HTML omitted --&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;transaction-outputs&#34;&gt;Transaction Outputs&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;Every bitcoin transaction creates outputs ,which are recorded on the bitcoin ledger.&amp;rdquo; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Transcation outputs 由两部分组成&lt;/dt&gt;
&lt;dd&gt;&lt;ol&gt;
&lt;li&gt;一定数量的bitcoin, 用 &lt;code&gt;satoshis&lt;/code&gt; 来表示 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;一个密码学题目，用来决定如果使用这个output (A cryptographic puzzle: &lt;code&gt;locking script&lt;/code&gt;, &lt;code&gt;witness script&lt;/code&gt;, or a &lt;code&gt;scriptPubKey&lt;/code&gt;) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;此时我们再回过头来之前transcation的内容，value out部分就很好理解了，就是用 &lt;code&gt;satoshis&lt;/code&gt; 表示的一部分value 以及用scriptPubkey表示的一个 puzzle, 我们之后会讲到如何lock+unlock 这个scriptPubKey &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;vout&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.01500000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;scriptPubKey&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OP_DUP OP_HASH160
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;ab68025513c3dbd2f7b92a94e0581f5d50f654e7 OP_EQUALVERIFY OP_CHECKSIG&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.08450000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;scriptPubKey&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OP_DUP OP_HASH160
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt; 7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;transaction-serialisation-outputs&#34;&gt;Transaction serialisation &amp;ndash; outputs&lt;/h4&gt;
&lt;p&gt;我们知道所有的Transaction 都会在整个bitcoin network中传递，同时也会被保存在各个节点上(bitcoin libraries) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么为了传输以及保存的方便，就有了两种形式： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一种就是我们之前见到过的用数据结构进行存储 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;第二种就是转换成byte stream 的形式，方便用于网络的传输 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;他们之前的转换就被我们称为序列化serialisation 以及反序列化 deserialisation &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据结构 -&amp;gt; byte-stream: serialisation &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_14-50-20_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;byte-stream -&amp;gt; 数据结构：deserialisation &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;transaction-inputs&#34;&gt;Transaction Inputs&lt;/h3&gt;
&lt;p&gt;Transaction inputs 制定了哪些UTXO 将要被用到本次transaction 当中，并为其提供unlocking script的proof of ownership &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;当wallet开始进行一次transaction 的时候，它会从该wallet 所控制的所有UTXO中选择符合要求的，一定数量的UTXO 来进行 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Transaction Inputs 包含两个部分&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;一个指向对应的一个 UTXO 的指针 &lt;!-- raw HTML omitted --&gt;
（通过这个指针，包括hash id &amp;amp; sequence number, 我们可以在blockchain上找到这个UTXO 对应的信息） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;一个 unlocking script &lt;!-- raw HTML omitted --&gt;
（用于满足UTXO的 locking script的使用条件） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们继续通过之前的例子来看transaction inputs &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;vin&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;txid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;7957a35fe64f80d234d76d83a2a8f1a0d8149a41d81de548f0a65a8a999f6f18&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;vout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;scriptSig&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204 b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813[ALL] 0484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc5412336376789d1 72787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adf&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;sequence&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4294967295&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这条 Inputs 的记录包含了四个部分： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Transaction ID &lt;!-- raw HTML omitted --&gt;
指向了我们需要的UTXO所对应的Transaction &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Output index (vout) &lt;!-- raw HTML omitted --&gt;
用于指示对应的那个Transaction中我们需要的UTXO &lt;!-- raw HTML omitted --&gt;
记得我们之前提到的不同forms的transaction吗，其中有一种就是存在很多的outputs，也就是生成了很多新的UTXO, 我们需要指出我们本次需要的具体是哪一个 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;scriptSig，用于unlock对应UTXO的locking script &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;sequence number &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;细心的人可能会发现，在这条关于inputs的记录中似乎少了点什么，作为一个转账记录，它缺少最重要的东西，就是“多少钱” &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;完全没有bitcoin value 以及 locking script的信息 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这也是作者提醒各位开发者的信息，每次在处理transaction 特别是inputs的时候，我们都需要利用 &lt;code&gt;Transaction ID&lt;/code&gt; 去主动去获取对应的 UTXO 的信息(&lt;code&gt;getrawtrasaction&lt;/code&gt; and &lt;code&gt;decoderawtrasaction&lt;/code&gt;) &lt;!-- raw HTML omitted --&gt;
比如以这条记录为例，查询到的结果就是 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;vout&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nt&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.10000000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nt&#34;&gt;&amp;#34;scriptPubKey&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OP_DUP OP_HASH160
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;7f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8 OP_EQUALVERIFY OP_CHECKSIG&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;transaction-serialization-inputs&#34;&gt;Transaction serialization—inputs&lt;/h4&gt;
&lt;p&gt;Transaction inputs的存储和传输同样也需要用到序列化和反序列化 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-04-25_15-17-51_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;transaction-fee&#34;&gt;Transaction fee&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;设置transaction fee 的目的？&lt;/dt&gt;
&lt;dd&gt;&lt;ol&gt;
&lt;li&gt;给予miners记账的奖励 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;通过设置transaction fee 其实带来的是一个安全机制，也就是说attackers 不同通过大量的transaction来flood网络，因为这样会产生大量的消耗 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;dt&gt;如何决定 transcation fee 的数量？&lt;/dt&gt;
&lt;dd&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最开始是恒定的 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后来开始可以自由设置 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;dt&gt;Transaction fee 的多少有什么影响&lt;/dt&gt;
&lt;dd&gt;Transaction fee的数量直接决定了对应的这个 transaction 被处理的优先级，数量越多，就更有可能被包含在下一个block中 &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;相对的，如果你设的越低，或者根本不设，很可能会因为best-effort而被放到很后面来执行，甚至根本永远都不会被处理 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Adding Fees to Trasactions&lt;/dt&gt;
&lt;dd&gt;我们观察之前的transaction的数据结构，里面并没有任何的变量指向transaction fee，那么其实这里是需要提前自行从找零的charge中扣除一部分的bitcoin value，如果忘记做了这一点，就会把整一个charge付给miner。当我们主动扣除之后，那么在后期结算的时候，就可以发现有一些未被分配的bitcoin value，这些就会被当作是transaction fee。 &lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Fees = Sum(Inputs) – Sum(Outputs)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就如下图的一次transaction一样，我们可以看到右侧的outputs中，综合为0.995 BTC，也就是扣除了transaction fee之后的结果 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-11_22-57-13_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;transaction-validation&#34;&gt;Transaction validation&lt;/h3&gt;
&lt;p&gt;在这一章，我们来具体讲讲每一个transaction要如何得到验证，我们先再来回顾一下构成一个transaction所需要的inputs和outputs是由什么组成的。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Transaction Inputs 包含两个部分&lt;/dt&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;一个指向对应的一个 UTXO 的指针 &lt;!-- raw HTML omitted --&gt;
（通过这个指针，包括hash id &amp;amp; sequence number, 我们可以在blockchain上找到这个UTXO 对应的信息） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;一个 unlocking script &lt;!-- raw HTML omitted --&gt;
（用于满足UTXO的 locking script的使用条件） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Transcation outputs 由两部分组成&lt;/dt&gt;
&lt;dd&gt;&lt;ol&gt;
&lt;li&gt;一定数量的bitcoin, 用 &lt;code&gt;satoshis&lt;/code&gt; 来表示 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;一个密码学题目，用来决定如果使用这个output (A cryptographic puzzle: &lt;code&gt;locking script&lt;/code&gt;, &lt;code&gt;witness script&lt;/code&gt;, or a &lt;code&gt;scriptPubKey&lt;/code&gt;) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;我们可以观察到他们都包含了一个概念叫做 &lt;code&gt;script&lt;/code&gt; ，中文我们一般翻译为脚本，意思是一段可以执行的指令，一开始我接触这个概念的时候我也觉得很奇怪，为什么要在inputs和outputs中放脚本呢，他们又要如何运行呢，我们接着一起来来看。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;先说结论，这些脚本确实可以运行， &lt;code&gt;unlocking script&lt;/code&gt; 以及 &lt;code&gt;locking script&lt;/code&gt; 结合在一起，可以组成简单的计算，得到 &lt;code&gt;True&lt;/code&gt; / &lt;code&gt;False&lt;/code&gt; 的结果来决定本次 &lt;code&gt;transaction&lt;/code&gt; 是否成立，如果成立，那么 &lt;code&gt;UTXO&lt;/code&gt; 将会被 &lt;code&gt;spent&lt;/code&gt; 也就从 &lt;code&gt;UTXO set&lt;/code&gt; 中被移除了。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-11_21-20-46_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;pay-to-public-key-hash-script&#34;&gt;Pay-to-Public-Key-Hash script&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;A locking script&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;is a spending condition placed on an output &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;also called &lt;code&gt;scriptPubKey&lt;/code&gt;, &lt;code&gt;witness script&lt;/code&gt;, &lt;code&gt;crytographic puzzle&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;it usually contained a public key or bitcoin address (public key hash) &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;A unlocking script&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;is a script that &amp;ldquo;solves,&amp;rdquo; or satisfies, the conditions placed on an output by a locking script and allows the output to be spent &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;also called &lt;code&gt;scriptSig&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;contain a digital signature produced by the user&amp;rsquo;s wallet from his or her private key &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;我们用之前Alice在Bob的咖啡馆买咖啡的例子来演示具体需要如何来验证一次transaction: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Alice发起了一次付款，她使用自己钱包中的UTXO作为inputs，然后产生一个output给咖啡馆，一个output作为找零返回给自己 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发给咖啡馆的transaction output将会包含一个locking script如下: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;OP_DUP OP_HASH160 &amp;lt;Cafe Public Key Hash&amp;gt; OP_EQUALVERIFY OP_CHECKSIG &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OP开头的字符串都表示script指令，那么这一串locking script就包含了一系列的指令和咖啡馆的public key hash &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当Bob的咖啡馆需要消费这个input(UTXO)的时候，就需要利用它的unlocking script来解锁之前的locking script,其中应该包含两个部分 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;Cafe Signature&amp;gt; &amp;lt;Cafe Public Key&amp;gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;那么当locking script和unlocking script拼接在一起的时候，就组成了一个完整的脚本 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;Cafe Signature&amp;gt; &amp;lt;Cafe Public Key&amp;gt; OP_DUP OP_HASH160 &amp;lt;Cafe Public Key Hash&amp;gt; OP_EQUALVERIFY OP_CHECKSIG &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果验证的结果为TRUE的话就验证成功了 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以看看具体的验证过程，这里的脚本语言是基于stack栈实现的： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-11_21-45-29_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将signature压入栈 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;将Public key压入栈 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;使用DUP指令来复制栈顶的内容并压入栈 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-11_21-47-00_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用HASH160来处理栈顶的内容并将结果压入栈HASH160(PubK) = &amp;lt;PubKHash&amp;gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;将原本locking script中的&amp;lt;PubKHash&amp;gt;压入栈 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;使用指令EQUALVERIFY来比较栈顶的两个 &amp;lt;PubKHash&amp;gt; 是否相等，如果相等，则全部移出栈 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;最后使用指令CHECKSIG来验证 &amp;lt;PubK&amp;gt; 与 &amp;lt;sig&amp;gt; 是否匹配（本质上判断是不是一对public key 和 private key），如果匹配成功，返回True，验证成功 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里附带一个 &lt;code&gt;Bitcoin Address&lt;/code&gt; 的产生过程 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-11_21-52-24_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
